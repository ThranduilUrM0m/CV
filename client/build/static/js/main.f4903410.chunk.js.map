{"version":3,"sources":["utils/API.js","components/Dashboard/Dashboard.js","components/Login/Login.js","components/Signup/Signup.js","components/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["headers","burl","email","password","axios","post","send","localStorage","getItem","clear","Dashboard","disconnect","API","window","location","className","Button","onClick","this","block","bsSize","type","React","Component","Login","state","a","length","data","setItem","token","console","error","handleChange","event","setState","target","id","value","FormGroup","controlId","ControlLabel","FormControl","autoFocus","onChange","Signup","cpassword","PrivateRoute","component","rest","render","props","to","App","exact","path","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4903410.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst headers = {\r\n    \"Content-Type\": \"application/json\"\r\n};\r\nconst burl = \"http://localhost:8800\";\r\n\r\nexport default {\r\n    login: function(email, password) {\r\n        return axios.post(\r\n            `${burl}/user/login`,\r\n            {\r\n                email,\r\n                password\r\n            },\r\n            {\r\n                headers: headers\r\n            }\r\n        );\r\n    },\r\n    signup: function(send) {\r\n        return axios.post(`${burl}/user/signup`, send, { headers: headers });\r\n    },\r\n\r\n    isAuth: function() {\r\n        return localStorage.getItem(\"token\") !== null;\r\n    },\r\n    logout: function() {\r\n        localStorage.clear();\r\n    }\r\n};","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport API from \"../../utils/API\";\r\n\r\nexport class Dashboard extends React.Component {\r\n  disconnect = () => {\r\n    API.logout();\r\n    window.location = \"/\";\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Dashboard\">\r\n        <h1>Dashboard</h1>\r\n        <Button onClick={this.disconnect} block bsSize=\"large\" type=\"submit\">\r\n          Se d√©connecter\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\nimport API from \"../../utils/API\";\r\n\r\nexport class Login extends React.Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\"\r\n  };\r\n  send = async () => {\r\n    const { email, password } = this.state;\r\n    if (!email || email.length === 0) {\r\n      return;\r\n    }\r\n    if (!password || password.length === 0) {\r\n      return;\r\n    }\r\n    try {\r\n      const { data } = await API.login(email, password);\r\n      localStorage.setItem(\"token\", data.token);\r\n      window.location = \"/dashboard\";\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  };\r\n  render() {\r\n    const { email, password } = this.state;\r\n    return (\r\n      <div className=\"Login\">\r\n        <FormGroup controlId=\"email\" bsSize=\"large\">\r\n          <ControlLabel>Email</ControlLabel>\r\n          <FormControl\r\n            autoFocus\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={this.handleChange}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup controlId=\"password\" bsSize=\"large\">\r\n          <ControlLabel>Password</ControlLabel>\r\n          <FormControl\r\n            value={password}\r\n            onChange={this.handleChange}\r\n            type=\"password\"\r\n          />\r\n        </FormGroup>\r\n        <Button onClick={this.send} block bsSize=\"large\" type=\"submit\">\r\n          Connexion\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\nimport API from \"../../utils/API\";\r\n\r\nexport class Signup extends React.Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    cpassword: \"\"\r\n  };\r\n  send = async () => {\r\n    const { email, password, cpassword } = this.state;\r\n    if (!email || email.length === 0) return;\r\n    if (!password || password.length === 0 || password !== cpassword) return;\r\n    try {\r\n      const { data } = await API.signup({ email, password });\r\n      localStorage.setItem(\"token\", data.token);\r\n      window.location = \"/dashboard\";\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  };\r\n  render() {\r\n    const { email, password, cpassword } = this.state;\r\n    return (\r\n      <div className=\"Login\">\r\n        <FormGroup controlId=\"email\" bsSize=\"large\">\r\n          <ControlLabel>Email</ControlLabel>\r\n          <FormControl\r\n            autoFocus\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={this.handleChange}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup controlId=\"password\" bsSize=\"large\">\r\n          <ControlLabel>Password</ControlLabel>\r\n          <FormControl\r\n            value={password}\r\n            onChange={this.handleChange}\r\n            type=\"password\"\r\n          />\r\n        </FormGroup>\r\n        <FormGroup controlId=\"cpassword\" bsSize=\"large\">\r\n          <ControlLabel>Confirm Password</ControlLabel>\r\n          <FormControl\r\n            value={cpassword}\r\n            onChange={this.handleChange}\r\n            type=\"password\"\r\n          />\r\n        </FormGroup>\r\n        <Button onClick={this.send} block bsSize=\"large\" type=\"submit\">\r\n          Inscription\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport API from \"../utils/API.js\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => {\r\n      if (API.isAuth() === false) {\r\n        return <Redirect to=\"/\" />;\r\n      } else {\r\n        return <Component {...props} />;\r\n      }\r\n    }}\r\n  />\r\n);","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Dashboard } from \"./components/Dashboard/Dashboard.js\";\nimport { Login } from \"./components/Login/Login.js\";\nimport { Signup } from \"./components/Signup/Signup.js\";\nimport { PrivateRoute } from \"./components/PrivateRoute.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-content\">\n          <Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <PrivateRoute path=\"/dashboard\" component={Dashboard} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}