[{"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\index.js":"1","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Signup\\Signup.js":"2","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Login\\Login.js":"3","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\serviceWorker.js":"4","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\PrivateRoute.js":"5","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\store.js":"6","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\App\\App.js":"7","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\App\\NotFound.js":"8","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Blog\\Blog.js":"9","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Post\\Post.js":"10","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\ContactMe\\ContactMe.js":"11","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Home\\Home.js":"12","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\About\\About.js":"13","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Confirmation\\Confirmation.js":"14","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Minttea\\Minttea.js":"15","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Dashboard\\Dashboard.js":"16","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\utils\\API.js":"17","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Footer\\Footer.js":"18","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Header\\Header.js":"19","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Dashboard\\Calendar.js":"20","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Dashboard\\Account.js":"21","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\reducers\\index.js":"22","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Project\\index.js":"23","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Article\\index.js":"24","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\reducers\\home.js":"25","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\actions\\types.js":"26","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Project\\FormProject\\index.jsx":"27","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Article\\Form\\index.jsx":"28"},{"size":2311,"mtime":1597920252109,"results":"29","hashOfConfig":"30"},{"size":7057,"mtime":1593787473930,"results":"31","hashOfConfig":"30"},{"size":4586,"mtime":1591612159029,"results":"32","hashOfConfig":"30"},{"size":5003,"mtime":1581367090296,"results":"33","hashOfConfig":"30"},{"size":434,"mtime":1590350322736,"results":"34","hashOfConfig":"30"},{"size":810,"mtime":1595885463469,"results":"35","hashOfConfig":"30"},{"size":245,"mtime":1590772542201,"results":"36","hashOfConfig":"30"},{"size":2020,"mtime":1597621968659,"results":"37","hashOfConfig":"30"},{"size":29066,"mtime":1613475850529,"results":"38","hashOfConfig":"30"},{"size":38331,"mtime":1598553961050,"results":"39","hashOfConfig":"30"},{"size":6383,"mtime":1613471011512,"results":"40","hashOfConfig":"30"},{"size":30744,"mtime":1597975381370,"results":"41","hashOfConfig":"30"},{"size":7305,"mtime":1611908482543,"results":"42","hashOfConfig":"30"},{"size":3728,"mtime":1597622007560,"results":"43","hashOfConfig":"30"},{"size":36473,"mtime":1606991738217,"results":"44","hashOfConfig":"30"},{"size":219316,"mtime":1600172634473,"results":"45","hashOfConfig":"30"},{"size":1587,"mtime":1589731154945,"results":"46","hashOfConfig":"30"},{"size":22737,"mtime":1597622149585,"results":"47","hashOfConfig":"30"},{"size":19909,"mtime":1613476484661,"results":"48","hashOfConfig":"30"},{"size":4640,"mtime":1599578637426,"results":"49","hashOfConfig":"30"},{"size":13045,"mtime":1600171472421,"results":"50","hashOfConfig":"30"},{"size":125,"mtime":1590772760641,"results":"51","hashOfConfig":"30"},{"size":55,"mtime":1589304427836,"results":"52","hashOfConfig":"30"},{"size":41,"mtime":1581369343270,"results":"53","hashOfConfig":"30"},{"size":5652,"mtime":1606991672069,"results":"54","hashOfConfig":"30"},{"size":1122,"mtime":1606990871459,"results":"55","hashOfConfig":"30"},{"size":14265,"mtime":1591118046370,"results":"56","hashOfConfig":"30"},{"size":14502,"mtime":1591118021772,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"cndxj4",{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":2,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\index.js",[],["126","127"],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Signup\\Signup.js",["128","129","130"],"import React from \"react\";\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport API from \"../../utils/API\";\r\nimport { FullPage, Slide } from 'react-full-page';\r\nimport 'whatwg-fetch';\r\nimport 'bootstrap';\r\nimport Fingerprint from 'fingerprintjs';\r\nimport * as $ from \"jquery\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst socketURL =\r\n\tprocess.env.NODE_ENV === 'production'\r\n\t\t? window.location.hostname\r\n\t\t: 'localhost:8800';\r\n\r\nconst socket = socketIOClient(socketURL, { 'transports': ['websocket', 'polling'] });\r\n\r\nclass Signup extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tusername: '',\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\tconfirm_password: '',\r\n\t\t\tmodal_msg: '',\r\n\t\t};\r\n\t\tthis.send_signup = this.send_signup.bind(this);\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\tcomponentWillMount() {\r\n\t\tif (localStorage.getItem('email')) {\r\n\t\t\twindow.location = \"/dashboard\";\r\n\t\t}\r\n\t}\r\n\tasync send_signup() {\r\n\t\tlet self = this;\r\n\t\tvar f = new Fingerprint().get();\r\n\t\tvar _fingerprint = f.toString();\r\n\t\tvar _role = [\"normal\"];\r\n\t\tconst { username, email, password, confirm_password } = this.state;\r\n\t\tconst { onSubmitNotification } = this.props;\r\n\t\ttry {\r\n\t\t\tif (password != confirm_password) throw { text: 'Please check your password confirmation' };\r\n\t\t\tawait API.signup({ username, email, password, _fingerprint, _role })\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tself.setState({\r\n\t\t\t\t\t\tmodal_msg: res.data.text\r\n\t\t\t\t\t}, () => {\r\n\t\t\t\t\t\t$('#signup_modal').modal('toggle');\r\n\t\t\t\t\t\tsocket.emit(\"USER_UPDATED\", res.data.text);\r\n\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\ttype: 'User Account Created',\r\n\t\t\t\t\t\t\tdescription: '\\'' + email + '\\' created an account as \\'' + username + '\\'',\r\n\t\t\t\t\t\t\tauthor: email\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\tself.setState({\r\n\t\t\t\t\t\tmodal_msg: error.response.data.text\r\n\t\t\t\t\t}, () => {\r\n\t\t\t\t\t\t$('#signup_modal').modal('toggle');\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tself.setState({\r\n\t\t\t\tmodal_msg: JSON.stringify(error)\r\n\t\t\t}, () => {\r\n\t\t\t\t$('#signup_modal').modal('toggle');\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\thandleChange(event) {\r\n\t\tthis.setState({\r\n\t\t\t[event.target.id]: event.target.value\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\tconst { username, email, password, confirm_password, modal_msg } = this.state;\r\n\t\treturn (\r\n\t\t\t<FullPage>\r\n\t\t\t\t<Slide>\r\n\t\t\t\t\t<section className=\"first_section_signup\">\r\n\t\t\t\t\t\t<div className=\"wrapper_full\">\r\n\t\t\t\t\t\t\t<div className=\"modal fade\" id=\"signup_modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"signup_modalLabel\" aria-hidden=\"true\">\r\n\t\t\t\t\t\t\t\t<div className=\"modal-dialog\" role=\"document\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"modal-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t<a title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n\t\t\t\t\t\t\t\t\t\t\t<h5 className=\"modal-title\" id=\"signup_modalLabel\">Hello!</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t<div>{modal_msg}</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"Content\">\r\n\t\t\t\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"face face1\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t\t\t\t\t\t<h4>Login</h4>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"face face2\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<h6>Welcome to boutaleb.</h6>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>The blog to speak louder.</p>\r\n\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<a className=\"text-muted\" href=\"/login\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span data-attr-span=\"login.\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogin.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"Sidebar\">\r\n\t\t\t\t\t\t\t\t<div className=\"wrap\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"Head_Signup\">\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<h3>Signup</h3>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"Signup\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className='input-field col s12'>\r\n\t\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName='validate form-group-input'\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\t\t\t\t\tname='username'\r\n\t\t\t\t\t\t\t\t\t\t\t\tid='username'\r\n\t\t\t\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={username}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='username' className={username ? 'active' : ''}>username</label>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group-line\"></div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className='input-field col s12'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='validate form-group-input'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype='email'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname='email'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid='email'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={email}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='email' className={email ? 'active' : ''}>Email</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group-line\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className='input-field col s6'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='validate form-group-input'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype='password'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname='password'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid='password'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={password}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='password' className={password ? 'active' : ''}>Password</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group-line\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className='input-field col s6'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='validate form-group-input'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype='password'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname='confirm_password'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid='confirm_password'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={confirm_password}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='confirm_password' className={confirm_password ? 'active' : ''}>Password</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group-line\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-field col s12\">\r\n\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"pull-right\"\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tname='btn_login'\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.send_signup}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span data-attr-span=\"signup.\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsignup.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</section>\r\n\t\t\t\t</Slide>\r\n\t\t\t</FullPage>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({ onSubmitNotification: data => dispatch({ type: 'SUBMIT_NOTIFICATION', data }) })\r\nconst mapStateToProps = state => ({})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup) ","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Login\\Login.js",["131"],"import React from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport { FullPage, Slide } from 'react-full-page';\r\nimport 'whatwg-fetch';\r\nimport 'bootstrap';\r\nimport * as $ from \"jquery\";\r\n\r\nclass Login extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n        this.state = {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\tmodal_msg: ''\r\n\t\t};\r\n        this.send_login = this.send_login.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\tcomponentWillMount() {\r\n\t\tif(localStorage.getItem('email')) {\r\n\t\t\twindow.location = \"/dashboard\";\r\n\t\t}\r\n\t}\r\n\tasync send_login() {\r\n\t\tlet self = this;\r\n        const { email, password } = this.state;\r\n        await API.login(email, password)\r\n\t\t.then((res) => {\r\n\t\t\tlocalStorage.setItem(\"token\", res.data.token);\r\n\t\t\tlocalStorage.setItem('email', res.data.email);\r\n\t\t\tlocalStorage.setItem('username', res.data.username);\r\n\t\t\twindow.location = \"/dashboard\";\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tself.setState({\r\n\t\t\t\tmodal_msg: error.response.data.text\r\n\t\t\t}, () => {\r\n\t\t\t\t$('#login_modal').modal('toggle');\r\n\t\t\t});\r\n\t\t});\r\n    }\r\n\thandleChange(event) {\r\n\t\tthis.setState({\r\n\t\t\t[event.target.id]: event.target.value\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\tconst { email, password, modal_msg } = this.state;\r\n\t\treturn (\r\n\t\t\t<FullPage>\r\n\t\t\t\t<Slide>\r\n\t\t\t\t\t<section className=\"first_section_login\">\r\n\t\t\t\t\t\t<div className=\"wrapper_full\">\r\n\t\t\t\t\t\t\t<div className=\"modal fade\" id=\"login_modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"signup_modalLabel\" aria-hidden=\"true\">\r\n\t\t\t\t\t\t\t\t<div className=\"modal-dialog\" role=\"document\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"modal-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t<a title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n\t\t\t\t\t\t\t\t\t\t\t<h5 className=\"modal-title\" id=\"signup_modalLabel\">Hello!</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t<div>{modal_msg}</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"Sidebar\">\r\n\t\t\t\t\t\t\t\t<div className=\"wrap\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"Head_Login\">\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<h3>Login</h3>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"Login\">\r\n\t\t\t\t\t\t\t\t\t\t<div className='row'>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className='input-field col s12'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName='validate form-group-input' \r\n\t\t\t\t\t\t\t\t\t\t\t\ttype='email' \r\n\t\t\t\t\t\t\t\t\t\t\t\tname='email' \r\n\t\t\t\t\t\t\t\t\t\t\t\tid='email' \r\n\t\t\t\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={email} \r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='email' className={email ? 'active' : ''}>Email</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group-line\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className='row'>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className='input-field col s12'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName='validate form-group-input' \r\n\t\t\t\t\t\t\t\t\t\t\t\ttype='password' \r\n\t\t\t\t\t\t\t\t\t\t\t\tname='password' \r\n\t\t\t\t\t\t\t\t\t\t\t\tid='password' \r\n\t\t\t\t\t\t\t\t\t\t\t\trequired=\"required\" \r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={password} \r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='password' className={password ? 'active' : ''}>Password</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group-line\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-field col s12\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"pull-right\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname='btn_login' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.send_login}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span data-attr-span=\"login.\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogin.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"Content\">\r\n\t\t\t\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"face face1\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t\t\t\t\t\t<h4>Signup.</h4>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"face face2\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<h6>Welcome to boutaleb.</h6>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>The blog to speak louder.</p>\r\n\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<a className=\"text-muted\" href=\"/signup\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span data-attr-span=\"signup.\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsignup.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</section>\r\n\t\t\t\t</Slide>\r\n\t\t\t</FullPage>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Login","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\serviceWorker.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\PrivateRoute.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\store.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\App\\App.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\App\\NotFound.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Blog\\Blog.js",["132"],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Post\\Post.js",["133","134","135","136","137","138","139","140","141","142"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { loadProgressBar } from 'axios-progress-bar';\r\nimport API from \"../../utils/API\";\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport { FullPage, Slide } from 'react-full-page';\r\nimport 'whatwg-fetch';\r\nimport Fingerprint from 'fingerprintjs';\r\nimport Footer from '../Footer/Footer';\r\nimport * as $ from \"jquery\";\r\nimport 'bootstrap';\r\nimport 'axios-progress-bar/dist/nprogress.css';\r\nimport {\r\n\tFacebookShareButton,\r\n\tFacebookMessengerShareButton,\r\n\tFacebookMessengerIcon,\r\n\tLinkedinShareButton,\r\n\tTwitterShareButton,\r\n\tPinterestShareButton,\r\n\tWhatsappShareButton,\r\n\tEmailShareButton,\r\n\tFacebookIcon,\r\n\tTwitterIcon,\r\n\tLinkedinIcon,\r\n\tPinterestIcon,\r\n\tWhatsappIcon,\r\n\tEmailIcon\r\n} from \"react-share\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst socketURL =\r\n  process.env.NODE_ENV === 'production'\r\n    ? window.location.hostname\r\n    : 'localhost:8800';\r\n    \r\nconst socket = socketIOClient(socketURL, {'transports': ['websocket', 'polling']});\r\nvar _ = require('lodash');\r\n\r\nclass Post extends React.Component {\r\n    constructor(props) {\r\n\t\tsuper(props);\r\n\r\n        var f = new Fingerprint().get();\r\n\t\tthis.state = {\r\n            _user: {},\r\n\t\t\t_id: '',\r\n\t\t\ttitle: '',\r\n\t\t\tbody: '',\r\n\t\t\tauthor: '',\r\n\t\t\tcategorie: '',\r\n\t\t\ttag: [],\r\n\t\t\tcomment: [],\r\n\t\t\t_comment_id_ifEditing: null,\r\n\t\t\t_comment_parent_id: null,\r\n\t\t\t_comment_author: '',\r\n\t\t\t_comment_body: '',\r\n\t\t\t_comment_fingerprint: f.toString(),\r\n\t\t\t_comment_upvotes: [],\r\n\t\t\t_comment_downvotes: [],\r\n\t\t\tupvotes: [],\r\n\t\t\tdownvotes: [],\r\n\t\t\tview: [],\r\n\t\t\tcreatedAt: '',\r\n\t\t\tfingerprint: f.toString(),\r\n\t\t}\r\n\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitViews = this.handleSubmitViews.bind(this);\r\n        this.handleSubmitUpvotes = this.handleSubmitUpvotes.bind(this);\r\n        this.handleSubmitDownvotes = this.handleSubmitDownvotes.bind(this);\r\n        this.handleSubmitComments = this.handleSubmitComments.bind(this);\r\n        this.handleSubmitupvotesComment = this.handleSubmitupvotesComment.bind(this);\r\n        this.handleReply = this.handleReply.bind(this);\r\n        this.handleEditComment = this.handleEditComment.bind(this);\r\n        this.handleDeleteComment = this.handleDeleteComment.bind(this);\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n\t\t\r\n\t\tthis.handleJSONTOHTML = this.handleJSONTOHTML.bind(this);\r\n\t\tthis._FormatNumberLength = this._FormatNumberLength.bind(this);\r\n        this._handleMouseMove = this._handleMouseMove.bind(this);\r\n        this._handleScroll = this._handleScroll.bind(this);\r\n\t}\r\n\tcomponentWillMount() {\t\t\r\n\t\tconst { onLoad, match } = this.props;\r\n\t\tconst self = this;\r\n\r\n\t\tfunction setEditFunction() {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\tself.get_user();\r\n\t\t\t\t\tsocket.on(\"USER_UPDATED_GET\", data => self.get_user());\r\n\t\t\t\t\ttrue ? resolve('Success') : reject('Error');\r\n\t\t\t\t}, 2000);\r\n\t\t\t})\r\n\t\t}\r\n\t\tsetEditFunction()\r\n\t\t\t.then(() => {\r\n\t\t\t\taxios('/api/articles')\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tfunction setEditFunction() {\r\n\t\t\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t\t\tonLoad(res.data);\r\n\t\t\t\t\t\t\t\tself.handleEdit(_.find(res.data.articles, {'_id': match.params.postId}));\r\n\t\t\t\t\t\t\t\ttrue ? resolve('Success') : reject('Error');\r\n\t\t\t\t\t\t\t}, 2000);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetEditFunction()\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\tself.handleSubmitViews();\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(err => console.log('There was an error:' + err));\r\n\t\t\t\t})\r\n\t\t\t\t.catch(function (error) {\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t});\r\n\t\t\t\treturn true;\r\n\t\t\t})\r\n\t\t\t.catch(err => console.log('There was an error:' + err));\r\n\t}\r\n\tcomponentDidMount() {\r\n        loadProgressBar();\r\n\t\tdocument.getElementById('articles_post').parentElement.style.height = 'initial';\r\n\t\tdocument.getElementById('comments_post').parentElement.style.height = 'initial';\r\n\t\tthis._handleMouseMove();\r\n\t\tthis._handleScroll();\r\n\t}\r\n\tasync get_user() {\r\n        const self = this;\r\n        await API.get_user(localStorage.getItem('email'))\r\n            .then((res) => {\r\n                self.setState({\r\n                    _user: res.data.user,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\tUNSAFE_componentWillReceiveProps(nextProps) {\r\n        if(nextProps.articleToEdit) {\r\n\t\t\tthis.setState({\r\n\t\t\t\t_id: nextProps.articleToEdit._id,\r\n                title: nextProps.articleToEdit.title,\r\n                body: nextProps.articleToEdit.body,\r\n\t\t\t\tauthor: nextProps.articleToEdit.author,\r\n\t\t\t\tcategorie: nextProps.articleToEdit.categorie,\r\n                tag: nextProps.articleToEdit.tag,\r\n\t\t\t\tcomment: nextProps.articleToEdit.comment,\r\n                upvotes: nextProps.articleToEdit.upvotes,\r\n                downvotes: nextProps.articleToEdit.downvotes,\r\n\t\t\t\tview: nextProps.articleToEdit.view,\r\n\t\t\t\tcreatedAt: nextProps.articleToEdit.createdAt,\r\n\t\t\t});\r\n        }\r\n\t}\r\n    handleEdit(article) {\r\n\t\tconst { setEdit } = this.props;\r\n        setEdit(article);\r\n\t}\r\n\thandleSubmit(){\r\n        const { onEdit } = this.props;\r\n\t\tconst { _id, title, body, author, categorie, tag, comment, upvotes, downvotes, view } = this.state;\r\n\t\t\r\n        return axios.patch(`/api/articles/${_id}`, {\r\n\t\t\ttitle,\r\n\t\t\tbody,\r\n\t\t\tauthor,\r\n\t\t\tcategorie,\r\n\t\t\ttag,\r\n\t\t\tcomment,\r\n\t\t\tupvotes,\r\n\t\t\tdownvotes,\r\n\t\t\tview,\r\n\t\t})\r\n\t\t\t.then((res) => onEdit(res.data));\r\n\t}\r\n\thandleSubmitViews() {\r\n\t\tconst f = new Fingerprint().get();\r\n\t\tconst { title, view } = this.state;\r\n\t\tconst { onSubmitNotification } = this.props;\r\n\t\tconst self = this;\r\n\r\n\t\tif( _.isUndefined( _.find(view, (v) => {return v.viewer === f.toString()}) ) ) {\r\n\t\t\tself.setState(state => ({\r\n\t\t\t\tview: [...state.view, {viewer: f.toString(), _createdAt: moment().format()}],\r\n\t\t\t}), () => {\r\n\t\t\t\tself.handleSubmit()\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\ttype: 'Post viewed',\r\n\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' viewed \\''+title+'\\'',\r\n\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\thandleSubmitUpvotes(event) {\r\n\t\tconst { title, upvotes, downvotes } = this.state;\r\n\t\tconst { onSubmitNotification } = this.props;\r\n        var f = new Fingerprint().get();\r\n        let target = event.target;\r\n\t\tlet self = this;\r\n\t\t\r\n\t\tif( _.isUndefined( _.find(upvotes, (u) => {return u.upvoter === f.toString()}) ) ) {\r\n\t\t\tself.setState(state => ({\r\n\t\t\t\tupvotes: [...state.upvotes, {upvoter: f.toString()}],\r\n\t\t\t}), () => {\r\n\t\t\t\tif( !_.isUndefined( _.find(downvotes, (d) => {return d.downvoter === f.toString()}) ) ) {\r\n\t\t\t\t\tlet _downvotes = _.takeWhile(downvotes, function(d) { return d.downvoter != f.toString(); });\r\n\t\t\t\t\tself.setState({\r\n\t\t\t\t\t\tdownvotes: _downvotes,\r\n\t\t\t\t\t}, () => {\r\n\t\t\t\t\t\tself.handleSubmit()\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\t\ttype: 'Article upvoted',\r\n\t\t\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' upvoted \\''+title+'\\'',\r\n\t\t\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\t$(target).closest(\"div\").parent().find('div.downvotes').removeClass('active');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.handleSubmit()\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\ttype: 'Article upvoted',\r\n\t\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' upvoted \\''+title+'\\'',\r\n\t\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t$(target).closest(\"div\").addClass('active');\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tlet _upvotes = _.takeWhile(upvotes, function(u) { return u.upvoter != f.toString(); });\r\n\t\t\tself.setState(state => ({\r\n\t\t\t\tupvotes: _upvotes,\r\n\t\t\t}), () => {\r\n\t\t\t\tself.handleSubmit()\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\ttype: 'Article negative upvoted',\r\n\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' negative upvoted \\''+title+'\\'',\r\n\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t$(target).closest(\"div\").removeClass('active');\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\thandleSubmitDownvotes(event) {\r\n\t\tconst { title, downvotes, upvotes } = this.state;\r\n\t\tconst { onSubmitNotification } = this.props;\r\n        var f = new Fingerprint().get();\r\n        let target = event.target;\r\n\t\tlet self = this;\r\n\t\t\r\n\t\tif( _.isUndefined( _.find(downvotes, (d) => {return d.downvoter === f.toString()}) ) ) {\r\n\t\t\tself.setState(state => ({\r\n\t\t\t\tdownvotes: [...state.downvotes, {downvoter: f.toString()}],\r\n\t\t\t}), () => {\r\n\t\t\t\tif( !_.isUndefined( _.find(upvotes, (u) => {return u.upvoter === f.toString()}) ) ) {\r\n\t\t\t\t\tlet _upvotes = _.takeWhile(upvotes, function(u) { return u.upvoter != f.toString(); });\r\n\t\t\t\t\tself.setState({\r\n\t\t\t\t\t\tupvotes: _upvotes,\r\n\t\t\t\t\t}, () => {\r\n\t\t\t\t\t\tself.handleSubmit()\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\t\ttype: 'Article downvoted',\r\n\t\t\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' downvoted \\''+title+'\\'',\r\n\t\t\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\t$(target).closest(\"div\").parent().find('div.upvotes').removeClass('active');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.handleSubmit()\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\ttype: 'Article downvoted',\r\n\t\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' downvoted \\''+title+'\\'',\r\n\t\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t$(target).closest(\"div\").addClass('active');\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tlet _downvotes = _.takeWhile(downvotes, function(d) { return d.downvoter != f.toString(); });\r\n\t\t\tself.setState(state => ({\r\n\t\t\t\tdownvotes: _downvotes,\r\n\t\t\t}), () => {\r\n\t\t\t\tself.handleSubmit()\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\ttype: 'Article negative downvoted',\r\n\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' negative downvoted \\''+title+'\\'',\r\n\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t$(target).closest(\"div\").removeClass('active');\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\thandleSubmitComments() {\r\n\t\tconst { title ,_comment_id_ifEditing, comment ,_comment_parent_id, _comment_author, _comment_body, _comment_fingerprint, _comment_upvotes, _comment_downvotes } = this.state;\r\n\t\tconst { onSubmitNotification } = this.props;\r\n\t\tconst self = this;\r\n\t\tlet _edited_comment = [];\r\n\r\n\t\tif(_comment_author && _comment_body) {\r\n\t\t\tif(_comment_id_ifEditing != null) {\r\n\t\t\t\t_edited_comment = comment;\r\n\t\t\t\tfunction setEditFunction() {\r\n\t\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t\t_edited_comment = _.map(_edited_comment, (_c) => {\r\n\t\t\t\t\t\t\t\tif(_c._id === _comment_id_ifEditing) {\r\n\t\t\t\t\t\t\t\t\t_c.author = _comment_author;\r\n\t\t\t\t\t\t\t\t\t_c.body = _comment_body;\r\n\t\t\t\t\t\t\t\t\t_c.fingerprint = _comment_fingerprint;\r\n\t\t\t\t\t\t\t\t\t_c.upvotes = _comment_upvotes;\r\n\t\t\t\t\t\t\t\t\t_c.downvotes = _comment_downvotes;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn _c;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\ttrue ? resolve('Success') : reject('Error');\r\n\t\t\t\t\t\t}, 2000);\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tsetEditFunction()\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\tself.setState(prevState => ({\r\n\t\t\t\t\t\t\tcomment : _edited_comment\r\n\t\t\t\t\t\t}), () => {\r\n\t\t\t\t\t\t\tfunction setEditFunction() {\r\n\t\t\t\t\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t\t\t\t\tself.handleSubmit()\r\n\t\t\t\t\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'Comment edited',\r\n\t\t\t\t\t\t\t\t\t\t\t\tdescription: '\\''+_comment_fingerprint+'\\' edited comment \\''+_comment_id_ifEditing+'\\' on article \\''+title+'\\'',\r\n\t\t\t\t\t\t\t\t\t\t\t\tauthor: _comment_fingerprint\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\ttrue ? resolve('Success') : reject('Error');\r\n\t\t\t\t\t\t\t\t\t}, 2000);\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsetEditFunction()\r\n\t\t\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\t\t\tself.setState({\r\n\t\t\t\t\t\t\t\t\t\t_comment_parent_id: null,\r\n\t\t\t\t\t\t\t\t\t\t_comment_author: '',\r\n\t\t\t\t\t\t\t\t\t\t_comment_body: '',\r\n\t\t\t\t\t\t\t\t\t\t_comment_upvotes: [],\r\n\t\t\t\t\t\t\t\t\t\t_comment_downvotes: [],\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(err => console.log('There was an error:' + err));\r\n\t\t\t} else {\r\n\t\t\t\tself.setState(state => ({\r\n\t\t\t\t\tcomment: [...state.comment, {\r\n\t\t\t\t\t\tparent_id: _comment_parent_id,\r\n\t\t\t\t\t\tauthor: _comment_author,\r\n\t\t\t\t\t\tbody: _comment_body,\r\n\t\t\t\t\t\tfingerprint: _comment_fingerprint,\r\n\t\t\t\t\t\t_createdAt: moment().format(),\r\n\t\t\t\t\t\tupvotes: _comment_upvotes,\r\n\t\t\t\t\t\tdownvotes: _comment_downvotes,\r\n\t\t\t\t\t}],\r\n\t\t\t\t}), () => {\r\n\t\t\t\t\tfunction setEditFunction() {\r\n\t\t\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t\t\tself.handleSubmit()\r\n\t\t\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\t\t\tif(_comment_parent_id != null) {\r\n\t\t\t\t\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\t\t\t\t\ttype: 'Comment submited',\r\n\t\t\t\t\t\t\t\t\t\t\tdescription: '\\''+_comment_fingerprint+'\\' replied to comment \\''+_comment_parent_id+'\\' in article \\''+title+'\\'',\r\n\t\t\t\t\t\t\t\t\t\t\tauthor: _comment_fingerprint\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\t\t\t\t\ttype: 'Comment submited',\r\n\t\t\t\t\t\t\t\t\t\t\tdescription: '\\''+_comment_fingerprint+'\\' submited a comment \\''+_comment_id_ifEditing+'\\' to article \\''+title+'\\'',\r\n\t\t\t\t\t\t\t\t\t\t\tauthor: _comment_fingerprint\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\ttrue ? resolve('Success') : reject('Error');\r\n\t\t\t\t\t\t\t}, 2000);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetEditFunction()\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\tself.setState({\r\n\t\t\t\t\t\t\t\t_comment_parent_id: null,\r\n\t\t\t\t\t\t\t\t_comment_author: '',\r\n\t\t\t\t\t\t\t\t_comment_body: '',\r\n\t\t\t\t\t\t\t\t_comment_upvotes: [],\r\n\t\t\t\t\t\t\t\t_comment_downvotes: [],\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(err => console.log('There was an error:' + err));\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t$('#exampleModal_comment').modal('show');\r\n\t\t}\r\n\t}\r\n\thandleSubmitupvotesComment(in_comment, event) {\r\n\t\tconst { title, comment } = this.state;\r\n\t\tconst { onSubmitNotification } = this.props;\r\n\t\tvar f = new Fingerprint().get();\r\n\t\tlet self = this;\r\n\t\tlet _edited_comment = [];\r\n\t\t\r\n\t\tif( _.isUndefined( _.find(_.get(_.find(comment, {'_id': in_comment._id}), 'upvotes'), (_up) => {return _up.upvoter === f.toString()}) ) ) {\r\n\t\t\tfunction setEditFunction() {\r\n\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t_edited_comment = comment;\r\n\t\t\t\t\t\t_edited_comment = _.map(_edited_comment, (_c) => {\r\n\t\t\t\t\t\t\tif(_c._id === in_comment._id) {\r\n\t\t\t\t\t\t\t\t_c.upvotes.push({\r\n\t\t\t\t\t\t\t\t\tupvoter: f.toString()\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tif(!_.isUndefined(_.find(_c.downvotes, {'downvoter': f.toString()}))) {\r\n\t\t\t\t\t\t\t\t\t_c.downvotes = _.takeWhile(_c.downvotes, function(d) { return d.downvoter != f.toString(); });\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn _c;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ttrue ? resolve('Success') : reject('Error');\r\n\t\t\t\t\t}, 2000);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tsetEditFunction()\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tself.setState(prevState => ({\r\n\t\t\t\t\t\tcomment : _edited_comment\r\n\t\t\t\t\t}), () => {\r\n\t\t\t\t\t\tself.handleSubmit()\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\t\ttype: 'Comment upvoted',\r\n\t\t\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' upvoted a comment \\''+in_comment._id+'\\' to article \\''+title+'\\'',\r\n\t\t\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => console.log('There was an error:' + err));\r\n\t\t} else {\r\n\t\t\tfunction setEditFunction() {\r\n\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t_edited_comment = comment;\r\n\t\t\t\t\t\t_edited_comment = _.map(_edited_comment, (_c) => {\r\n\t\t\t\t\t\t\tif(_c._id === in_comment._id) {\r\n\t\t\t\t\t\t\t\t_c.upvotes = _.takeWhile(_c.upvotes, function(u) { return u.upvoter != f.toString(); });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn _c;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ttrue ? resolve('Success') : reject('Error');\r\n\t\t\t\t\t}, 2000);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tsetEditFunction()\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tself.setState(prevState => ({\r\n\t\t\t\t\t\tcomment : _edited_comment\r\n\t\t\t\t\t}), () => {\r\n\t\t\t\t\t\tself.handleSubmit()\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\t\ttype: 'Comment negative upvoted',\r\n\t\t\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' negative upvoted a comment \\''+in_comment._id+'\\' to article \\''+title+'\\'',\r\n\t\t\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => console.log('There was an error:' + err));\r\n\t\t}\r\n\t}\r\n\thandleSubmitdownvotesComment(in_comment, event) {\r\n\t\tconst { title, comment } = this.state;\r\n\t\tconst { onSubmitNotification } = this.props;\r\n\t\tvar f = new Fingerprint().get();\r\n\t\tlet self = this;\r\n\t\tlet _edited_comment = [];\r\n\t\t\r\n\t\tif( _.isUndefined( _.find(_.get(_.find(comment, {'_id': in_comment._id}), 'downvotes'), (_do) => {return _do.downvoter === f.toString()}) ) ) {\r\n\t\t\tfunction setEditFunction() {\r\n\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t_edited_comment = comment;\r\n\t\t\t\t\t\t_edited_comment = _.map(_edited_comment, (_c) => {\r\n\t\t\t\t\t\t\tif(_c._id === in_comment._id) {\r\n\t\t\t\t\t\t\t\t_c.downvotes.push({\r\n\t\t\t\t\t\t\t\t\tdownvoter: f.toString()\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tif(!_.isUndefined(_.find(_c.upvotes, {'upvoter': f.toString()}))) {\r\n\t\t\t\t\t\t\t\t\t_c.upvotes = _.takeWhile(_c.upvotes, function(u) { return u.upvoter != f.toString(); });\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn _c;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ttrue ? resolve('Success') : reject('Error');\r\n\t\t\t\t\t}, 2000);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tsetEditFunction()\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tself.setState(prevState => ({\r\n\t\t\t\t\t\tcomment : _edited_comment\r\n\t\t\t\t\t}), () => {\r\n\t\t\t\t\t\tself.handleSubmit()\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\t\ttype: 'Comment downvoted',\r\n\t\t\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' downvoted a comment \\''+in_comment._id+'\\' to article \\''+title+'\\'',\r\n\t\t\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => console.log('There was an error:' + err));\r\n\t\t} else {\r\n\t\t\tfunction setEditFunction() {\r\n\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t_edited_comment = comment;\r\n\t\t\t\t\t\t_edited_comment = _.map(_edited_comment, (_c) => {\r\n\t\t\t\t\t\t\tif(_c._id === in_comment._id) {\r\n\t\t\t\t\t\t\t\t_c.downvotes = _.takeWhile(_c.downvotes, function(d) { return d.downvoter != f.toString(); });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn _c;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ttrue ? resolve('Success') : reject('Error');\r\n\t\t\t\t\t}, 2000);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tsetEditFunction()\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tself.setState(prevState => ({\r\n\t\t\t\t\t\tcomment : _edited_comment\r\n\t\t\t\t\t}), () => {\r\n\t\t\t\t\t\tself.handleSubmit()\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\t\t\t\ttype: 'Comment negative downvoted',\r\n\t\t\t\t\t\t\t\tdescription: '\\''+f.toString()+'\\' negative downvoted a comment \\''+in_comment._id+'\\' to article \\''+title+'\\'',\r\n\t\t\t\t\t\t\t\tauthor: f.toString()\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => console.log('There was an error:' + err));\r\n\t\t}\r\n\t}\r\n\thandleReply(_id) {\r\n        this.setState({\r\n            _comment_parent_id: _id\r\n        }, () => {\r\n            $('textarea._comment_body').focus();\r\n        });\r\n\t}\r\n\thandleEditComment(in_comment) {\r\n\t\tthis.setState({\r\n            _comment_id_ifEditing: in_comment._id,\r\n\t\t\t_comment_parent_id: in_comment.parent_id,\r\n\t\t\t_comment_author: in_comment.author,\r\n\t\t\t_comment_body: in_comment.body,\r\n\t\t\t_comment_fingerprint: in_comment.fingerprint,\r\n\t\t\t_comment_upvotes: in_comment.upvotes,\r\n\t\t\t_comment_downvotes: in_comment.downvotes,\r\n        }, () => {\r\n            $('textarea._comment_body').focus();\r\n        });\r\n\t}\r\n\thandleDeleteComment(_in_id) {\r\n\t\tconst self = this;\r\n\t\tconst { fingerprint, title, comment } = this.state;\r\n\t\tconst { onSubmitNotification } = this.props;\r\n\r\n\t\tself.setState(state => ({\r\n\t\t\tcomment: _.takeWhile(comment, (_c) => { return _c._id != _in_id }),\r\n\t\t}), () => {\r\n\t\t\tself.handleSubmit()\r\n\t\t\t.then(() => {\r\n\t\t\t\treturn axios.post('/api/notifications', {\r\n\t\t\t\t\ttype: 'Comment deleted',\r\n\t\t\t\t\tdescription: '\\''+fingerprint+'\\' deleted a comment \\''+_in_id+'\\' to article \\''+title+'\\'',\r\n\t\t\t\t\tauthor: fingerprint\r\n\t\t\t\t})\r\n\t\t\t\t.then((res_n) => onSubmitNotification(res_n.data))\r\n\t\t\t\t.catch(error => {\r\n\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n    handleChangeField(key, event) {\r\n        this.setState({\r\n            [key]: event.target.value,\r\n        });\r\n    }\r\n\t\r\n\thandleJSONTOHTML(inputDelta) {\r\n\t\tfunction runAfterElementExists(jquery_selector, callback){\r\n\t\t\tvar checker = window.setInterval(function() {\r\n\t\t\tif (jquery_selector) {\r\n\t\t\t\tclearInterval(checker);\r\n\t\t\t\tcallback();\r\n\t\t\t}}, 200);\r\n\t\t}\r\n\t\trunAfterElementExists(inputDelta, function() {\r\n\t\t\tconst html = $.parseHTML(inputDelta);\r\n\t\t\t$('h6.body_article').html(html);\r\n\t\t});\r\n\t}\r\n\t_FormatNumberLength(num, length) {\r\n\t\tvar r = \"\" + num;\r\n\t\twhile (r.length < length) {\r\n\t\t\tr = \"0\" + r;\r\n\t\t}\r\n\t\treturn r;\r\n\t}\r\n\t_handleMouseMove() {\r\n        $('.first_section_post').mousemove(function(e){\r\n            var width = $(this).width() / 2;\r\n            var height = $(this).height() / 2;\r\n            var amountMovedX = ((width - e.pageX) * 1 / 16);\r\n            var amountMovedY = ((height - e.pageY) * 1 / 16);\r\n            \r\n            $('.first_section_post .shadow_letter').css('right', amountMovedX);\r\n            $('.first_section_post .shadow_letter').css('top', amountMovedY);\r\n        });\r\n\t}\r\n    _handleScroll(){\r\n        $(window).scroll(function() {\r\n            if ($(document).height() - $(window).height() - $(window).scrollTop() === 0){\r\n                $('.fixedHeaderContainer').addClass('blog_header');\r\n            }\r\n            else{\r\n                $('.fixedHeaderContainer').removeClass('blog_header');\r\n            }\r\n        });\r\n\t}\r\n\t\r\n    render() {\r\n\t\tconst { articles } = this.props;\r\n        const { _user, _id, title, body, author, comment, _comment_author, _comment_body, _comment_fingerprint, upvotes, downvotes, view, createdAt, fingerprint } = this.state;\r\n\t\tconst shareUrl = window.location.href;\r\n\t\t\r\n\t\treturn (\r\n            <FullPage scrollMode={'normal'}>\r\n\t\t\t\t<Slide>\r\n\t\t\t\t\t<section id='articles_post' className=\"active first_section_post\">\r\n\t\t\t\t\t\t<div className=\"modal fade\" id=\"exampleModal_comment\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModal_commentLabel\" aria-hidden=\"true\">\r\n\t\t\t\t\t\t\t<div className=\"modal-dialog\" role=\"document\">\r\n\t\t\t\t\t\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"modal-body\">\r\n\t\t\t\t\t\t\t\t\t\t<a href=\"# \" title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n\t\t\t\t\t\t\t\t\t\t<div><span role=\"img\" aria-label=\"sheep\">👉</span> Please provide your name and the content of ur msg.</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"modal fade\" id=\"shareModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"shareModalLabel\" aria-hidden=\"true\">\r\n\t\t\t\t\t\t\t<div className=\"modal-dialog\" role=\"document\">\r\n\t\t\t\t\t\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"modal-body\">\r\n\t\t\t\t\t\t\t\t\t\t<a href=\"# \" title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<FacebookShareButton\r\n\t\t\t\t\t\t\t\t\t\t\t\turl={shareUrl}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"Demo__some-network__share-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FacebookIcon size={32} round />\r\n\t\t\t\t\t\t\t\t\t\t\t</FacebookShareButton>\r\n\t\t\t\t\t\t\t\t\t\t\t<FacebookMessengerShareButton\r\n\t\t\t\t\t\t\t\t\t\t\t\turl={shareUrl}\r\n\t\t\t\t\t\t\t\t\t\t\t\tappId=\"521270401588372\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"Demo__some-network__share-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FacebookMessengerIcon size={32} round />\r\n\t\t\t\t\t\t\t\t\t\t\t</FacebookMessengerShareButton>\r\n\t\t\t\t\t\t\t\t\t\t\t<TwitterShareButton\r\n\t\t\t\t\t\t\t\t\t\t\t\turl={shareUrl}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"Demo__some-network__share-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TwitterIcon size={32} round />\r\n\t\t\t\t\t\t\t\t\t\t\t</TwitterShareButton>\r\n\t\t\t\t\t\t\t\t\t\t\t<WhatsappShareButton\r\n\t\t\t\t\t\t\t\t\t\t\t\turl={shareUrl}\r\n\t\t\t\t\t\t\t\t\t\t\t\tseparator=\":: \"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"Demo__some-network__share-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<WhatsappIcon size={32} round />\r\n\t\t\t\t\t\t\t\t\t\t\t</WhatsappShareButton>\r\n\t\t\t\t\t\t\t\t\t\t\t<LinkedinShareButton url={shareUrl} className=\"Demo__some-network__share-button\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<LinkedinIcon size={32} round />\r\n\t\t\t\t\t\t\t\t\t\t\t</LinkedinShareButton>\r\n\t\t\t\t\t\t\t\t\t\t\t<PinterestShareButton\r\n\t\t\t\t\t\t\t\t\t\t\t\turl={String(window.location)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"Demo__some-network__share-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<PinterestIcon size={32} round />\r\n\t\t\t\t\t\t\t\t\t\t\t</PinterestShareButton>\r\n\t\t\t\t\t\t\t\t\t\t\t<EmailShareButton\r\n\t\t\t\t\t\t\t\t\t\t\t\turl={shareUrl}\r\n\t\t\t\t\t\t\t\t\t\t\t\tbody=\"body\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"Demo__some-network__share-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<EmailIcon size={32} round />\r\n\t\t\t\t\t\t\t\t\t\t\t</EmailShareButton>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"wrapper_full\">\r\n\t\t\t\t\t\t\t<nav aria-label=\"breadcrumb\">\r\n\t\t\t\t\t\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t\t\t\t\t\t<li className=\"breadcrumb-item\"><a href=\"/\">home</a></li>\r\n\t\t\t\t\t\t\t\t\t<li className=\"breadcrumb-item\"><a href=\"/blog\">blog</a></li>\r\n\t\t\t\t\t\t\t\t\t<li className=\"breadcrumb-item active\" aria-current=\"page\">{title}</li>\r\n\t\t\t\t\t\t\t\t</ol>\r\n\t\t\t\t\t\t\t</nav>\r\n\t\t\t\t\t\t\t<div className=\"shadow_title\">{_.head(_.words(title))}.</div>\r\n\t\t\t\t\t\t\t<div className=\"shadow_letter\">{this._FormatNumberLength(_.indexOf(_.orderBy(articles, ['createdAt'], ['desc']), _.find(articles, {'_id': _id})), 2)}.</div>\r\n\t\t\t\t\t\t\t<div id=\"box\">\r\n\t\t\t\t\t\t\t\t<h1>{title}</h1>\r\n\t\t\t\t\t\t\t\t<p className=\"text-muted author\">by <b>{author}</b>, {moment(new Date(createdAt)).fromNow()}</p>\r\n\t\t\t\t\t\t\t\t<h6 className=\"text-muted body body_article\">\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tthis.handleJSONTOHTML(body)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</h6>\r\n\t\t\t\t\t\t\t\t<div className=\"comments_up_down\">\r\n\t\t\t\t\t\t\t\t\t<p className=\"text-muted views\"><b>{_.size(view)}</b><i className=\"fas fa-eye\"></i></p>\r\n\t\t\t\t\t\t\t\t\t<p className=\"text-muted comments\"><b>{_.size(comment)}</b> <a href=\"#comments-modal\"><i className=\"fas fa-comment-alt\"></i></a> </p>\r\n\t\t\t\t\t\t\t\t\t<div className={`text-muted upvotes ${_.isUndefined( _.find(upvotes, (upvote) => {return upvote.upvoter === fingerprint}) ) ? '' : 'active'}`}><b>{_.size(upvotes)}</b> <button onClick={(event) => this.handleSubmitUpvotes(event)}><i className=\"fas fa-thumbs-up\"></i></button> </div>\r\n\t\t\t\t\t\t\t\t\t<div className={`text-muted downvotes ${_.isUndefined( _.find(downvotes, (downvote) => {return downvote.downvoter === fingerprint}) ) ? '' : 'active'}`}><b>{_.size(downvotes)}</b> <button onClick={(event) => this.handleSubmitDownvotes(event)}><i className=\"fas fa-thumbs-down\"></i></button> </div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"text-muted share\"> <button data-toggle=\"modal\" data-target=\"#shareModal\"><i className=\"fas fa-share\"></i></button> </div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"beforeorafter\">\r\n\t\t\t\t\t\t\t\t<a href={_.get(_.orderBy(articles, ['view'], ['desc'])[_.indexOf(_.orderBy(articles, ['view'], ['desc']), _.find(articles, {'_id': _id}))-1], '_id', _.get(_.last(_.orderBy(articles, ['view'], ['desc'])), '_id'))} className=\"before_article\">\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t_.get(_.orderBy(articles, ['view'], ['desc'])[_.indexOf(_.orderBy(articles, ['view'], ['desc']), _.find(articles, {'_id': _id}))-1], 'title', _.get(_.last(_.orderBy(articles, ['view'], ['desc'])), 'title'))\r\n\t\t\t\t\t\t\t\t\t}.\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t<a href={_.get(_.orderBy(articles, ['view'], ['desc'])[_.indexOf(_.orderBy(articles, ['view'], ['desc']), _.find(articles, {'_id': _id}))+1], '_id', _.get(_.last(_.orderBy(articles, ['view'], ['desc'])), '_id'))} className=\"after_article\">\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t_.get(_.orderBy(articles, ['view'], ['desc'])[_.indexOf(_.orderBy(articles, ['view'], ['desc']), _.find(articles, {'_id': _id}))+1], 'title', _.get(_.head(_.orderBy(articles, ['view'], ['desc'])), 'title'))\r\n\t\t\t\t\t\t\t\t\t}.\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</section>\r\n\t\t\t\t</Slide>\r\n\t\t\t\t<Slide>\r\n\t\t\t\t\t<section id='comments_post' className=\"second_section_post\">\r\n\t\t\t\t\t\t<div className=\"wrapper_full\">\r\n\t\t\t\t\t\t\t<div className=\"comment-modal\">\r\n\t\t\t\t\t\t\t\t<div className=\"modal-inner\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-field col s12\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(ev) => this.handleChangeField('_comment_body', ev)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={_comment_body}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"validate form-group-input materialize-textarea _comment_body\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"_comment_body\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"_comment_body\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired=\"required\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='_comment_body' className={_comment_body ? 'active' : ''}>Leave a comment.</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group-line textarea_line\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(ev) => this.handleChangeField('_comment_author', ev)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={_comment_author}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"validate form-group-input _comment_author\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"_comment_author\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"_comment_author\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired=\"required\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='_comment_author' className={_comment_author ? 'active' : ''}>your name</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group-line\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={(event) => this.handleSubmitComments(event)} className=\"btn btn-primary pull-right\" type=\"submit\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span data-attr-span=\"Leave a Comment.\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLeave a Comment.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div id=\"comments-modal\" className=\"comments-modal\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"modal-inner\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_.orderBy(_.filter(comment, { parent_id: null }), ['upvotes'], ['desc']).map((_c, _i) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div key={_i} className={\"card card_\" + _i} data-index={_i+1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"shadow_title\">{_.head(_.words(_c.body))}</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"top_row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h6 className=\"author\">by <b>{_c.author}</b></h6>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-muted fromNow\">{moment(new Date(_c._createdAt)).fromNow()}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"up_down\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className={`text-muted upvotes ${_.isUndefined( _.find(_c.upvotes, (_up) => {return _up.upvoter === _comment_fingerprint}) ) ? '' : 'active'}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<b>{_.size(_c.upvotes)}</b> \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={(event) => this.handleSubmitupvotesComment(_c, event)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-thumbs-up\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className={`text-muted downvotes ${_.isUndefined( _.find(_c.downvotes, (_do) => {return _do.downvoter === _comment_fingerprint}) ) ? '' : 'active'}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<b>{_.size(_.get(_c, 'downvotes'))}</b>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={(ev) => this.handleSubmitdownvotesComment(_c, ev)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-thumbs-down\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"middle_row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>{_c.body}</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"bottom_row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"crud\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-ellipsis-v dropdown-toggle\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuButton\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={() => this.handleReply(_c._id)} className=\"dropdown-item\" type=\"button\">Reply</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_c.fingerprint === _comment_fingerprint || _.includes(_user.roles, 'admin')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? <>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={() => this.handleEditComment(_c)} className=\"dropdown-item\">Edit</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"dropdown-divider\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={() => this.handleDeleteComment(_c._id)} className=\"dropdown-item\">Delete</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_.orderBy(_.reject(comment, { parent_id: null }), ['upvotes'], ['desc']).map((_c_reply, _i_reply) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(_c_reply.parent_id === _c._id)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div key={_i_reply+'_'+_i} className={\"card card_\" + _i_reply} data-index={_i_reply+1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"shadow_title\">{_.head(_.words(_c_reply.body))}</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"top_row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h6 className=\"author\">by <b>{_c_reply.author}</b></h6>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-muted fromNow\">{moment(new Date(_c_reply.createdAt)).fromNow()}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"up_down\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className={`text-muted upvotes ${_.isUndefined( _.find(_c_reply.upvotes, (_up_reply) => {return _up_reply.upvoter === _comment_fingerprint}) ) ? '' : 'active'}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<b>{_.size(_c_reply.upvotes)}</b> \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={(ev) => this.handleSubmitupvotesComment(_c_reply, ev)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-thumbs-up\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className={`text-muted downvotes ${_.isUndefined( _.find(_c_reply.downvotes, (_do_reply) => {return _do_reply.downvoter === _comment_fingerprint}) ) ? '' : 'active'}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<b>{_.size(_c_reply.downvotes)}</b>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={(ev) => this.handleSubmitdownvotesComment(_c_reply, ev)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-thumbs-down\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"middle_row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>{_c_reply.body}</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_c_reply.fingerprint === _comment_fingerprint || _.includes(_user.roles, 'admin')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"bottom_row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"crud\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-ellipsis-v dropdown-toggle\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuButton\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={() => this.handleEditComment(_c_reply)} className=\"dropdown-item\">Edit</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"dropdown-divider\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={() => this.handleDeleteComment(_c_reply._id)} className=\"dropdown-item\">Delete</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</section>\r\n\t\t\t\t</Slide>\r\n\t\t\t\t<Slide>\r\n\t\t\t\t\t<Footer/>\r\n\t\t\t\t</Slide>\r\n            </FullPage>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tarticles: state.home.articles,\r\n\tarticleToEdit: state.home.articleToEdit,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\tonSubmit: data => dispatch({ type: 'SUBMIT_ARTICLE', data }),\r\n\tonLoad: data => dispatch({ type: 'HOME_PAGE_LOADED', data }),\r\n\tonDelete: id => dispatch({ type: 'DELETE_ARTICLE', id }),\r\n\tonEdit: data => dispatch({ type: 'EDIT_ARTICLE', data }),\r\n\tsetEdit: article => dispatch({ type: 'SET_EDIT', article }),\r\n\r\n    onSubmitNotification: data => dispatch({ type: 'SUBMIT_NOTIFICATION', data }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\ContactMe\\ContactMe.js",["143","144"],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Home\\Home.js",["145","146","147","148","149","150","151","152","153"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport Footer from '../Footer/Footer';\r\nimport { connect } from 'react-redux';\r\nimport { FullPage, Slide } from 'react-full-page';\r\nimport { Link } from 'react-router-dom';\r\nimport 'whatwg-fetch';\r\nimport * as $ from \"jquery\";\r\nimport jQuery from 'jquery';\r\nimport 'bootstrap';\r\n\r\nvar _ = require('lodash');\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this._handleSlider = this._handleSlider.bind(this);\r\n        this._handleMouseMove = this._handleMouseMove.bind(this);\r\n\t\tthis.handleJSONTOHTML = this.handleJSONTOHTML.bind(this);\r\n        this._handleScroll = this._handleScroll.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    componentWillMount() {\r\n        const { onLoad, onLoadProject } = this.props;\r\n        const self = this;\r\n        axios('/api/articles')\r\n        .then(function (response) {\r\n            onLoad(response.data);\r\n            function runAfterElementExists(jquery_selector, callback){\r\n                var checker = window.setInterval(function() {\r\n                if ($(jquery_selector).length) {\r\n                    clearInterval(checker);\r\n                    callback();\r\n                }}, 200);\r\n            }\r\n            runAfterElementExists(\".first_section .card_\"+(_.size(_.filter(response.data.articles, { '_hide': false }))), function() {\r\n                self._handleSlider('slider');\r\n            });\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n\r\n        axios('/api/projects')\r\n        .then(function (response) {\r\n            onLoadProject(response.data);\r\n            function runAfterElementExists(jquery_selector, callback){\r\n                var checker = window.setInterval(function() {\r\n                if ($(jquery_selector).length) {\r\n                    clearInterval(checker);\r\n                    callback();\r\n                }}, 200);\r\n            }\r\n            runAfterElementExists(\".second_section .card_\"+(_.size(_.filter(response.data.projects, { '_hide': false }))), function() {\r\n                self._handleSlider('slider_projects');\r\n            });\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        this._handleScroll();\r\n        this._handleMouseMove();\r\n        $('.fixedHeaderContainer').removeClass('blog_header');\r\n\r\n        setTimeout(function() {\r\n            $('svg.word').each(function() {\r\n                var svg = $(this);\r\n                var text = svg.find('text');\r\n                var bbox = text.get(0).getBBox(); \r\n\r\n                svg.get(0).setAttribute('viewBox', \r\n                                        [bbox.x,\r\n                                        bbox.y,\r\n                                        bbox.width,\r\n                                        bbox.height].join(' '));\r\n            });\r\n        }, 100);\r\n    }\r\n    _handleSlider(source) {\r\n        function FormatNumberLength(num, length) {\r\n            var r = \"\" + num;\r\n            while (r.length < length) {\r\n                r = \"0\" + r;\r\n            }\r\n            return r;\r\n        }\r\n        (function($) {\r\n            $.fn.jooSlider = function(options) {\r\n                var opt = {\r\n                    auto: true,\r\n                    speed: 2000\r\n                };\r\n                if (options) {\r\n                    $.extend(opt, options);\r\n                }\r\n                var container = $(this);\r\n                var Slider = function() {\r\n                    //===========\r\n                    // Variables\r\n                    //===========\r\n                    var block = false; // Empêcher le clique multiple\r\n                    var height = container.find('.card').height(); // Hauteur des images\r\n                    container.find('.card').wrap('<div class=\"img-wrap\"></div>');\r\n                    this.imgs = container.find('.img-wrap');\r\n                    this.imgCount = (this.imgs.length) - 1;\r\n                    /* Caption */\r\n                    this.imgs.each(function(){\r\n                        var caption = $(this).find('.card').data('index');\r\n                        caption = FormatNumberLength(JSON.parse(caption), 2);\r\n                        $(this).append('<p class=\"index_card\">'+caption+'.</p>');\r\n                        if(source === 'slider_projects')\r\n                            $(this).append('<p class=\"index_card_shadow\">'+caption+'</p>');\r\n                    });\r\n                    /* Controls */\r\n                    container.append('<div id=\"controls\"><a id=\"prev\">prev.</a><a id=\"curr\">curr.</a><a id=\"next\">next.</a></div>');\r\n                    this.navNext = container.find('#next');\r\n                    this.navPrev = container.find('#prev');\r\n                    /* Navigation */\r\n                    container.after('<ol class=\"nav carousel-indicators'+container.attr('id')+'\"></ol>');\r\n                    var nav = $(\".nav.carousel-indicators\"+container.attr('id'));\r\n                    this.imgs.each(function(){\r\n                        nav.append('<li></li>');\r\n                    });\r\n                    this.bullets = nav.find(\"li\");\r\n                    \r\n                    //==========\r\n                    // Méthodes\r\n                    //==========\r\n                    /*\r\n                     *   Méthode qui retourne l'index de la div.current\r\n                     */\r\n                    this.getCurrentIndex = function() {\r\n                        return this.imgs.filter('.current').index();\r\n                    };\r\n                    /*\r\n                     *   Méthode qui anime le slide de haut en bas ou de bas en haut\r\n                     */\r\n                    this.goNext = function(index) {\r\n                        /* Images */\r\n                        this.imgs.filter(\".current\").stop().animate({ // Monte l'image current\r\n                            \"top\": -height + \"px\"\r\n                        }, function() {\r\n                            $(this).hide();\r\n                        });\r\n                        this.imgs.removeClass(\"current\"); // Supprime classe current\r\n                        container.find('#curr').text(this.imgs.eq(index).find('.shadow_title').text());\r\n\r\n                        //if the index one is the last one, u need to go to the first one again, sinn just +1\r\n                        if(this.imgs.last().index() != index)\r\n                            container.find('#next').text(this.imgs.eq(index+1).find('.shadow_title').text());\r\n                        else\r\n                            container.find('#next').text(this.imgs.first().find('.shadow_title').text());\r\n\r\n                        //if the index one is the first one, u need to go to the last one again, sinn just -1\r\n                        if(index != 0) \r\n                            container.find('#prev').text(this.imgs.eq(index-1).find('.shadow_title').text());\r\n                        else\r\n                            container.find('#prev').text(this.imgs.last().find('.shadow_title').text());\r\n\r\n                        this.imgs.eq(index).css({ // Monte la suivante et attribut la classe current\r\n                            \"top\": height + \"px\"\r\n                        }).show().stop().animate({\r\n                            \"top\": \"0px\"\r\n                        }, function() {\r\n                            block = false;\r\n                        }).addClass(\"current\");\r\n                        /* Bullets */\r\n                        this.bullets.removeClass(\"current\").eq(index).addClass(\"current\");\r\n                    }; //////////////////////// END GO NEXT\r\n                    this.goPrev = function(index) {\r\n                        /* Images */\r\n                        this.imgs.filter(\".current\").stop().animate({\r\n                            \"top\": height + \"px\"\r\n                        }, function() {\r\n                            $(this).hide();\r\n                            block = false;\r\n                        });\r\n                        this.imgs.removeClass(\"current\");\r\n                        container.find('#curr').text(this.imgs.eq(index).find('.shadow_title').text());\r\n\r\n                        //if the index one is the last one, u need to go to the first one again, sinn just +1\r\n                        if(this.imgs.last().index() != index)\r\n                            container.find('#next').text(this.imgs.eq(index+1).find('.shadow_title').text());\r\n                        else\r\n                            container.find('#next').text(this.imgs.first().find('.shadow_title').text());\r\n\r\n                        //if the index one is the first one, u need to go to the last one again, sinn just -1\r\n                        if(index != 0) \r\n                            container.find('#prev').text(this.imgs.eq(index-1).find('.shadow_title').text());\r\n                        else\r\n                            container.find('#prev').text(this.imgs.last().find('.shadow_title').text());\r\n                        this.imgs.eq(index).css({\r\n                            \"top\": -height + \"px\"\r\n                        }).show().stop().animate({\r\n                            \"top\": \"0px\"\r\n                        }, function() {\r\n                        }).addClass(\"current\");\r\n                        /* Bullets */\r\n                        this.bullets.removeClass(\"current\").eq(index).addClass(\"current\");\r\n                    }; //////////////////////// END GO PREV\r\n                    this.next = function() {\r\n                        var index = this.getCurrentIndex();\r\n                        if (index < this.imgCount) {\r\n                            if (block != true) {\r\n                                this.goNext(index + 1); // Go next\r\n                            }\r\n                        } else {\r\n                            if (block != true) {\r\n                                this.goNext(0); // If last go first \r\n                            }\r\n                        }\r\n                        block = true;\r\n                    }; //////////////////////// END NEXT\r\n                    this.prev = function() {\r\n                        var index = this.getCurrentIndex();\r\n                        if (index > 0) {\r\n                            if (block != true) {\r\n                                this.goPrev(index - 1); // Go previous \r\n                            }\r\n                        } else {\r\n                            if (block != true) {\r\n                                this.goPrev(this.imgCount); // If first go last     \r\n                            }\r\n                        }\r\n                        block = true;\r\n                    }; //////////////////////// END PREV\r\n                    /*\r\n                     *   Méthode qui initialise l'objet\r\n                     */\r\n                    this.init = function() {\r\n                        this.imgs.hide().first().addClass('current').show();\r\n                        container.find('#curr').text(this.imgs.first().find('.shadow_title').text());\r\n                        container.find('#next').text(this.imgs.first().next().find('.shadow_title').text());\r\n                        container.find('#prev').text(this.imgs.last().find('.shadow_title').text());\r\n                        this.bullets.first().addClass(\"current\");\r\n                    };\r\n                }; // End Slider Object\r\n                var slider = new Slider();\r\n                slider.init();\r\n                //==========\r\n                //  EVENTS\r\n                //==========\r\n                /* Click */\r\n                slider.navNext.click(function(e) { // Click next button\r\n                    e.preventDefault();\r\n                    clearInterval(interval);\r\n                    interval = setInterval(timer, opt.speed);\r\n                    slider.next();\r\n                });\r\n                slider.navPrev.click(function(e) { // Click previous button\r\n                    e.preventDefault();\r\n                    slider.prev();\r\n                    clearInterval(interval);\r\n                    interval = setInterval(timer, opt.speed);\r\n                });\r\n                slider.bullets.click(function(e) { // Click numbered bullet\r\n                    e.preventDefault();\r\n                    var imgIndex = slider.getCurrentIndex();\r\n                    var bulletIndex = $(this).index();\r\n                    if (imgIndex < bulletIndex) {\r\n                        slider.goNext(bulletIndex);\r\n                    } else {\r\n                        slider.goPrev(bulletIndex);\r\n                    }\r\n                    clearInterval(interval);\r\n                    interval = setInterval(timer, opt.speed);\r\n                });\r\n                /* Interval */\r\n                var interval = setInterval(timer, opt.speed);\r\n                if (opt.auto === true) {\r\n                    var timer = function() {\r\n                        slider.next();\r\n                    };\r\n                }\r\n                container.hover(function() {\r\n                    clearInterval(interval);\r\n                }, function() {\r\n                    clearInterval(interval);\r\n                    interval = setInterval(timer, opt.speed);\r\n                });\r\n                return this;\r\n            };\r\n        })(jQuery);\r\n        $(\"#\"+source).jooSlider({\r\n            auto: false,\r\n            speed: 4000\r\n        });\r\n    }\r\n    _handleMouseMove() {\r\n        $('.first_section').mousemove(function(e) {\r\n            var width = $(this).width() / 2;\r\n            var height = $(this).height() / 2;\r\n            var amountMovedX = ((width - e.pageX) * -1 / 12);\r\n            var amountMovedY = ((height - e.pageY) * -1 / 12);\r\n        \r\n            $('.luna').css('marginLeft', amountMovedX);\r\n            $('.luna').css('marginTop', amountMovedY);\r\n        });\r\n        $('.second_section').mousemove(function(e) {\r\n            var width = $(this).width() / 2;\r\n            var height = $(this).height() / 2;\r\n            var amountMovedX = ((width - e.pageX) * -1 / 12);\r\n            var amountMovedY = ((height - e.pageY) * -1 / 12);\r\n        \r\n            $('.second_section .display-1').css('marginLeft', amountMovedX);\r\n            $('.second_section .display-1').css('marginTop', amountMovedY);\r\n        });\r\n        $('.third_section').mousemove(function(e) {\r\n            var width = $(this).width() / 2;\r\n            var height = $(this).height() / 2;\r\n            var amountMovedX = ((width - e.pageX) * -1 / 12);\r\n            var amountMovedY = ((height - e.pageY) * -1 / 12);\r\n        \r\n            $('.third_section .display-1').css('marginLeft', amountMovedX);\r\n            $('.third_section .display-1').css('marginTop', amountMovedY);\r\n        });\r\n    }\r\n    handleJSONTOHTML(inputDelta) {\r\n\t\tfunction runAfterElementExists(jquery_selector, callback){\r\n\t\t\tvar checker = window.setInterval(function() {\r\n\t\t\tif (jquery_selector) {\r\n\t\t\t\tclearInterval(checker);\r\n\t\t\t\tcallback();\r\n\t\t\t}}, 200);\r\n\t\t}\r\n\t\trunAfterElementExists(inputDelta, function() {\r\n            const html = $.parseHTML(inputDelta);\r\n            $('.second_section .image').html(html);\r\n            $('.second_section .image').append(\"<div class='border_effect'></div>\")\r\n\t\t});\r\n\t}\r\n    _handleScroll(){\r\n        $(window).scroll(function() {\r\n            if ($(document).height() - $(window).height() - $(window).scrollTop() < 100) {\r\n                $('.fixedHeaderContainer').addClass('blog_header');\r\n            }\r\n            else {\r\n                $('.fixedHeaderContainer').removeClass('blog_header');\r\n            }\r\n        });\r\n    }\r\n    handleClick(href) {\r\n        $('html,body').animate({scrollTop: $('#'+href).offset().top}, 200, function() {\r\n            $('#mail_content').focus();\r\n        });\r\n    }\r\n    render() {\r\n        const { articles, projects } = this.props;\r\n        return (\r\n            <FullPage scrollMode={'normal'}>\r\n                <Slide>\r\n                    <section className=\"second_section\">\r\n                        <div className=\"Hello\">\r\n                            <svg className=\"word w1\">\r\n                                <text>مرحبا</text>\r\n                            </svg>\r\n                            <svg className=\"word w2\">\r\n                                <text>Welcome</text>\r\n                            </svg>\r\n                            <svg className=\"word w3\">\r\n                                <text>Bienvenue</text>\r\n                            </svg>\r\n                            <svg className=\"word w4\">\r\n                                <text>Chào mừng</text>\r\n                            </svg>\r\n                            <svg className=\"word w5\">\r\n                                <text>Bienvenido</text>\r\n                            </svg>\r\n                        </div>\r\n                        <div id=\"social_media\">\r\n                            <div className=\"icons_gatherer\">\r\n                                <a href=\"https://dribbble.com/boutaleblcoder\" className=\"icon-button dribbble\"><i className=\"fab fa-dribbble\"></i><span></span></a>\r\n                                <a href=\"https://www.behance.net/boutaleblcoder/\" className=\"icon-button behance\"><i className=\"fab fa-behance\"></i><span></span></a>\r\n                                <a href=\"https://www.linkedin.com/in/zakariae-bou-taleb-657953122/\" className=\"icon-button linkedin\"><i className=\"fab fa-linkedin-in\"></i><span></span></a>\r\n                                <a href=\"https://www.instagram.com/boutaleblcoder/\" className=\"icon-button instagram\"><i className=\"fab fa-instagram\"></i><span></span></a>\r\n                                <a href=\"https://fb.me/boutaleblcoder\" className=\"icon-button facebook\"><i className=\"icon-facebook\"></i><span></span></a>\r\n                                <a href=\"# \" className=\"icon-button scroll\">\r\n                                    \r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"wrapper left_part\">\r\n                            <div className=\"pulsing_dots\">\r\n                                <div className=\"p1\"></div>\r\n                                <div className=\"p2\"></div>\r\n                                <div className=\"p3\"></div>\r\n                            </div>\r\n                            <div className=\"some_text\">\r\n                                <div className=\"name\">\r\n                                    <p>ZAKARIAE</p><p>BOUTALEB</p>\r\n                                </div>\r\n                                <div>\r\n                                    <p>Full-Stack Developer & a Graphic Designer.</p>\r\n                                    <p>Based in <b className='web'>Morocco.</b></p>\r\n                                </div>\r\n                                <p className=\"text\">So no one told you life was gonna be this way. When it hasn't been your day, your week, your month...</p>\r\n                                <button id=\"reach_out_button\" onClick={() => this.handleClick('footer_to')} type=\"button\">\r\n                                    <span>\r\n                                        <span>\r\n                                            <span data-attr-span=\"Reach Out.\">\r\n                                                Reach Out.\r\n                                            </span>\r\n                                        </span>\r\n                                    </span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"wrapper right_part\">\r\n                            <div id=\"slider_projects\">\r\n                                <div className=\"some_text\">\r\n                                    <p>Some of My Projects.</p>\r\n                                </div>\r\n                                {\r\n                                    (_.orderBy(_.filter(projects, (_p) => { return !_p._hide }), ['view'], ['desc']).slice(0, 10)).map((project, index) => {\r\n                                        return (\r\n                                            <div className={\"card card_\" + (index+1)} data-title={project.title} data-index={index+1}>\r\n                                                <div className=\"card-body\">\r\n                                                    <a href={project.link_to} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                        <div className='image'>\r\n                                                            { this.handleJSONTOHTML(project.image) }\r\n                                                        </div>\r\n                                                    </a>\r\n                                                    <p className=\"text-muted author\">by <b>{project.author}</b>, {moment(new Date(project.createdAt)).fromNow()}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                <div className=\"bg-pattern\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </Slide>\r\n                <Slide>\r\n                    <section className=\"first_section\">\r\n                        <div className=\"wrapper left_part\">\r\n                            \r\n                        </div>\r\n                        <div className=\"wrapper right_part\">\r\n                            <div className=\"luna\"></div>\r\n                            <div className=\"pulsing_dots\">\r\n                                <div className=\"p1\"></div>\r\n                                <div className=\"p2\"></div>\r\n                                <div className=\"p3\"></div>\r\n                            </div>\r\n                            <div id=\"slider\">\r\n                                {\r\n                                    (_.orderBy(_.filter(articles, (_a) => { return !_a._hide }), ['view'], ['desc']).slice(0, 10)).map((article, index) => {\r\n                                        return (\r\n                                            <div className={\"card card_\" + (index+1)} data-title={_.head( article.title.split(\" \") )} data-index={index+1}>\r\n                                                <div className=\"shadow_title\">{(_.head( article.title.split(/[\\s.]+/) ).length <= 2 ) ? _.head( article.title.split(/[\\s.]+/) )+\" \"+_.nth(article.title.split(/[\\s.]+/), 1) : _.head( article.title.split(/[\\s.]+/) )}.</div>\r\n                                                <div className=\"card-body\">\r\n                                                    <h2>{article.title}</h2>\r\n                                                    <Link to={`/blog/${article._id}`}>\r\n                                                        <button>\r\n                                                            <span>\r\n                                                                <span>\r\n                                                                    <span data-attr-span=\"Read More About it\">\r\n                                                                        Read More About it\r\n                                                                    </span>\r\n                                                                </span>\r\n                                                            </span>\r\n                                                        </button>\r\n                                                    </Link>\r\n                                                    <p className=\"text-muted author\"><b>{_.size(article.view)}</b> Views <i className=\"fas fa-circle dot\"></i> by <b>{article.author}</b>, {moment(new Date(article.createdAt)).fromNow()}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </Slide>\r\n                <Slide>\r\n                    <section className=\"third_section\">\r\n                        <div className=\"wrapper\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"column column_1\">\r\n                                        <div className=\"head\">\r\n                                            <i className=\"fab fa-js\"></i>\r\n                                            <span>Full-Stack Developer.</span>\r\n                                        </div>\r\n                                        <div className=\"content\">\r\n                                            <h6>Languages i'm fluent at</h6>\r\n                                            <ul className=\"text-muted tags\">\r\n                                                <li className=\"tag_item\">Socket.io</li>\r\n                                                <li className=\"tag_item\">JQuery</li>\r\n                                                <li className=\"tag_item\">Sass</li>\r\n                                                <li className=\"tag_item\">Css</li>\r\n                                                <li className=\"tag_item\">Css Grid</li>\r\n                                                <li className=\"tag_item\">HTML</li>\r\n                                                <li className=\"tag_item\">ReactJS</li>\r\n                                                <li className=\"tag_item\">JSON</li>\r\n                                                <li className=\"tag_item\">NoSQL</li>\r\n                                                <li className=\"tag_item\">JavaScript</li>\r\n                                                <li className=\"tag_item\">NPM</li>\r\n                                                <li className=\"tag_item\">Yarn</li>\r\n                                                <li className=\"tag_item\">NodeJS</li>\r\n                                                <li className=\"tag_item\">React Native</li>\r\n                                            </ul>\r\n                                            <h6>Tools i use</h6>\r\n                                            <ul className=\"text-muted tags\">\r\n                                                <li className=\"tag_item\">Bootstrap</li>\r\n                                                <li className=\"tag_item\">Css Grid</li>\r\n                                                <li className=\"tag_item\">Illustrator</li>\r\n                                                <li className=\"tag_item\">Photohsop</li>\r\n                                                <li className=\"tag_item\">Pen & Paper</li>\r\n                                                <li className=\"tag_item\">Visual Studio Code</li>\r\n                                                <li className=\"tag_item\">Git</li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"column column_2\">\r\n                                        <div className=\"head\">\r\n                                            <i className=\"fas fa-icons\"></i>\r\n                                            <span></span>\r\n                                        </div>\r\n                                        <div className=\"content\">\r\n                                            <div></div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"column column_3\">\r\n                                        <div className=\"head\">\r\n                                            <i className=\"fas fa-swatchbook\"></i>\r\n                                            <span>Graphic Designer.</span>\r\n                                        </div>\r\n                                        <div className=\"content\">\r\n                                            <h6>What I Make</h6>\r\n                                            <ul className=\"text-muted tags\">\r\n                                                <li className=\"tag_item\">Art direction</li>\r\n                                                <li className=\"tag_item\">Branding</li>\r\n                                                <li className=\"tag_item\">Branding Identity</li>\r\n                                                <li className=\"tag_item\">Illustration</li>\r\n                                                <li className=\"tag_item\">Interface Design</li>\r\n                                                <li className=\"tag_item\">Product Design</li>\r\n                                                <li className=\"tag_item\">Strategy</li>\r\n                                                <li className=\"tag_item\">Web Design</li>\r\n                                                <li className=\"tag_item\">UI</li>\r\n                                                <li className=\"tag_item\">UX</li>\r\n                                            </ul>\r\n                                            <h6>Tools I Use</h6>\r\n                                            <ul className=\"text-muted tags\">\r\n                                                <li className=\"tag_item\">Adobe Photoshop</li>\r\n                                                <li className=\"tag_item\">Adobe Illustrator</li>\r\n                                                <li className=\"tag_item\">Sketch</li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <h1 data-text=\"skills.\" className=\"display-1\">skills.</h1>\r\n                        </div>\r\n                    </section>\r\n                </Slide>\r\n                <Slide>\r\n                    <Footer/>\r\n                </Slide>\r\n            </FullPage>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    articles: state.home.articles,\r\n    projects: state.home.projects,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onLoad: data => dispatch({ type: 'HOME_PAGE_LOADED', data }),\r\n    onLoadProject: data => dispatch({ type: 'PROJECT_PAGE_LOADED', data }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\About\\About.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Confirmation\\Confirmation.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Minttea\\Minttea.js",["154","155","156","157"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport { FullPage, Slide } from 'react-full-page';\r\nimport Footer from '../Footer/Footer';\r\nimport Fingerprint from 'fingerprintjs';\r\nimport * as $ from \"jquery\";\r\nimport 'bootstrap';\r\n\r\nvar _ = require('lodash');\r\n\r\nclass Minttea extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var f = new Fingerprint().get();\r\n        this.state = {\r\n            parent_id: null,\r\n            author: '',\r\n            body: '',\r\n            is_private: false,\r\n            fingerprint: f.toString(),\r\n            upvotes: [],\r\n            downvotes: [],\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.handleSubmitupvotesTestimony = this.handleSubmitupvotesTestimony.bind(this);\r\n        this.handleSubmitdownvotesTestimony = this.handleSubmitdownvotesTestimony.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleReply = this.handleReply.bind(this);\r\n    }\r\n    componentWillMount() {\r\n        const { onLoadTestimony } = this.props;\r\n        axios('/api/testimonies')\r\n            .then((response) => {\r\n                onLoadTestimony(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n    componentDidMount() {\r\n        document.getElementsByClassName('first_section_coffee')[0].parentElement.style.height = 'initial';\r\n        document.getElementsByClassName('first_section_coffee')[0].parentElement.style.minHeight = '100%';\r\n    }\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        if (nextProps.testimonyToEdit) {\r\n            this.setState({\r\n                parent_id: nextProps.testimonyToEdit.parent_id,\r\n                body: nextProps.testimonyToEdit.body,\r\n                author: nextProps.testimonyToEdit.author,\r\n                is_private: nextProps.testimonyToEdit.is_private,\r\n                fingerprint: nextProps.testimonyToEdit.fingerprint,\r\n                upvotes: nextProps.testimonyToEdit.upvotes,\r\n                downvotes: nextProps.testimonyToEdit.downvotes,\r\n            });\r\n        }\r\n    }\r\n    handleSubmitupvotesTestimony(testimony, event) {\r\n        const { onSubmitNotification } = this.props;\r\n        var f = new Fingerprint().get();\r\n        let self = this;\r\n        let target = event.target;\r\n        if (_.isUndefined(_.find(_.get(testimony, 'upvotes'), (upvote) => { return upvote.upvoter === f.toString() }))) {\r\n            function setEditFunction() {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(function () {\r\n                        self.handleEdit(testimony);\r\n                        true ? resolve('Success') : reject('Error');\r\n                    }, 2000);\r\n                })\r\n            }\r\n            setEditFunction()\r\n                .then(() => {\r\n                    self.setState(state => ({\r\n                        upvotes: [...state.upvotes, { upvoter: f.toString() }],\r\n                    }), () => {\r\n                        if (!_.isUndefined(_.find(_.get(testimony, 'downvotes'), (downvote) => { return downvote.downvoter === f.toString() }))) {\r\n                            let _downvotes = _.takeWhile(self.state.downvotes, function (o) { return o.downvoter != f.toString(); });\r\n                            self.setState({\r\n                                downvotes: _downvotes,\r\n                            }, () => {\r\n                                self.handleSubmit()\r\n                                    .then(() => {\r\n                                        return axios.post('/api/notifications', {\r\n                                            type: 'Testimony upvoted',\r\n                                            description: '\\'' + f.toString() + '\\' upvoted \\'' + testimony._id + '\\'',\r\n                                            author: f.toString()\r\n                                        })\r\n                                            .then((res_n) => onSubmitNotification(res_n.data))\r\n                                            .catch(error => {\r\n                                                console.log(error)\r\n                                            });\r\n                                    });\r\n                            });\r\n                            $(target).closest(\"div\").parent().find('div.downvotes').removeClass('active');\r\n                        } else {\r\n                            self.handleSubmit()\r\n                                .then(() => {\r\n                                    return axios.post('/api/notifications', {\r\n                                        type: 'Testimony upvoted',\r\n                                        description: '\\'' + f.toString() + '\\' upvoted \\'' + testimony._id + '\\'',\r\n                                        author: f.toString()\r\n                                    })\r\n                                        .then((res_n) => onSubmitNotification(res_n.data))\r\n                                        .catch(error => {\r\n                                            console.log(error)\r\n                                        });\r\n                                });\r\n                        }\r\n                        $(target).closest(\"div\").addClass('active');\r\n                    });\r\n                    return true;\r\n                })\r\n                .catch(err => console.log('There was an error:' + err));\r\n        } else {\r\n            function setEditFunction() {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(function () {\r\n                        self.handleEdit(testimony);\r\n                        true ? resolve('Success') : reject('Error');\r\n                    }, 2000);\r\n                })\r\n            }\r\n            setEditFunction()\r\n                .then(() => {\r\n                    let _upvotes = _.takeWhile(self.state.upvotes, function (o) { return o.upvoter != f.toString(); });\r\n                    self.setState(state => ({\r\n                        upvotes: _upvotes,\r\n                    }), () => {\r\n                        self.handleSubmit()\r\n                            .then(() => {\r\n                                return axios.post('/api/notifications', {\r\n                                    type: 'Testimony negative upvoted',\r\n                                    description: '\\'' + f.toString() + '\\' negative upvoted \\'' + testimony._id + '\\'',\r\n                                    author: f.toString()\r\n                                })\r\n                                    .then((res_n) => onSubmitNotification(res_n.data))\r\n                                    .catch(error => {\r\n                                        console.log(error)\r\n                                    });\r\n                            });\r\n                        $(target).closest(\"div\").removeClass('active');\r\n                    });\r\n                    return true;\r\n                })\r\n                .catch(err => console.log('There was an error:' + err));\r\n        }\r\n    }\r\n    handleSubmitdownvotesTestimony(testimony, event) {\r\n        const { onSubmitNotification } = this.props;\r\n        var f = new Fingerprint().get();\r\n        let self = this;\r\n        let target = event.target;\r\n        if (_.isUndefined(_.find(_.get(testimony, 'downvotes'), (downvote) => { return downvote.downvoter === f.toString() }))) {\r\n            function setEditFunction() {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(function () {\r\n                        self.handleEdit(testimony);\r\n                        true ? resolve('Success') : reject('Error');\r\n                    }, 2000);\r\n                })\r\n            }\r\n            setEditFunction()\r\n                .then(() => {\r\n                    self.setState(state => ({\r\n                        downvotes: [...state.downvotes, { downvoter: f.toString() }],\r\n                    }), () => {\r\n                        if (!_.isUndefined(_.find(_.get(testimony, 'upvotes'), (upvote) => { return upvote.upvoter === f.toString() }))) {\r\n                            let _upvotes = _.takeWhile(self.state.upvotes, function (o) { return o.upvoter != f.toString(); });\r\n                            self.setState({\r\n                                upvotes: _upvotes,\r\n                            }, () => {\r\n                                self.handleSubmit()\r\n                                    .then(() => {\r\n                                        return axios.post('/api/notifications', {\r\n                                            type: 'Testimony downvoted',\r\n                                            description: '\\'' + f.toString() + '\\' downvoted \\'' + testimony._id + '\\'',\r\n                                            author: f.toString()\r\n                                        })\r\n                                            .then((res_n) => onSubmitNotification(res_n.data))\r\n                                            .catch(error => {\r\n                                                console.log(error)\r\n                                            });\r\n                                    });\r\n                            });\r\n                            $(target).closest(\"div\").parent().find('div.upvotes').removeClass('active');\r\n                        } else {\r\n                            self.handleSubmit()\r\n                                .then(() => {\r\n                                    return axios.post('/api/notifications', {\r\n                                        type: 'Testimony downvoted',\r\n                                        description: '\\'' + f.toString() + '\\' downvoted \\'' + testimony._id + '\\'',\r\n                                        author: f.toString()\r\n                                    })\r\n                                        .then((res_n) => onSubmitNotification(res_n.data))\r\n                                        .catch(error => {\r\n                                            console.log(error)\r\n                                        });\r\n                                })\r\n                        }\r\n                        $(target).closest(\"div\").addClass('active');\r\n                    });\r\n                    return true;\r\n                })\r\n                .catch(err => console.log('There was an error:' + err));\r\n        } else {\r\n            function setEditFunction() {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(function () {\r\n                        self.handleEdit(testimony);\r\n                        true ? resolve('Success') : reject('Error');\r\n                    }, 2000);\r\n                })\r\n            }\r\n            setEditFunction()\r\n                .then(() => {\r\n                    let _downvotes = _.takeWhile(self.state.downvotes, function (o) { return o.downvoter != f.toString(); });\r\n                    self.setState(state => ({\r\n                        downvotes: _downvotes,\r\n                    }), () => {\r\n                        self.handleSubmit()\r\n                            .then(() => {\r\n                                return axios.post('/api/notifications', {\r\n                                    type: 'Testimony negative downvoted',\r\n                                    description: '\\'' + f.toString() + '\\' negative downvoted \\'' + testimony._id + '\\'',\r\n                                    author: f.toString()\r\n                                })\r\n                                    .then((res_n) => onSubmitNotification(res_n.data))\r\n                                    .catch(error => {\r\n                                        console.log(error)\r\n                                    });\r\n                            });\r\n                        $(target).closest(\"div\").removeClass('active');\r\n                    });\r\n                    return true;\r\n                })\r\n                .catch(err => console.log('There was an error:' + err));\r\n        }\r\n    }\r\n    handleDelete(id) {\r\n        const { onDeleteTestimony, onSubmitNotification } = this.props;\r\n        const { fingerprint } = this.state;\r\n        return axios.delete(`/api/testimonies/${id}`)\r\n            .then(() => {\r\n                onDeleteTestimony(id);\r\n                return axios.post('/api/notifications', {\r\n                    type: 'Testimony Deleted',\r\n                    description: 'Testimony \\'' + id + '\\' Deleted.',\r\n                    author: fingerprint\r\n                })\r\n                    .then((res_n) => onSubmitNotification(res_n.data))\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                    });\r\n            });\r\n    }\r\n    handleEdit(testimony) {\r\n        const { setEditTestimony } = this.props;\r\n        setEditTestimony(testimony);\r\n    }\r\n    handleReply(testimony_id) {\r\n        let self = this;\r\n        self.setState({\r\n            parent_id: testimony_id\r\n        }, () => {\r\n            $('input.author').focus();\r\n        });\r\n    }\r\n    handleSubmit() {\r\n        const { onSubmitTestimony, testimonyToEdit, onEditTestimony, onSubmitNotification } = this.props;\r\n        const { parent_id, body, author, is_private, fingerprint, upvotes, downvotes } = this.state;\r\n\r\n        if (!testimonyToEdit) {\r\n            return axios.post('/api/testimonies', {\r\n                parent_id,\r\n                body,\r\n                author,\r\n                is_private,\r\n                fingerprint,\r\n                upvotes,\r\n                downvotes,\r\n            })\r\n                .then((res) => {\r\n                    onSubmitTestimony(res.data);\r\n                    if (parent_id != null) {\r\n                        return axios.post('/api/notifications', {\r\n                            type: 'Testimony Replied To',\r\n                            description: '\\'' + fingerprint + '\\' replied to \\'' + parent_id + '\\'',\r\n                            author: fingerprint\r\n                        })\r\n                            .then((res_n) => onSubmitNotification(res_n.data))\r\n                            .catch(error => {\r\n                                console.log(error)\r\n                            });\r\n                    } else {\r\n                        return axios.post('/api/notifications', {\r\n                            type: 'Testimony Created',\r\n                            description: '\\'' + fingerprint + '\\' created \\'' + res.data.testimony._id + '\\'',\r\n                            author: fingerprint\r\n                        })\r\n                            .then((res_n) => onSubmitNotification(res_n.data))\r\n                            .catch(error => {\r\n                                console.log(error)\r\n                            });\r\n                    }\r\n                })\r\n                .then(() => {\r\n                    this.setState({\r\n                        parent_id: null,\r\n                        author: '',\r\n                        body: '',\r\n                        is_private: false,\r\n                        upvotes: [],\r\n                        downvotes: [],\r\n                    })\r\n                });\r\n        } else {\r\n            return axios.patch(`/api/testimonies/${testimonyToEdit._id}`, {\r\n                parent_id,\r\n                body,\r\n                author,\r\n                is_private,\r\n                fingerprint,\r\n                upvotes,\r\n                downvotes,\r\n            })\r\n                .then((res) => {\r\n                    onEditTestimony(res.data);\r\n                })\r\n                .then(() => {\r\n                    this.setState({\r\n                        parent_id: null,\r\n                        author: '',\r\n                        body: '',\r\n                        is_private: false,\r\n                        upvotes: [],\r\n                        downvotes: [],\r\n                    })\r\n                });\r\n        }\r\n    }\r\n    handleChange(key, event) {\r\n        this.setState({\r\n            [key]: event.target.value,\r\n        });\r\n        if (key === 'is_private') {\r\n            this.setState({\r\n                [key]: event.target.checked,\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const { testimonyToEdit, testimonies } = this.props;\r\n        const { body, author, is_private, fingerprint } = this.state;\r\n        return (\r\n            <FullPage scrollMode={'normal'}>\r\n                <Slide>\r\n                    <section className=\"active first_section_coffee\">\r\n                        <div className=\"wrapper_full\">\r\n                            <div id=\"social_media\">\r\n                                <div className=\"icons_gatherer\">\r\n                                    <a href=\"https://dribbble.com/boutaleblcoder\" className=\"icon-button dribbble\"><i className=\"fab fa-dribbble\"></i><span></span></a>\r\n                                    <a href=\"https://www.behance.net/boutaleblcoder/\" className=\"icon-button behance\"><i className=\"fab fa-behance\"></i><span></span></a>\r\n                                    <a href=\"https://www.linkedin.com/in/zakariae-bou-taleb-657953122/\" className=\"icon-button linkedin\"><i className=\"fab fa-linkedin-in\"></i><span></span></a>\r\n                                    <a href=\"https://www.instagram.com/boutaleblcoder/\" className=\"icon-button instagram\"><i className=\"fab fa-instagram\"></i><span></span></a>\r\n                                    <a href=\"https://fb.me/boutaleblcoder\" className=\"icon-button facebook\"><i className=\"icon-facebook\"></i><span></span></a>\r\n                                    <a href=\"# \" className=\"icon-button scroll\">\r\n\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card card_buymecoffee\">\r\n                                <div className=\"card-body\">\r\n                                    <h3>Have a <strong>Mint Tea</strong> with me !</h3>\r\n                                    <p className=\"text-muted\">Thank you, feel free to show your support, leave a comment !</p>\r\n                                    <div className=\"mail_form\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field col s12\">\r\n                                                <input\r\n                                                    className=\"validate form-group-input author\"\r\n                                                    id=\"author\"\r\n                                                    type=\"text\"\r\n                                                    name=\"author\"\r\n                                                    required=\"required\"\r\n                                                    value={author}\r\n                                                    onChange={(ev) => this.handleChange('author', ev)}\r\n                                                />\r\n                                                <label htmlFor='author' className={author ? 'active' : ''}>username*</label>\r\n                                                <div className=\"form-group-line\"></div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field col s12\">\r\n                                                <textarea\r\n                                                    className=\"validate form-group-input materialize-textarea body\"\r\n                                                    id=\"body\"\r\n                                                    name=\"body\"\r\n                                                    required=\"required\"\r\n                                                    value={body}\r\n                                                    onChange={(ev) => this.handleChange('body', ev)}\r\n                                                />\r\n                                                <label htmlFor='body' className={body ? 'active' : ''}>Baby Don't hurt me ...</label>\r\n                                                <div className=\"form-group-line textarea_line\"></div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field col\">\r\n                                                <p>\r\n                                                    <label>\r\n                                                        <input\r\n                                                            className=\"validate form-group-input is_private\"\r\n                                                            id=\"is_private\"\r\n                                                            type=\"checkbox\"\r\n                                                            name=\"is_private\"\r\n                                                            required=\"required\"\r\n                                                            value={is_private}\r\n                                                            checked={is_private}\r\n                                                            onChange={(ev) => this.handleChange('is_private', ev)}\r\n                                                        />\r\n                                                        <span>Private Message ?</span>\r\n                                                    </label>\r\n                                                </p>\r\n                                                <button\r\n                                                    className=\"pull-right\"\r\n                                                    type=\"submit\"\r\n                                                    name='btn_login'\r\n                                                    onClick={this.handleSubmit}\r\n                                                >\r\n                                                    <span>\r\n                                                        <span>\r\n                                                            <span data-attr-span={testimonyToEdit ? 'Update.' : 'Submit.'}>\r\n                                                                {testimonyToEdit ? 'Update' : 'Submit'}.\r\n                                                            </span>\r\n                                                        </span>\r\n                                                    </span>\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card card_coffesbought\">\r\n                                <div className=\"card-body\">\r\n                                    <div id=\"testimonies-modal\" className=\"testimonies-modal\">\r\n                                        <div className=\"modal-inner\">\r\n                                            <div className=\"modal-content\">\r\n                                                {\r\n                                                    _.orderBy(_.filter(testimonies, { 'is_private': false, parent_id: null }), ['upvotes', 'createdAt'], ['desc', 'desc']).map((testimony, index) => {\r\n                                                        return (\r\n                                                            <div className={\"card card_\" + index} data-index={index + 1}>\r\n                                                                <div className=\"shadow_title\">{_.head(_.words(testimony.body))}</div>\r\n                                                                <div className=\"card-body\">\r\n                                                                    <div className=\"top_row\">\r\n                                                                        <h6 className=\"author\">by <b>{testimony.author}</b></h6>\r\n                                                                        <p className=\"text-muted fromNow\">{moment(new Date(testimony.createdAt)).fromNow()}</p>\r\n                                                                        <div className=\"up_down\">\r\n                                                                            <p className=\"text-muted replies\"><b>{_.size(_.filter(testimonies, { 'parent_id': testimony._id }))}</b><i className=\"fas fa-reply-all\"></i></p>\r\n                                                                            <div className={`text-muted upvotes ${_.isUndefined(_.find(_.get(testimony, 'upvotes'), (upvote) => { return upvote.upvoter === fingerprint })) ? '' : 'active'}`}>\r\n                                                                                <b>{_.size(_.get(testimony, 'upvotes'))}</b>\r\n                                                                                <button onClick={(ev) => this.handleSubmitupvotesTestimony(testimony, ev)}>\r\n                                                                                    <i className=\"fas fa-thumbs-up\"></i>\r\n                                                                                </button>\r\n                                                                            </div>\r\n                                                                            <div className={`text-muted downvotes ${_.isUndefined(_.find(_.get(testimony, 'downvotes'), (downvote) => { return downvote.downvoter === fingerprint })) ? '' : 'active'}`}>\r\n                                                                                <b>{_.size(_.get(testimony, 'downvotes'))}</b>\r\n                                                                                <button onClick={(ev) => this.handleSubmitdownvotesTestimony(testimony, ev)}>\r\n                                                                                    <i className=\"fas fa-thumbs-down\"></i>\r\n                                                                                </button>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    <div className=\"middle_row\">\r\n                                                                        <h5>{testimony.body}</h5>\r\n                                                                    </div>\r\n                                                                    <div className=\"bottom_row\">\r\n                                                                        <div className=\"crud\">\r\n                                                                            <i className=\"fas fa-ellipsis-v dropdown-toggle\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\"></i>\r\n                                                                            <div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuButton\">\r\n                                                                                <button onClick={() => this.handleReply(testimony._id)} className=\"dropdown-item\" type=\"button\">Reply</button>\r\n                                                                                {\r\n                                                                                    testimony.fingerprint === fingerprint\r\n                                                                                        ? <><button onClick={() => this.handleEdit(testimony)} className=\"dropdown-item\">Edit</button><div className=\"dropdown-divider\"></div><button onClick={() => this.handleDelete(testimony._id)} className=\"dropdown-item\">Delete</button></>\r\n                                                                                        : ''\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    {\r\n                                                                        _.orderBy(_.reject(testimonies, { 'is_private': false, parent_id: null }), ['view'], ['desc']).map((testimony_reply, index_reply) => {\r\n                                                                            if (testimony_reply.parent_id === testimony._id)\r\n                                                                                return (\r\n                                                                                    <div className={\"card card_\" + index_reply} data-index={index_reply + 1}>\r\n                                                                                        <div className=\"shadow_title\">{_.head(_.words(testimony_reply.body))}</div>\r\n                                                                                        <div className=\"card-body\">\r\n                                                                                            <div className=\"top_row\">\r\n                                                                                                <h6 className=\"author\">by <b>{testimony_reply.author}</b></h6>\r\n                                                                                                <p className=\"text-muted fromNow\">{moment(new Date(testimony_reply.createdAt)).fromNow()}</p>\r\n                                                                                                <div className=\"up_down\">\r\n                                                                                                    <div className={`text-muted upvotes ${_.isUndefined(_.find(_.get(testimony_reply, 'upvotes'), (upvote) => { return upvote.upvoter === fingerprint })) ? '' : 'active'}`}>\r\n                                                                                                        <b>{_.size(_.get(testimony_reply, 'upvotes'))}</b>\r\n                                                                                                        <button onClick={(ev) => this.handleSubmitupvotesTestimony(testimony_reply, ev)}>\r\n                                                                                                            <i className=\"fas fa-thumbs-up\"></i>\r\n                                                                                                        </button>\r\n                                                                                                    </div>\r\n                                                                                                    <div className={`text-muted downvotes ${_.isUndefined(_.find(_.get(testimony_reply, 'downvotes'), (downvote) => { return downvote.downvoter === fingerprint })) ? '' : 'active'}`}>\r\n                                                                                                        <b>{_.size(_.get(testimony_reply, 'downvotes'))}</b>\r\n                                                                                                        <button onClick={(ev) => this.handleSubmitdownvotesTestimony(testimony_reply, ev)}>\r\n                                                                                                            <i className=\"fas fa-thumbs-down\"></i>\r\n                                                                                                        </button>\r\n                                                                                                    </div>\r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                            <div className=\"middle_row\">\r\n                                                                                                <h5>{testimony_reply.body}</h5>\r\n                                                                                            </div>\r\n                                                                                            <div className=\"bottom_row\">\r\n                                                                                                <div className=\"crud\">\r\n                                                                                                    <i className=\"fas fa-ellipsis-v dropdown-toggle\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\"></i>\r\n                                                                                                    <div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuButton\">\r\n                                                                                                        {\r\n                                                                                                            testimony_reply.fingerprint === fingerprint\r\n                                                                                                                ? <><button onClick={() => this.handleEdit(testimony_reply)} className=\"dropdown-item\">Edit</button><div className=\"dropdown-divider\"></div><button onClick={() => this.handleDelete(testimony_reply._id)} className=\"dropdown-item\">Delete</button></>\r\n                                                                                                                : ''\r\n                                                                                                        }\r\n                                                                                                    </div>\r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                )\r\n                                                                            return true;\r\n                                                                        })\r\n                                                                    }\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </Slide>\r\n                <Slide>\r\n                    <Footer />\r\n                </Slide>\r\n            </FullPage>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    testimonyToEdit: state.home.testimonyToEdit,\r\n    testimonies: state.home.testimonies,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmitNotification: data => dispatch({ type: 'SUBMIT_NOTIFICATION', data }),\r\n\r\n    onSubmitTestimony: data => dispatch({ type: 'SUBMIT_TESTIMONY', data }),\r\n    onEditTestimony: data => dispatch({ type: 'EDIT_TESTIMONY', data }),\r\n    onLoadTestimony: data => dispatch({ type: 'TESTIMONY_PAGE_LOADED', data }),\r\n    onDeleteTestimony: id => dispatch({ type: 'DELETE_TESTIMONY', id }),\r\n    setEditTestimony: testimony => dispatch({ type: 'SET_EDIT_TESTIMONY', testimony }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Minttea) ","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Dashboard\\Dashboard.js",["158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187"],"import React from \"react\";\r\nimport axios from 'axios';\r\nimport Swiper, { Navigation, Pagination } from 'swiper';\r\nimport moment from 'moment';\r\nimport { Form } from '../Article';\r\nimport { FormProject } from '../Project';\r\nimport logo from '../../logo.svg';\r\nimport favicon from '../../favicon.svg';\r\nimport Calendar from './Calendar';\r\nimport Account from './Account';\r\nimport Autocomplete from 'react-autocomplete';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport API from \"../../utils/API\";\r\nimport { FullPage, Slide } from 'react-full-page';\r\nimport Clock from 'react-live-clock';\r\nimport Chart from 'chart.js';\r\nimport 'whatwg-fetch';\r\nimport * as $ from \"jquery\";\r\nimport jQuery from 'jquery';\r\nimport 'bootstrap';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst socketURL =\r\n    process.env.NODE_ENV === 'production'\r\n        ? window.location.hostname\r\n        : 'localhost:8800';\r\n\r\nconst socket = socketIOClient(socketURL, { 'transports': ['websocket', 'polling'] });\r\nvar _ = require('lodash');\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            logo_to_show: logo,\r\n            _user: {},\r\n            _users: [],\r\n            _user_toEdit_username: '',\r\n            _user_toEdit_roles: '',\r\n            currentPage: 1,\r\n            todosPerPage: 6,\r\n            currentCard: 0,\r\n            position: 0,\r\n            width: 0,\r\n            tags: '',\r\n            title: '',\r\n            title_projects: '',\r\n            sort: 'Relevant',\r\n            timeframe: 'All_Time',\r\n            categorie: '',\r\n            _article: {},\r\n            _project: {},\r\n            _testimony: {},\r\n            modal_msg: '',\r\n        };\r\n\r\n        this.disconnect = this.disconnect.bind(this);\r\n        this.get_users = this.get_users.bind(this);\r\n        this.get_user = this.get_user.bind(this);\r\n        this.send_user = this.send_user.bind(this);\r\n        this.handleChartArticles = this.handleChartArticles.bind(this);\r\n        this._handleDrag = this._handleDrag.bind(this);\r\n        this.handleJSONTOHTML = this.handleJSONTOHTML.bind(this);\r\n        this.handleJSONTOHTMLIMAGE = this.handleJSONTOHTMLIMAGE.bind(this);\r\n        this._FormatNumberLength = this._FormatNumberLength.bind(this);\r\n        this.handleClickPage = this.handleClickPage.bind(this);\r\n        this._handleModal = this._handleModal.bind(this);\r\n        this._handleTimeFit = this._handleTimeFit.bind(this);\r\n        this.handleShowFilter = this.handleShowFilter.bind(this);\r\n\r\n        this.handleAddArticle = this.handleAddArticle.bind(this);\r\n        this.handleEditArticle = this.handleEditArticle.bind(this);\r\n        this.handleDeleteArticle = this.handleDeleteArticle.bind(this);\r\n\r\n        this.handleAddProject = this.handleAddProject.bind(this);\r\n        this.handleEditProject = this.handleEditProject.bind(this);\r\n        this.handleDeleteProject = this.handleDeleteProject.bind(this);\r\n\r\n        this.handleEditTestimony = this.handleEditTestimony.bind(this);\r\n        this.handleDeleteTestimony = this.handleDeleteTestimony.bind(this);\r\n\r\n        this.handleEditUser = this.handleEditUser.bind(this);\r\n        this.handleDeleteUser = this.handleDeleteUser.bind(this);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n        this.handleChangeFieldUser = this.handleChangeFieldUser.bind(this);\r\n    }\r\n    componentWillMount() {\r\n        const { onLoad, onLoadProject, onLoadTestimony, onLoadNotification } = this.props;\r\n        const { _user } = this.state;\r\n        let self = this;\r\n\r\n        axios('/api/articles')\r\n            .then(function (response) {\r\n                onLoad(response.data);\r\n\r\n                self.handleChartArticles(_.filter(response.data, (_a) => { return _user.username === _a.author }));\r\n\r\n                function runAfterElementExists(jquery_selector, callback) {\r\n                    var checker = window.setInterval(function () {\r\n                        if ($(jquery_selector).length) {\r\n                            clearInterval(checker);\r\n                            callback();\r\n                        }\r\n                    }, 200);\r\n                }\r\n                runAfterElementExists(\".first_section_dashboard .articles_slider_wrapper_cards_item\", function () {\r\n                    self._handleDrag('articles_slider_wrapper');\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n        axios('/api/projects')\r\n            .then(function (response) {\r\n                onLoadProject(response.data);\r\n                function runAfterElementExists(jquery_selector, callback) {\r\n                    var checker = window.setInterval(function () {\r\n                        if ($(jquery_selector).length) {\r\n                            clearInterval(checker);\r\n                            callback();\r\n                        }\r\n                    }, 200);\r\n                }\r\n                runAfterElementExists(\".first_section_dashboard .projects_slider_wrapper_cards_item\", function () {\r\n                    self._handleDrag('projects_slider_wrapper');\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n        axios('/api/testimonies')\r\n            .then(function (response) {\r\n                onLoadTestimony(response.data);\r\n                function runAfterElementExists(jquery_selector, callback) {\r\n                    var checker = window.setInterval(function () {\r\n                        if ($(jquery_selector).length) {\r\n                            clearInterval(checker);\r\n                            callback();\r\n                        }\r\n                    }, 200);\r\n                }\r\n                runAfterElementExists(\".first_section_dashboard .testimonies_slider_wrapper_cards_item\", function () {\r\n                    self._handleDrag('testimonies_slider_wrapper');\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n        axios('/api/notifications')\r\n            .then(function (response) {\r\n                onLoadNotification(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n        this.get_user();\r\n        socket.on(\"USER_UPDATED_GET\", data => self.get_user());\r\n    }\r\n    componentDidMount() {\r\n        let self = this;\r\n\r\n        //control the tabs\r\n        $('.tab-pane').addClass('animated');\r\n        $('.tab-pane').addClass('faster');\r\n        $('.nav_link').click((event) => {\r\n\r\n            let _li_parent = $(event.target).parent().parent();\r\n            let _li_target = $($(event.target).attr('href'));\r\n            let _link_target = $(event.target);\r\n\r\n            $('.tab-pane').not(_li_target).addClass('fadeOutRight');\r\n            $('.tab-pane').not(_li_target).removeClass('fadeInLeft');\r\n            $(\".nav li\").not(_li_parent).removeClass('active');\r\n            $('.tab-pane').not(_li_target).removeClass('active');\r\n            $('.tab-pane').not(_li_target).removeClass('show');\r\n            $(\".nav_link\").not(_link_target).removeClass('active');\r\n            $('.nav_link').not(_link_target).removeClass('show');\r\n\r\n            $(_li_target).removeClass('fadeOutRight');\r\n            $(_li_target).addClass('fadeInLeft');\r\n            $(_li_parent).addClass('active');\r\n            $(_li_target).addClass('active');\r\n            $(_li_target).addClass('show');\r\n            $(_link_target).addClass('active');\r\n            $(_link_target).addClass('show');\r\n\r\n        });\r\n\r\n        this._handleModal('_article_modal_trigger', '_all_article_modal_view');\r\n        this._handleModal('_project_modal_trigger', '_all_project_modal_view');\r\n        this._handleModal('_testimony_modal_trigger', '_all_testimony_modal_view');\r\n\r\n        this._handleTimeFit();\r\n\r\n        function displayWindowSize() {\r\n            if ($(window).width() <= 425) {\r\n                self.setState({\r\n                    logo_to_show: favicon\r\n                });\r\n            } else {\r\n                self.setState({\r\n                    logo_to_show: favicon\r\n                });\r\n            }\r\n        }\r\n        window.addEventListener(\"resize\", displayWindowSize);\r\n        displayWindowSize();\r\n    }\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        if (nextProps.userToEdit) {\r\n            this.setState({\r\n                _user_toEdit_username: nextProps.userToEdit.username,\r\n                _user_toEdit_roles: nextProps.userToEdit.roles,\r\n            });\r\n        }\r\n    }\r\n    disconnect() {\r\n        API.logout();\r\n        window.location = \"/login\";\r\n    }\r\n    async get_users() {\r\n        const self = this;\r\n        const { _user } = this.state;\r\n        if (_.includes(_user.roles, 'admin')) {\r\n            await API.get_users()\r\n                .then((res) => {\r\n                    self.setState({\r\n                        _users: res.data.users,\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.error(err);\r\n                });\r\n        } else {\r\n            self.setState(prevState => ({\r\n                _users: [_user]\r\n            }));\r\n        }\r\n    }\r\n    async get_user() {\r\n        const self = this;\r\n        await API.get_user(localStorage.getItem('email'))\r\n            .then((res) => {\r\n                self.setState({\r\n                    _user: res.data.user,\r\n                }, () => {\r\n                    self.get_users();\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    }\r\n    async send_user() {\r\n        let self = this;\r\n        const { _user_toEdit_username, _user_toEdit_roles, _user } = this.state;\r\n\r\n        try {\r\n            await API.update_roles({ _user_toEdit_username, _user_toEdit_roles })\r\n                .then((res) => {\r\n                    self.setState({\r\n                        modal_msg: res.data.text\r\n                    }, () => {\r\n                        console.log(_user_toEdit_roles);\r\n                        function setEditFunction() {\r\n                            return new Promise((resolve, reject) => {\r\n                                setTimeout(function () {\r\n                                    $('#edit_modal').modal('toggle');\r\n                                    self.get_users();\r\n                                    self.get_user();\r\n                                    socket.emit(\"USER_UPDATED\", res.data.text);\r\n                                    true ? resolve('Success') : reject('Error');\r\n                                }, 2000);\r\n                            })\r\n                        }\r\n                        setEditFunction()\r\n                            .then(() => {\r\n                                $('#myModal').on('hidden.bs.modal', function (e) {\r\n                                    if (_.includes(_user.roles, 'Deleted')) {\r\n                                        self.disconnect();\r\n                                    }\r\n                                })\r\n                            });\r\n                    })\r\n                })\r\n                .catch((error) => {\r\n                    self.setState({\r\n                        modal_msg: error.response.data.text\r\n                    }, () => {\r\n                        $('#edit_modal_error_roles').modal('toggle');\r\n                    });\r\n                });\r\n        } catch (error) {\r\n            self.setState({\r\n                modal_msg: JSON.stringify(error)\r\n            }, () => {\r\n                $('#edit_modal_error_roles').modal('toggle');\r\n            });\r\n        }\r\n    }\r\n    handleChartArticles(articles) {\r\n        const { _user } = this.state;\r\n\r\n        Chart.defaults.global.legend.display = false;\r\n        Chart.pluginService.register({\r\n            afterUpdate: function (chart) {\r\n                if (chart.config.options.elements.arc.roundedCornersFor !== undefined) {\r\n                    var arc = chart.getDatasetMeta(0).data[chart.config.options.elements.arc.roundedCornersFor];\r\n                    arc.round = {\r\n                        x: (chart.chartArea.left + chart.chartArea.right) / 2,\r\n                        y: (chart.chartArea.top + chart.chartArea.bottom) / 2,\r\n                        radius: (chart.outerRadius + chart.innerRadius) / 2,\r\n                        thickness: (chart.outerRadius - chart.innerRadius) / 2 - 1,\r\n                        backgroundColor: arc._model.backgroundColor\r\n                    }\r\n                }\r\n            },\r\n\r\n            afterDraw: function (chart) {\r\n                if (chart.config.options.elements.arc.roundedCornersFor !== undefined) {\r\n                    var ctx = chart.chart.ctx;\r\n                    var arc = chart.getDatasetMeta(0).data[chart.config.options.elements.arc.roundedCornersFor];\r\n                    var startAngle = Math.PI / 2 - arc._view.startAngle;\r\n                    var endAngle = Math.PI / 2 - arc._view.endAngle;\r\n\r\n                    ctx.save();\r\n                    ctx.translate(arc.round.x, arc.round.y);\r\n                    console.log(arc.round.startAngle)\r\n                    ctx.fillStyle = arc.round.backgroundColor;\r\n                    ctx.beginPath();\r\n                    ctx.arc(arc.round.radius * Math.sin(startAngle), arc.round.radius * Math.cos(startAngle), arc.round.thickness, 0, 2 * Math.PI);\r\n                    ctx.arc(arc.round.radius * Math.sin(endAngle), arc.round.radius * Math.cos(endAngle), arc.round.thickness, 0, 2 * Math.PI);\r\n                    ctx.closePath();\r\n                    ctx.fill();\r\n                    ctx.restore();\r\n                }\r\n            },\r\n        });\r\n\r\n        let canvas_byCategory = document.querySelector('#_byCategory_chart');\r\n        canvas_byCategory.width = $('.byCategory__item ._content').width() * 0.4;\r\n\r\n        let canvas_byUpvote = document.querySelector('#_byUpvote_chart');\r\n        canvas_byUpvote.width = $('.byUpvote__item ._content').width() * 0.4;\r\n\r\n        let canvas_byView = document.querySelector('#_byView_chart');\r\n        canvas_byView.width = $('.byView__item ._content').width() * 0.4;\r\n\r\n        let canvas_byComment = document.querySelector('#_byComment_chart');\r\n        canvas_byComment.width = $('.byComment__item ._content').width() * 0.4;\r\n\r\n        let canvas_byViewFollow = document.querySelector('#_byViewFollow_chart');\r\n        canvas_byViewFollow.width = $('.byViewFollow__item ._content ._byViewFollow_data').width();\r\n        canvas_byViewFollow.height = $('.byViewFollow__item ._content ._byViewFollow_data').height();\r\n\r\n        let ctx_byCategory = $('#_byCategory_chart')[0].getContext('2d'),\r\n            ctx_byUpvote = $('#_byUpvote_chart')[0].getContext('2d'),\r\n            ctx_byView = $('#_byView_chart')[0].getContext('2d'),\r\n            ctx_byComment = $('#_byComment_chart')[0].getContext('2d'),\r\n            ctx_byViewFollow = $('#_byViewFollow_chart')[0].getContext('2d');\r\n\r\n        let backgroundColors = [\r\n            'rgba(80,163,164,0.25)',\r\n            'rgba(251,147,143,0.25)',\r\n            'rgba(252,175,56,0.25)',\r\n            'rgba(132,197,64,0.25)',\r\n            'rgba(195,107,133,0.25)',\r\n        ];\r\n        let borderColors = [\r\n            'rgba(80,163,164,0.5)',\r\n            'rgba(251,147,143,0.5)',\r\n            'rgba(252,175,56,0.5)',\r\n            'rgba(132,197,64,0.5)',\r\n            'rgba(195,107,133,0.5)',\r\n        ];\r\n        let _categories_array = _.map(_.uniqBy(_.filter(articles[0], (_ar) => { return _user.username === _ar.author }), 'categorie'), (_a) => {\r\n            return _a.categorie\r\n        });\r\n        let _weeks_format = _.reverse(_.map(new Array(10), (element, index) => { return moment().subtract(index, 'weeks').format('D. MMM'); }));\r\n        let _weeks_univ_format = _.reverse(_.map(new Array(10), (element, index) => { return moment().subtract(index, 'weeks'); }));\r\n        let _views = _.orderBy(_.flatten(_.map(_.filter(articles[0], (_ar) => { return _user.username === _ar.author }), (_a) => { return _a.view })), '_createdAt', 'asc');\r\n        let _upvotes = _.flatten(_.map(_.filter(articles[0], (_ar) => { return _user.username === _ar.author }), (_a) => { return _a.upvotes }));\r\n        let _comments = _.flatten(_.map(_.filter(articles[0], (_ar) => { return _user.username === _ar.author }), (_a) => { return _a.comment }));\r\n        let _popularity = _.round((_.size(_comments) + _.size(_upvotes)) * 100 / _.size(_views));\r\n        let _values = _.map(_weeks_univ_format, (_week, _index) => {\r\n            return _.size(_.filter(_views, (_v) => {\r\n                return _.isUndefined(_weeks_univ_format[_index - 1]) ? moment(_v._createdAt).isBefore(_weeks_univ_format[_index]) : moment(_v._createdAt).isBetween(_weeks_univ_format[_index - 1], _weeks_univ_format[_index]);\r\n            }));\r\n        });\r\n\r\n        /* Chart By Categories */\r\n        let chart_byCategory = new Chart(ctx_byCategory, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: _categories_array,\r\n                datasets: [{\r\n                    label: 'Articles by Categories',\r\n                    data: _.map(_categories_array, (l) => {\r\n                        return _.size(_.filter(articles[0], (_a) => {\r\n                            return _a.categorie == l\r\n                        }))\r\n                    }),\r\n                    backgroundColor: backgroundColors,\r\n                    borderColor: borderColors,\r\n                    borderWidth: 0.5\r\n                }]\r\n            },\r\n            options: {\r\n            }\r\n        });\r\n\r\n        /* Chart By Views */\r\n        let chart_byView = new Chart(ctx_byView, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: _.map(_.take(_.orderBy(articles[0], ['view'], ['desc']), 5), (_a) => {\r\n                    return _a.title\r\n                }),\r\n                datasets: [{\r\n                    label: 'Top 5 Viewed Articles',\r\n                    data: _.map(_.take(_.orderBy(articles[0], ['view'], ['desc']), 5), (_a) => {\r\n                        return _.size(_a.view)\r\n                    }),\r\n                    backgroundColor: backgroundColors,\r\n                    borderColor: borderColors,\r\n                    borderWidth: 0.5\r\n                }]\r\n            },\r\n            options: {\r\n            }\r\n        });\r\n\r\n        /* Chart By Upvotes */\r\n        let chart_byUpvote = new Chart(ctx_byUpvote, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: _.map(_.take(_.orderBy(articles[0], ['upvotes'], ['desc']), 5), (_a) => {\r\n                    return _a.title\r\n                }),\r\n                datasets: [{\r\n                    label: 'Top 5 Liked Articles',\r\n                    data: _.map(_.take(_.orderBy(articles[0], ['upvotes'], ['desc']), 5), (_a) => {\r\n                        return _.size(_a.upvotes)\r\n                    }),\r\n                    backgroundColor: backgroundColors,\r\n                    borderColor: borderColors,\r\n                    borderWidth: 0.5\r\n                }]\r\n            },\r\n            options: {\r\n            }\r\n        });\r\n\r\n        /* Chart By Comment */\r\n        let chart_byComment = new Chart(ctx_byComment, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: _.map(_.take(_.orderBy(articles[0], ['comment'], ['desc']), 5), (_a) => {\r\n                    return _a.title\r\n                }),\r\n                datasets: [{\r\n                    label: 'Top 5 Commented Articles',\r\n                    data: _.map(_.take(_.orderBy(articles[0], ['comment'], ['desc']), 5), (_a) => {\r\n                        return _.size(_a.comment)\r\n                    }),\r\n                    backgroundColor: backgroundColors,\r\n                    borderColor: borderColors,\r\n                    borderWidth: 0.5\r\n                }]\r\n            },\r\n            options: {\r\n            }\r\n        });\r\n\r\n        /* Chart By ViewFollow */\r\n        let chart_byViewFollow = new Chart(ctx_byViewFollow, {\r\n            type: 'line',\r\n            data: {\r\n                labels: _weeks_format,\r\n                datasets: [{\r\n                    label: 'Views ',\r\n                    data: _values,\r\n                    borderWidth: 2,\r\n                    borderColor: 'rgba(61, 193, 211, 1)',\r\n                    backgroundColor: 'rgba(61, 193, 211, 0.05)',\r\n                }]\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                legend: {\r\n                    display: false\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        gridLines: {\r\n                            display: false,\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        gridLines: {\r\n                            display: false,\r\n                        }\r\n                    }]\r\n                }\r\n            }\r\n        });\r\n    }\r\n    handleEditUser(user) {\r\n        const { setEditUser } = this.props;\r\n        setEditUser(user);\r\n    }\r\n    handleDeleteUser(user) {\r\n        const self = this;\r\n        const { onSubmitNotification } = this.props;\r\n        const { _user_toEdit_username, _user_toEdit_roles, _user } = this.state;\r\n\r\n        function setEditFunction() {\r\n            return new Promise((resolve, reject) => {\r\n                setTimeout(function () {\r\n                    self.handleEditUser(user);\r\n                    true ? resolve('Success') : reject('Error');\r\n                }, 2000);\r\n            })\r\n        }\r\n        setEditFunction()\r\n            .then(() => {\r\n                self.setState(prevState => ({\r\n                    _user_toEdit_roles: prevState._user_toEdit_roles.concat('Deleted')\r\n                }), () => {\r\n                    self.send_user();\r\n                    return axios.post('/api/notifications', {\r\n                        type: 'User Deleted',\r\n                        description: 'User \\' ' + user.username + ' \\' Deleted.',\r\n                        author: _user.email\r\n                    })\r\n                        .then((res_n) => {\r\n                            onSubmitNotification(res_n.data);\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error)\r\n                        });\r\n                });\r\n                return true;\r\n            })\r\n            .catch(err => console.log('There was an error:' + err));\r\n    }\r\n    _handleDrag(source) {\r\n        // configure Swiper to use modules\r\n        Swiper.use([Navigation, Pagination]);\r\n\r\n        if (source != 'testimonies_slider_wrapper') {\r\n            var mySwiper = new Swiper('.' + source + '.swiper-container', {\r\n                effect: 'coverflow',\r\n                direction: 'horizontal',\r\n                grabCursor: true,\r\n                slidesPerView: 1.10,\r\n                centeredSlides: false,\r\n                centeredSlidesBounds: false,\r\n                paginationClickable: true,\r\n                centerInsufficientSlides: false,\r\n                spaceBetween: 0,\r\n                autoResize: false,\r\n                observer: true,\r\n                watchOverflow: true,\r\n                variableWidth: true,\r\n                coverflowEffect: {\r\n                    rotate: 0,\r\n                    stretch: 0,\r\n                    depth: 0,\r\n                    modifier: 3,\r\n                    slideShadows: false\r\n                },\r\n                simulateTouch: true,\r\n            });\r\n            $(window).resize(function () {\r\n                if ($(window).width() <= 768) {\r\n                    mySwiper.params.slidesPerView = 1;\r\n                    mySwiper.update();\r\n                }\r\n            });\r\n            $(window).trigger('resize');\r\n        }\r\n        else\r\n            var mySwiperTestimonies = new Swiper('.' + source + '.swiper-container', {\r\n                effect: 'coverflow',\r\n                direction: 'vertical',\r\n                loop: false,\r\n                slideToClickedSlide: true,\r\n                slidesPerView: 2.5,\r\n                grabCursor: true,\r\n                centeredSlides: false,\r\n                paginationClickable: true,\r\n                centerInsufficientSlides: true,\r\n                spaceBetween: 0,\r\n                autoResize: false,\r\n                observer: true,\r\n                watchOverflow: true,\r\n                freeMode: false,\r\n                freeModeSticky: true,\r\n                coverflowEffect: {\r\n                    rotate: 0,\r\n                    stretch: 0,\r\n                    depth: 0,\r\n                    modifier: 3,\r\n                    slideShadows: false\r\n                },\r\n                simulateTouch: true,\r\n                scrollbar: '.' + source + ' .swiper-scrollbar',\r\n            });\r\n    }\r\n    handleAddArticle() {\r\n        const { setEdit } = this.props;\r\n        setEdit();\r\n    }\r\n    handleEditArticle(article) {\r\n        const { setEdit } = this.props;\r\n        setEdit(article);\r\n    }\r\n    handleDeleteArticle(_id) {\r\n        const { onDelete, onSubmitNotification } = this.props;\r\n        const { _user } = this.state;\r\n        return axios.delete(`/api/articles/${_id}`)\r\n            .then(() => {\r\n                onDelete(_id);\r\n                return axios.post('/api/notifications', {\r\n                    type: 'Article Deleted',\r\n                    description: 'Article \\'' + _id + '\\' Deleted.',\r\n                    author: _user.email\r\n                })\r\n                    .then((res_n) => onSubmitNotification(res_n.data))\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                    });\r\n            });\r\n    }\r\n    handleAddProject() {\r\n        const { setEditProject } = this.props;\r\n        setEditProject();\r\n    }\r\n    handleEditProject(project) {\r\n        const { setEditProject } = this.props;\r\n        setEditProject(project);\r\n    }\r\n    handleDeleteProject(_id) {\r\n        const { onDeleteProject, onSubmitNotification } = this.props;\r\n        const { _user } = this.state;\r\n        return axios.delete(`/api/projects/${_id}`)\r\n            .then(() => {\r\n                onDeleteProject(_id);\r\n                return axios.post('/api/notifications', {\r\n                    type: 'Project Deleted',\r\n                    description: 'Project \\'' + _id + '\\' Deleted.',\r\n                    author: _user.email\r\n                })\r\n                    .then((res_n) => onSubmitNotification(res_n.data))\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                    });\r\n            });\r\n    }\r\n    handleEditTestimony(testimony) {\r\n        const { setEditTestimony } = this.props;\r\n        setEditTestimony(testimony);\r\n    }\r\n    handleDeleteTestimony(_id) {\r\n        const { onDeleteTestimony, onSubmitNotification } = this.props;\r\n        const { _user } = this.state;\r\n        return axios.delete(`/api/testimonies/${_id}`)\r\n            .then(() => {\r\n                onDeleteTestimony(_id);\r\n                return axios.post('/api/notifications', {\r\n                    type: 'Testimony Deleted',\r\n                    description: 'Testimony \\'' + _id + '\\' Deleted.',\r\n                    author: _user.email\r\n                })\r\n                    .then((res_n) => onSubmitNotification(res_n.data))\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                    });\r\n            });\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        });\r\n    }\r\n    handleJSONTOHTML(inputDelta) {\r\n        function runAfterElementExists(jquery_selector, callback) {\r\n            var checker = window.setInterval(function () {\r\n                if (jquery_selector) {\r\n                    clearInterval(checker);\r\n                    callback();\r\n                }\r\n            }, 200);\r\n        }\r\n        runAfterElementExists(inputDelta, function () {\r\n            const html = $.parseHTML(inputDelta);\r\n            $('h6.body_article').html(html);\r\n        });\r\n    }\r\n    handleJSONTOHTMLIMAGE(inputDelta, index) {\r\n        function runAfterElementExists(jquery_selector, callback) {\r\n            var checker = window.setInterval(function () {\r\n                if (jquery_selector) {\r\n                    clearInterval(checker);\r\n                    callback();\r\n                }\r\n            }, 200);\r\n        }\r\n        runAfterElementExists(inputDelta, function () {\r\n            const html = $.parseHTML(inputDelta);\r\n            $('.card_' + index + ' figure').html($(html).find('img').first());\r\n        });\r\n    }\r\n    _FormatNumberLength(num, length) {\r\n        var r = \"\" + num;\r\n        while (r.length < length) {\r\n            r = \"0\" + r;\r\n        }\r\n        return r;\r\n    }\r\n    handleClickPage(event) {\r\n        $([document.documentElement, document.body]).animate({\r\n            scrollTop: $(\"#_all_article_modal_view\").offset().top\r\n        }, 500);\r\n        this.setState({\r\n            currentPage: Number(event.target.id)\r\n        });\r\n    }\r\n    handleShowFilter(event) {\r\n        var wrapper = $('.modal-top-filter'),\r\n            buttonF = $('#_all_article_modal_view .filter');\r\n        if (!wrapper.hasClass('expand')) {\r\n            wrapper.addClass('expand', 500);\r\n            buttonF.addClass('expand', 500);\r\n        } else {\r\n            wrapper.removeClass('expand', 500);\r\n            buttonF.removeClass('expand', 500);\r\n        }\r\n    }\r\n    handleChangeField(key, event) {\r\n        this.setState({ [key]: event.target.value });\r\n    }\r\n    handleChangeFieldUser(key, event) {\r\n        this.setState({\r\n            [key]: [event.target.value],\r\n        });\r\n    }\r\n    _handleModal(trigger, modal_target) {\r\n        const self = this;\r\n        var Boxlayout = function () {\r\n            var wrapper = document.getElementById('first_section_dashboard'),\r\n                element = $('#' + trigger),\r\n                modal = $('#' + modal_target),\r\n                closeButton = $('#' + modal_target + ' .modal-close'),\r\n                expandedClass = 'is-expanded',\r\n                hasExpandedClass = 'has-expanded-item';\r\n\r\n            return { init: init };\r\n            function init() {\r\n                _initEvents();\r\n            }\r\n            function _initEvents() {\r\n                element.click(function () {\r\n                    if (!modal.hasClass(expandedClass)) {\r\n                        modal.addClass(expandedClass, 500);\r\n                        wrapper.classList.add(hasExpandedClass);\r\n                        $('.modal-top-filter input.tags').focus(() => {\r\n                            $('.modal-top-filter label#tags_label').toggleClass('active');\r\n                        });\r\n                        $('.modal-top-filter input.tags').blur(() => {\r\n                            if (!self.state.tags)\r\n                                $('.modal-top-filter label#tags_label').toggleClass('active');\r\n                        });\r\n                    }\r\n                });\r\n                closeButton.click(function (event) {\r\n                    if (modal.hasClass(expandedClass)) {\r\n                        modal.removeClass(expandedClass);\r\n                        wrapper.classList.remove(hasExpandedClass);\r\n                        self.setState({\r\n                            currentPage: 1,\r\n                            todosPerPage: 6,\r\n                            currentCard: 0,\r\n                            position: 0,\r\n                            width: 0,\r\n                            tags: '',\r\n                            sort: 'Relevant',\r\n                            timeframe: 'All_Time',\r\n                            categorie: '',\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        }();\r\n        Boxlayout.init();\r\n    }\r\n    _handleTimeFit() {\r\n        (function (window, $) {\r\n            \"use strict\";\r\n            var counter = 0,\r\n                $headCache = $('head'),\r\n                oldBigText = window.BigText,\r\n                oldjQueryMethod = $.fn.bigtext,\r\n                BigText = {\r\n                    DEBUG_MODE: false,\r\n                    DEFAULT_MIN_FONT_SIZE_PX: null,\r\n                    DEFAULT_MAX_FONT_SIZE_PX: 528,\r\n                    GLOBAL_STYLE_ID: 'bigtext-style',\r\n                    STYLE_ID: 'bigtext-id',\r\n                    LINE_CLASS_PREFIX: 'bigtext-line',\r\n                    EXEMPT_CLASS: 'bigtext-exempt',\r\n                    noConflict: function (restore) {\r\n                        if (restore) {\r\n                            $.fn.bigtext = oldjQueryMethod;\r\n                            window.BigText = oldBigText;\r\n                        }\r\n                        return BigText;\r\n                    },\r\n                    supports: {\r\n                        wholeNumberFontSizeOnly: (function () {\r\n                            if (!('getComputedStyle' in window)) {\r\n                                return true;\r\n                            }\r\n                            var test = $('<div/>').css({\r\n                                position: 'absolute',\r\n                                'font-size': '14.1px'\r\n                            }).insertBefore($('script').eq(0)),\r\n                                computedStyle = window.getComputedStyle(test[0], null);\r\n\r\n                            var ret = computedStyle && computedStyle.getPropertyValue('font-size') === '14px';\r\n                            test.remove();\r\n                            return ret;\r\n                        })()\r\n                    },\r\n                    init: function () {\r\n                        if (!$('#' + BigText.GLOBAL_STYLE_ID).length) {\r\n                            $headCache.append(BigText.generateStyleTag(BigText.GLOBAL_STYLE_ID, ['.bigtext * { white-space: nowrap; } .bigtext > * { display: block; }',\r\n                                '.bigtext .' + BigText.EXEMPT_CLASS + ', .bigtext .' + BigText.EXEMPT_CLASS + ' * { white-space: normal; }']));\r\n                        }\r\n                    },\r\n                    bindResize: function (eventName, resizeFunction) {\r\n                        var timeoutId;\r\n                        $(window).unbind(eventName).bind(eventName, function () {\r\n                            if (timeoutId) {\r\n                                clearTimeout(timeoutId);\r\n                            }\r\n                            timeoutId = setTimeout(resizeFunction, 100);\r\n                        });\r\n                    },\r\n                    getStyleId: function (id) {\r\n                        return BigText.STYLE_ID + '-' + id;\r\n                    },\r\n                    generateStyleTag: function (id, css) {\r\n                        return $('<style>' + css.join('\\n') + '</style>').attr('id', id);\r\n                    },\r\n                    clearCss: function (id) {\r\n                        var styleId = BigText.getStyleId(id);\r\n                        $('#' + styleId).remove();\r\n                    },\r\n                    generateCss: function (id, linesFontSizes, lineWordSpacings, minFontSizes) {\r\n                        var css = [];\r\n\r\n                        BigText.clearCss(id);\r\n\r\n                        for (var j = 0, k = linesFontSizes.length; j < k; j++) {\r\n                            css.push('#' + id + ' .' + BigText.LINE_CLASS_PREFIX + j + ' {' +\r\n                                (minFontSizes[j] ? ' white-space: normal;' : '') +\r\n                                (linesFontSizes[j] ? ' font-size: ' + linesFontSizes[j] + 'px;' : '') +\r\n                                (lineWordSpacings[j] ? ' word-spacing: ' + lineWordSpacings[j] + 'px;' : '') +\r\n                                '}');\r\n                        }\r\n\r\n                        return BigText.generateStyleTag(BigText.getStyleId(id), css);\r\n                    },\r\n                    jQueryMethod: function (options) {\r\n                        BigText.init();\r\n\r\n                        options = $.extend({\r\n                            minfontsize: BigText.DEFAULT_MIN_FONT_SIZE_PX,\r\n                            maxfontsize: BigText.DEFAULT_MAX_FONT_SIZE_PX,\r\n                            childSelector: '',\r\n                            resize: true\r\n                        }, options || {});\r\n\r\n                        this.each(function () {\r\n                            var $t = $(this).addClass('bigtext'),\r\n                                maxWidth = $t.width(),\r\n                                id = $t.attr('id'),\r\n                                $children = options.childSelector ? $t.find(options.childSelector) : $t.children();\r\n\r\n                            if (!id) {\r\n                                id = 'bigtext-id' + (counter++);\r\n                                $t.attr('id', id);\r\n                            }\r\n\r\n                            if (options.resize) {\r\n                                BigText.bindResize('resize.bigtext-event-' + id, function () {\r\n                                    BigText.jQueryMethod.call($('#' + id), options);\r\n                                });\r\n                            }\r\n\r\n                            BigText.clearCss(id);\r\n\r\n                            $children.addClass(function (lineNumber, className) {\r\n                                return [className.replace(new RegExp('\\\\b' + BigText.LINE_CLASS_PREFIX + '\\\\d+\\\\b'), ''),\r\n                                BigText.LINE_CLASS_PREFIX + lineNumber].join(' ');\r\n                            });\r\n\r\n                            var sizes = BigText.calculateSizes($t, $children, maxWidth, options.maxfontsize, options.minfontsize);\r\n                            $headCache.append(BigText.generateCss(id, sizes.fontSizes, sizes.wordSpacings, sizes.minFontSizes));\r\n                        });\r\n\r\n                        return this.trigger('bigtext:complete');\r\n                    },\r\n                    testLineDimensions: function ($line, maxWidth, property, size, interval, units, previousWidth) {\r\n                        var width;\r\n                        previousWidth = typeof previousWidth === 'number' ? previousWidth : 0;\r\n                        $line.css(property, size + units);\r\n\r\n                        width = $line.width();\r\n\r\n                        if (width >= maxWidth) {\r\n                            $line.css(property, '');\r\n\r\n                            if (width === maxWidth) {\r\n                                return {\r\n                                    match: 'exact',\r\n                                    size: parseFloat((parseFloat(size) - 0.1).toFixed(3))\r\n                                };\r\n                            }\r\n\r\n                            // Since this is an estimate, we calculate how far over the width we went with the new value.\r\n                            // If this is word-spacing (our last resort guess) and the over is less than the under, we keep the higher value.\r\n                            // Otherwise, we revert to the underestimate.\r\n                            var under = maxWidth - previousWidth,\r\n                                over = width - maxWidth;\r\n\r\n                            return {\r\n                                match: 'estimate',\r\n                                size: parseFloat((parseFloat(size) - (property === 'word-spacing' && previousWidth && (over < under) ? 0 : interval)).toFixed(3))\r\n                            };\r\n                        }\r\n\r\n                        return width;\r\n                    },\r\n                    calculateSizes: function ($t, $children, maxWidth, maxFontSize, minFontSize) {\r\n                        var $c = $t.clone(true)\r\n                            .addClass('bigtext-cloned')\r\n                            .css({\r\n                                fontFamily: $t.css('font-family'),\r\n                                textTransform: $t.css('text-transform'),\r\n                                wordSpacing: $t.css('word-spacing'),\r\n                                letterSpacing: $t.css('letter-spacing'),\r\n                                position: 'absolute',\r\n                                left: BigText.DEBUG_MODE ? 0 : -9999,\r\n                                top: BigText.DEBUG_MODE ? 0 : -9999\r\n                            })\r\n                            .appendTo(document.body);\r\n\r\n                        // font-size isn't the only thing we can modify, we can also mess with:\r\n                        // word-spacing and letter-spacing. WebKit does not respect subpixel\r\n                        // letter-spacing, word-spacing, or font-size.\r\n                        // TODO try -webkit-transform: scale() as a workaround.\r\n                        var fontSizes = [],\r\n                            wordSpacings = [],\r\n                            minFontSizes = [],\r\n                            ratios = [];\r\n\r\n                        $children.css('float', 'left').each(function () {\r\n                            var $line = $(this),\r\n                                // TODO replace 8, 4 with a proportional size to the calculated font-size.\r\n                                intervals = BigText.supports.wholeNumberFontSizeOnly ? [8, 4, 1] : [8, 4, 1, 0.1],\r\n                                lineMax,\r\n                                newFontSize;\r\n\r\n                            if ($line.hasClass(BigText.EXEMPT_CLASS)) {\r\n                                fontSizes.push(null);\r\n                                ratios.push(null);\r\n                                minFontSizes.push(false);\r\n                                return;\r\n                            }\r\n\r\n                            // TODO we can cache this ratio?\r\n                            var autoGuessSubtraction = 32, // font size in px\r\n                                currentFontSize = parseFloat($line.css('font-size')),\r\n                                ratio = ($line.width() / currentFontSize).toFixed(6);\r\n\r\n                            newFontSize = parseInt(maxWidth / ratio, 10) - autoGuessSubtraction;\r\n\r\n                            outer: for (var m = 0, n = intervals.length; m < n; m++) {\r\n                                inner: for (var j = 1, k = 10; j <= k; j++) {\r\n                                    if (newFontSize + j * intervals[m] > maxFontSize) {\r\n                                        newFontSize = maxFontSize;\r\n                                        break outer;\r\n                                    }\r\n\r\n                                    lineMax = BigText.testLineDimensions($line, maxWidth, 'font-size', newFontSize + j * intervals[m], intervals[m], 'px', lineMax);\r\n                                    if (typeof lineMax != 'number') {\r\n                                        newFontSize = lineMax.size;\r\n\r\n                                        if (lineMax.match === 'exact') {\r\n                                            break outer;\r\n                                        }\r\n                                        break inner;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            ratios.push(maxWidth / newFontSize);\r\n\r\n                            if (newFontSize > maxFontSize) {\r\n                                fontSizes.push(maxFontSize);\r\n                                minFontSizes.push(false);\r\n                            } else if (!!minFontSize && newFontSize < minFontSize) {\r\n                                fontSizes.push(minFontSize);\r\n                                minFontSizes.push(true);\r\n                            } else {\r\n                                fontSizes.push(newFontSize);\r\n                                minFontSizes.push(false);\r\n                            }\r\n                        }).each(function (lineNumber) {\r\n                            var $line = $(this),\r\n                                wordSpacing = 0,\r\n                                interval = 1,\r\n                                maxWordSpacing;\r\n\r\n                            if ($line.hasClass(BigText.EXEMPT_CLASS)) {\r\n                                wordSpacings.push(null);\r\n                                return;\r\n                            }\r\n\r\n                            // must re-use font-size, even though it was removed above.\r\n                            $line.css('font-size', fontSizes[lineNumber] + 'px');\r\n\r\n                            for (var m = 1, n = 3; m < n; m += interval) {\r\n                                maxWordSpacing = BigText.testLineDimensions($line, maxWidth, 'word-spacing', m, interval, 'px', maxWordSpacing);\r\n                                if (typeof maxWordSpacing != 'number') {\r\n                                    wordSpacing = maxWordSpacing.size;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            $line.css('font-size', '');\r\n                            wordSpacings.push(wordSpacing);\r\n                        }).removeAttr('style');\r\n\r\n                        if (!BigText.DEBUG_MODE) {\r\n                            $c.remove();\r\n                        } else {\r\n                            $c.css({\r\n                                'background-color': 'rgba(255,255,255,.4)'\r\n                            });\r\n                        }\r\n\r\n                        return {\r\n                            fontSizes: fontSizes,\r\n                            wordSpacings: wordSpacings,\r\n                            ratios: ratios,\r\n                            minFontSizes: minFontSizes\r\n                        };\r\n                    }\r\n                };\r\n\r\n            $.fn.bigtext = BigText.jQueryMethod;\r\n            window.BigText = BigText;\r\n\r\n        })(this, jQuery);\r\n        $('#bigtext').bigtext();\r\n    }\r\n    render() {\r\n        const { logo_to_show, _user, _users, title, title_projects, sort, timeframe, categorie, _article, _testimony, currentPage, todosPerPage, tags, _user_toEdit_username, _user_toEdit_roles, modal_msg } = this.state;\r\n        const { articles, projects, testimonies, notifications } = this.props;\r\n        let _views_c = _.orderBy(_.flatten(_.map(_.filter(articles, (_ar) => { return _user.username === _ar.author }), (_a) => { return _a.view })), '_createdAt', 'asc');\r\n        let _upvotes_c = _.flatten(_.map(_.filter(articles, (_ar) => { return _user.username === _ar.author }), (_a) => { return _a.upvotes }));\r\n        let _comments_c = _.flatten(_.map(_.filter(articles, (_ar) => { return _user.username === _ar.author }), (_a) => { return _a.comment }));\r\n        return (\r\n            <FullPage scrollMode={'normal'}>\r\n                <Slide>\r\n                    <section id=\"first_section_dashboard\" className=\"first_section_dashboard\">\r\n                        <div className=\"wrapper_full\">\r\n                            <div className=\"nav nav-pills flex-column left_nav\">\r\n                                <a className=\"logoHolder\" href=\"/\">\r\n                                    <img className=\"logo img-fluid\" src={logo_to_show} alt=\"boutaleb.\" />\r\n                                </a>\r\n                                <ul className=\"settings_dashboard\">\r\n                                    <li><a href=\"#1a\" className=\"nav_link active\" data-toggle=\"tab\"><i className=\"fas fa-th-large\"></i>Dashboard</a></li>\r\n                                    <li><a href=\"#3a\" className=\"nav_link\" data-toggle=\"tab\"><i className=\"far fa-bell\"></i>Notifications</a></li>\r\n                                    <li><a href=\"#4a\" className=\"nav_link\" data-toggle=\"tab\"><i className=\"fas fa-chart-line\"></i>Analytics</a></li>\r\n                                    <li><a href=\"#2a\" className=\"nav_link\" data-toggle=\"tab\"><i className=\"fas fa-sliders-h\"></i>Settings</a></li>\r\n                                    <li><a href=\"# \" className=\"nav_link logout\" onClick={() => this.disconnect()}><i className=\"fas fa-sign-out-alt\"></i>Logout.</a></li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"nav nav-pills flex-column right_nav\">\r\n                                <div className=\"nav_header\">\r\n                                    <div className=\"profile_picture\"></div>\r\n                                </div>\r\n                                <div className=\"card _main\">\r\n                                    <div className=\"header_text\">\r\n                                        <span>{_.isEmpty(_user.roles) ? 'Reader' : _.map(_user.roles, (r) => { return <p key={r}>{r}</p>; })}</span>\r\n                                        <h5>{_user.username}</h5>\r\n                                        <h6>{_user.email}</h6>\r\n                                    </div>\r\n                                    <div className=\"user_analytics\">\r\n                                        <div className=\"articles\">\r\n                                            <span>{_.size(_.filter(articles, (_a) => { return _user.username === _a.author }))}</span>\r\n                                            <span>Articles</span>\r\n                                        </div>\r\n                                        <div className=\"likes\">\r\n                                            <span>\r\n                                                {\r\n                                                    _.sum(_.map(_.filter(articles, (_a) => { return _user.username === _a.author }), (_a) => {\r\n                                                        return _.size(_a.upvotes)\r\n                                                    }))\r\n                                                }\r\n                                            </span>\r\n                                            <span>Likes</span>\r\n                                        </div>\r\n                                        <div className=\"comments\">\r\n                                            <span>\r\n                                                {\r\n                                                    _.sum(_.map(_.filter(articles, (_a) => { return _user.username === _a.author }), (_a) => {\r\n                                                        return _.size(_a.comment)\r\n                                                    }))\r\n                                                }\r\n                                            </span>\r\n                                            <span>Comments</span>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"latest_notifications\">\r\n                                        <h6>Notifications</h6>\r\n                                        <ul className=\"notifications_list\">\r\n                                            {\r\n                                                _.take(_.orderBy(_.filter(notifications, (_n) => { return _.includes(_user.roles, 'admin') || (_n.type != 'User Deleted' && _n.type != 'User Account Created' && _n.type != 'Account verified' && _n.type != 'User Account Updated') }), ['createdAt'], ['desc']), 4).map((_notification, index) => {\r\n                                                    return (\r\n                                                        <li key={index} className={`notif_card notif_anchor`}>\r\n                                                            <p data-th=\"New\" className=\"New\">{moment(new Date(_notification.createdAt)).fromNow()}</p>\r\n                                                            <span className=\"notif_info\">\r\n                                                                <p data-th=\"Type\" className={`type ${_notification.type == 'User Deleted' ? 'user_deleted' : ''}`}>{_notification.type}</p>\r\n                                                                <p data-th=\"Date\" className=\"Date\">{moment(_notification.createdAt).format(\"dddd MMM, Do\")}</p>\r\n                                                            </span>\r\n                                                        </li>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                                {/* <div className=\"card\">\r\n                                    <div className=\"card__content\">\r\n                                        <div className=\"_calendar_pane _pane\">\r\n                                            <div className=\"_calendar_content _content\">\r\n                                                <Calendar NOTIFICATIONS={notifications}/>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"_byPopularity_pane _pane\">\r\n                                            <div className=\"_byPopularity_content\">\r\n                                                <div className=\"canvas_header\">\r\n                                                    <h6>Popularity</h6>\r\n                                                </div>\r\n                                                <div className=\"canvas\">\r\n                                                    <canvas id=\"_byPopularity_chart\"></canvas>\r\n                                                </div>\r\n                                                <div className=\"description\">\r\n                                                    <h5> { 100 - _.round((_.size(_comments_c) + _.size(_upvotes_c))*100/_.size(_views_c)) } % </h5>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div> */}\r\n                                <div className=\"copyright\">\r\n                                    <i className=\"far fa-copyright\"></i>\r\n                                    <span>{moment().format('YYYY')}</span> - With <i className=\"fas fa-heart\"></i> from Zakariae boutaleb.\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"tab-content clearfix\">\r\n                                <div className=\"dashboard_pane tab-pane active\" id=\"1a\">\r\n                                    <ul className=\"cards\">\r\n                                        <li className=\"cards__item byCategory__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_byCategory_pane _pane\">\r\n                                                        <div className=\"_byCategory_content _content _tops\">\r\n                                                            <div className=\"canvas\">\r\n                                                                <canvas id=\"_byCategory_chart\"></canvas>\r\n                                                            </div>\r\n                                                            <div className=\"description\">\r\n                                                                <h5>\r\n                                                                    {\r\n                                                                        _.reduce(_.filter(articles, (_a) => { return _user.username === _a.author }), (_views, _a) => {\r\n                                                                            return _views + _.size(_a.view);\r\n                                                                        }, 0)\r\n                                                                    }\r\n                                                                </h5>\r\n                                                                <p>Views per categories.</p>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n                                        <li className=\"cards__item byView__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_byView_pane _pane\">\r\n                                                        <div className=\"_byView_content _content _tops\">\r\n                                                            <div className=\"canvas\">\r\n                                                                <canvas id=\"_byView_chart\"></canvas>\r\n                                                            </div>\r\n                                                            <div className=\"description\">\r\n                                                                <h5>\r\n                                                                    {\r\n                                                                        _.reduce(_.take(_.orderBy(_.filter(articles, (_a) => { return _user.username === _a.author }), ['view'], ['desc']), 5), (_views, _a) => {\r\n                                                                            return _views + _.size(_a.view);\r\n                                                                        }, 0)\r\n                                                                    }\r\n                                                                </h5>\r\n                                                                <p>Top 5 articles viewed.</p>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n                                        <li className=\"cards__item byUpvote__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_byUpvote_pane _pane\">\r\n                                                        <div className=\"_byUpvote_content _content _tops\">\r\n                                                            <div className='canvas'>\r\n                                                                <canvas id=\"_byUpvote_chart\"></canvas>\r\n                                                            </div>\r\n                                                            <div className=\"description\">\r\n                                                                <h5>\r\n                                                                    {\r\n                                                                        _.reduce(_.take(_.orderBy(_.filter(articles, (_a) => { return _user.username === _a.author }), ['upvotes'], ['desc']), 5), (_upvotes, _a) => {\r\n                                                                            return _upvotes + _.size(_a.upvotes);\r\n                                                                        }, 0)\r\n                                                                    }\r\n                                                                </h5>\r\n                                                                <p>Top 5 articles liked.</p>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n                                        <li className=\"cards__item byComment__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_byComment_pane _pane\">\r\n                                                        <div className=\"_byComment_content _content _tops\">\r\n                                                            <div className='canvas'>\r\n                                                                <canvas id=\"_byComment_chart\"></canvas>\r\n                                                            </div>\r\n                                                            <div className=\"description\">\r\n                                                                <h5>\r\n                                                                    {\r\n                                                                        _.reduce(_.take(_.orderBy(_.filter(articles, (_a) => { return _user.username === _a.author }), ['comment'], ['desc']), 5), (_comments, _a) => {\r\n                                                                            return _comments + _.size(_a.comment);\r\n                                                                        }, 0)\r\n                                                                    }\r\n                                                                </h5>\r\n                                                                <p>Top 5 articles commented.</p>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n\r\n                                        <li className=\"cards__item articles__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_articles_pane _pane\">\r\n                                                        <div className=\"_articles_header _header\">\r\n                                                            <div className=\"_header_title\">\r\n                                                                <label id=\"title_label\" htmlFor='title' className={title ? 'active' : ''}>Search</label>\r\n                                                                <div className=\"card__title\">Articles</div>\r\n                                                            </div>\r\n                                                            <div className=\"dropdown\">\r\n                                                                <span className=\"dropdown-toggle\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                                    <i className=\"fas fa-ellipsis-h\"></i>\r\n                                                                </span>\r\n                                                                <div className=\"dropdown-menu _filter_form\" aria-labelledby=\"dropdownMenuButton\">\r\n                                                                    <button className=\"dropdown-item show_more _show_articles btn-primary\" id='_article_modal_trigger' data-toggle=\"modal\" data-target=\"#_all_article_modal_view\"><i className=\"fas fa-expand-arrows-alt\"></i></button>\r\n                                                                    {(() => {\r\n                                                                        if (!_.isEmpty(_user.roles)) {\r\n                                                                            return (\r\n                                                                                <button className=\"dropdown-item add _add_article btn-primary\" data-toggle=\"modal\" data-target=\"#_article_modal\" onClick={() => this.handleAddArticle()}><i className=\"fas fa-plus\"></i></button>\r\n                                                                            )\r\n                                                                        }\r\n                                                                    })()}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"title_search input-field\">\r\n                                                                <Autocomplete\r\n                                                                    items={_.map(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), 'title')}\r\n                                                                    getItemValue={(item) => item}\r\n                                                                    inputProps={{ id: 'title', className: 'form-group-input title', name: 'title' }}\r\n                                                                    shouldItemRender={(item, title) => item.toLowerCase().indexOf(title.toLowerCase()) > -1}\r\n                                                                    renderItem={(item, isHighlighted) =>\r\n                                                                        <div className={`item ${isHighlighted ? 'item-highlighted' : ''}`}>\r\n                                                                            {item}\r\n                                                                        </div>\r\n                                                                    }\r\n                                                                    value={title}\r\n                                                                    onChange={(ev) => this.setState({ title: ev.target.value })}\r\n                                                                    onSelect={(title) => this.setState({ title })}\r\n                                                                />\r\n                                                                <label id=\"title_label\" htmlFor='title' className={title ? 'active' : ''}>Title</label>\r\n                                                                <div className='form-group-line'></div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className=\"_articles_content _content\">\r\n                                                            <div className=\"_articles_data data-container\">\r\n                                                                <div className=\"articles_slider_wrapper swiper-container\">\r\n                                                                    <div className=\"articles_slider_wrapper_cards swiper-wrapper\">\r\n                                                                        {\r\n                                                                            _.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['createdAt'], ['desc']) : _.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author })), function (o) {\r\n                                                                                if (timeframe === 'Today')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'd');\r\n                                                                                if (timeframe === 'This_Past_Week')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                                                if (timeframe === 'This_Past_Month')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                                                if (timeframe === 'This_Past_Year')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                                                if (timeframe === 'All_Time')\r\n                                                                                    return true;\r\n                                                                            }), (op) => {\r\n                                                                                if (!categorie)\r\n                                                                                    return true;\r\n                                                                                else\r\n                                                                                    return op.categorie === categorie;\r\n                                                                            }), (op_byTitle) => {\r\n                                                                                if (!title)\r\n                                                                                    return true;\r\n                                                                                else\r\n                                                                                    return _.split(_.lowerCase(title), ' ').some(_t => _.lowerCase(op_byTitle.title).includes(_t));\r\n                                                                            }).map((article, index) => {\r\n                                                                                return (\r\n                                                                                    <div className=\"articles_slider_wrapper_cards_item swiper-slide\" data-name={moment(article.createdAt).format(\"YYYY Do MM\")} id=\"articles_slider_wrapper_cards_item\" key={index}>\r\n                                                                                        <div className='article_item swiper-slide_item'>\r\n                                                                                            <div className={\"col card card_\" + index} data-title={_.snakeCase(article.title)} data-index={_.add(index, 1)}>\r\n                                                                                                <div className=\"card-body\">\r\n                                                                                                    <div className=\"comments_up_down\">\r\n                                                                                                        <p className=\"text-muted views\"><b>{_.size(article.view)}</b><i className=\"fas fa-eye\"></i></p>\r\n                                                                                                        <p className=\"text-muted comments\"><b>{_.size(article.comment)}</b> <i className=\"fas fa-comment-alt\"></i></p>\r\n                                                                                                        <p className=\"text-muted upvotes\"><b>{_.size(article.upvotes)}</b> <i className=\"fas fa-thumbs-up\"></i></p>\r\n                                                                                                        <p className=\"text-muted downvotes\"><b>{_.size(article.downvotes)}</b> <i className=\"fas fa-thumbs-down\"></i></p>\r\n                                                                                                    </div>\r\n\r\n                                                                                                    <div className=\"_categorie_dropdown\">\r\n                                                                                                        <p className=\"categorie\">{article.categorie}</p>\r\n                                                                                                        <p className=\"categorie\"><i className={article._hide ? 'far fa-eye-slash' : 'far fa-eye'}></i></p>\r\n                                                                                                        <div className=\"dropdown\">\r\n                                                                                                            <span className=\"dropdown-toggle\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                                                                                <i className=\"fas fa-ellipsis-h\"></i>\r\n                                                                                                            </span>\r\n                                                                                                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                                                                                                                {(() => {\r\n                                                                                                                    if (_.includes(_user.roles, 'admin') || _user.username === article.author) {\r\n                                                                                                                        return (\r\n                                                                                                                            <>\r\n                                                                                                                                <a href=\"# \" className=\"dropdown-item edit\" data-toggle=\"modal\" data-target=\"#_article_modal\" onClick={() => this.handleEditArticle(article)}><i className=\"fas fa-edit\"></i></a>\r\n                                                                                                                                <a href=\"# \" className=\"dropdown-item delete\" onClick={() => this.handleDeleteArticle(article._id)}><i className=\"far fa-trash-alt\"></i></a>\r\n                                                                                                                            </>\r\n                                                                                                                        )\r\n                                                                                                                    }\r\n                                                                                                                })()}\r\n                                                                                                                <a href=\"# \" className=\"dropdown-item _view\" onClick={() => { this.setState({ _article: article }); }} data-id={article._id} data-toggle=\"modal\" data-target=\"#_article_modal_view\"><i className=\"fas fa-expand-alt\"></i></a>\r\n                                                                                                            </div>\r\n                                                                                                        </div>\r\n                                                                                                    </div>\r\n\r\n                                                                                                    <h2>{article.title}</h2>\r\n                                                                                                    <p className=\"text-muted author\">by <b>{article.author}</b>, {moment(new Date(article.createdAt)).fromNow()}</p>\r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n                                        <li className=\"cards__item projects__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_projects_pane _pane\">\r\n                                                        <div className=\"_projects_header _header\">\r\n                                                            <div className=\"_header_title\">\r\n                                                                <label id=\"title_projects_label\" htmlFor='title_projects' className={title_projects ? 'active' : ''}>Search</label>\r\n                                                                <div className=\"card__title\">Projects</div>\r\n                                                            </div>\r\n                                                            <div className=\"dropdown\">\r\n                                                                <span className=\"dropdown-toggle\" id=\"dropdownMenuButton_projects\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                                    <i className=\"fas fa-ellipsis-h\"></i>\r\n                                                                </span>\r\n                                                                <div className=\"dropdown-menu _filter_form\" aria-labelledby=\"dropdownMenuButton_projects\">\r\n                                                                    <button className=\"dropdown-item show_more _show_projects btn-primary\" id='_project_modal_trigger' data-toggle=\"modal\" data-target=\"#_all_project_modal_view\"><i className=\"fas fa-expand-arrows-alt\"></i></button>\r\n                                                                    {(() => {\r\n                                                                        if (_.includes(_user.roles,)) {\r\n                                                                            return (\r\n                                                                                <button className=\"dropdown-item add _add_project btn-primary\" data-toggle=\"modal\" data-target=\"#_project_modal\" onClick={() => this.handleAddProject()}><i className=\"fas fa-plus\"></i></button>\r\n                                                                            )\r\n                                                                        }\r\n                                                                    })()}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"title_search input-field\">\r\n                                                                <Autocomplete\r\n                                                                    items={_.map(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), 'title')}\r\n                                                                    getItemValue={(item) => item}\r\n                                                                    inputProps={{ id: 'title_projects', className: 'form-group-input title_projects', name: 'title_projects', autoComplete: \"off\" }}\r\n                                                                    shouldItemRender={(item, title_projects) => item.toLowerCase().indexOf(title_projects.toLowerCase()) > -1}\r\n                                                                    renderItem={(item, isHighlighted) =>\r\n                                                                        <div className={`item ${isHighlighted ? 'item-highlighted' : ''}`}>\r\n                                                                            {item}\r\n                                                                        </div>\r\n                                                                    }\r\n                                                                    value={title_projects}\r\n                                                                    onChange={(ev) => this.setState({ title_projects: ev.target.value })}\r\n                                                                    onSelect={(title_projects) => this.setState({ title_projects })}\r\n                                                                />\r\n                                                                <label id=\"title_projects_label\" htmlFor='title_projects' className={title_projects ? 'active' : ''}>Title</label>\r\n                                                                <div className='form-group-line'></div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className=\"_projects_content _content\">\r\n                                                            <div className=\"_projects_data data-container\">\r\n                                                                <div className=\"projects_slider_wrapper swiper-container\">\r\n                                                                    <div className=\"projects_slider_wrapper_cards swiper-wrapper\">\r\n                                                                        {\r\n                                                                            _.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['createdAt'], ['desc']) : _.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author })), function (o) {\r\n                                                                                if (timeframe === 'Today')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'd');\r\n                                                                                if (timeframe === 'This_Past_Week')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                                                if (timeframe === 'This_Past_Month')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                                                if (timeframe === 'This_Past_Year')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                                                if (timeframe === 'All_Time')\r\n                                                                                    return true;\r\n                                                                            }), (op) => {\r\n                                                                                if (!categorie)\r\n                                                                                    return true;\r\n                                                                                else\r\n                                                                                    return op.categorie === categorie;\r\n                                                                            }), (op_byTitle) => {\r\n                                                                                if (!title)\r\n                                                                                    return true;\r\n                                                                                else\r\n                                                                                    return _.split(_.lowerCase(title_projects), ' ').some(_t => _.lowerCase(op_byTitle.title).includes(_t));\r\n                                                                            }).map((project, index) => {\r\n                                                                                return (\r\n                                                                                    <div className=\"projects_slider_wrapper_cards_item swiper-slide\" data-name={moment(project.createdAt).format(\"YYYY Do MM\")} id=\"projects_slider_wrapper_cards_item\" key={index}>\r\n                                                                                        <div className='project_item swiper-slide_item'>\r\n                                                                                            <div className={\"col card card_\" + index} data-title={_.snakeCase(project.title)} data-index={_.add(index, 1)}>\r\n                                                                                                <div className=\"card-body\">\r\n\r\n                                                                                                    <div className=\"_categorie_dropdown\">\r\n                                                                                                        <p className=\"categorie\"><i className={project._hide ? 'far fa-eye-slash' : 'far fa-eye'}></i></p>\r\n                                                                                                        <div className=\"dropdown\">\r\n                                                                                                            <span className=\"dropdown-toggle\" id=\"dropdownMenuButton_project\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                                                                                <i className=\"fas fa-ellipsis-h\"></i>\r\n                                                                                                            </span>\r\n                                                                                                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton_project\">\r\n                                                                                                                {(() => {\r\n                                                                                                                    if (_.includes(_user.roles, 'admin') || _user.username === project.author) {\r\n                                                                                                                        return (\r\n                                                                                                                            <>\r\n                                                                                                                                <a href=\"# \" className=\"dropdown-item edit\" data-toggle=\"modal\" data-target=\"#_project_modal\" onClick={() => this.handleEditProject(project)}><i className=\"fas fa-edit\"></i></a>\r\n                                                                                                                                <a href=\"# \" className=\"dropdown-item delete\" onClick={() => this.handleDeleteProject(project._id)}><i className=\"far fa-trash-alt\"></i></a>\r\n                                                                                                                            </>\r\n                                                                                                                        )\r\n                                                                                                                    }\r\n                                                                                                                })()}\r\n                                                                                                                <a className=\"dropdown-item _view\" href={project.link_to} target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fas fa-expand-alt\"></i></a>\r\n                                                                                                            </div>\r\n                                                                                                        </div>\r\n                                                                                                    </div>\r\n\r\n                                                                                                    <h2>{project.title}</h2>\r\n                                                                                                    <p className=\"text-muted author\">by <b>{project.author}</b>, {moment(new Date(project.createdAt)).fromNow()}</p>\r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n                                        <li className=\"cards__item byViewFollow__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_byViewFollow_pane _pane\">\r\n                                                        <div className=\"_byViewFollow_content _content _line_chart\">\r\n                                                            <div className=\"_byViewFollow_head\">\r\n                                                                <h6>Articles views.</h6>\r\n                                                            </div>\r\n                                                            <div className=\"_byViewFollow_data\">\r\n                                                                <div className='canvas'>\r\n                                                                    <canvas id=\"_byViewFollow_chart\"></canvas>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n                                        <li className=\"cards__item testimonies__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_testimonies_pane _pane\">\r\n                                                        <div className=\"_testimonies_content _content\">\r\n                                                            <div className=\"_testimonies_head\">\r\n                                                                <h6>Testimonies</h6>\r\n                                                                <div className=\"dropdown\">\r\n                                                                    <span className=\"dropdown-toggle\" id=\"dropdownMenuButton_testimonies\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                                        <i className=\"fas fa-ellipsis-h\"></i>\r\n                                                                    </span>\r\n                                                                    <div className=\"dropdown-menu _filter_form\" aria-labelledby=\"dropdownMenuButton_testimonies\">\r\n                                                                        <button className=\"dropdown-item show_more _show_testimonies btn-primary\" id='_testimony_modal_trigger' data-toggle=\"modal\" data-target=\"#_all_testimony_modal_view\"><i className=\"fas fa-expand-arrows-alt\"></i></button>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"_testimonies_data data-container\">\r\n                                                                <div className=\"testimonies_slider_wrapper swiper-container\">\r\n                                                                    <div className=\"testimonies_slider_wrapper_cards swiper-wrapper\">\r\n                                                                        {\r\n                                                                            _.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['createdAt'], ['desc']) : _.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') })), function (o) {\r\n                                                                                if (timeframe === 'Today')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'd');\r\n                                                                                if (timeframe === 'This_Past_Week')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                                                if (timeframe === 'This_Past_Month')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                                                if (timeframe === 'This_Past_Year')\r\n                                                                                    return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                                                if (timeframe === 'All_Time')\r\n                                                                                    return true;\r\n                                                                            })).map((testimony, index) => {\r\n                                                                                return (\r\n                                                                                    <div className=\"testimonies_slider_wrapper_cards_item swiper-slide\" data-name={moment(testimony.createdAt).format(\"YYYY Do MM\")} id=\"testimonies_slider_wrapper_cards_item\" key={index}>\r\n                                                                                        <div className={`testimony_item swiper-slide_item ${!testimony.is_private ? '' : 'is_private'}`}>\r\n                                                                                            <div className={\"col card card_testimonies card_\" + index} data-title={_.snakeCase(testimony.title)} data-index={_.add(index, 1)}>\r\n                                                                                                <div className=\"card-body\">\r\n                                                                                                    <div className=\"_heads_up\">\r\n                                                                                                        <div className=\"intel\">\r\n                                                                                                            <p className=\"text-muted author\">by </p>\r\n                                                                                                            <p className=\"text-muted author\">{testimony.author}</p>\r\n                                                                                                            <p className=\"text-muted author\">{moment(new Date(testimony.createdAt)).fromNow()}</p>\r\n                                                                                                        </div>\r\n                                                                                                        <div className=\"dropdown\">\r\n                                                                                                            <span className=\"dropdown-toggle\" id=\"dropdownMenuButton_testimonies\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                                                                                <i className=\"fas fa-ellipsis-h\"></i>\r\n                                                                                                            </span>\r\n                                                                                                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton_testimonies\">\r\n                                                                                                                {(() => {\r\n                                                                                                                    if (_.includes(_user.roles, 'admin') || _user.username === testimony.author) {\r\n                                                                                                                        return (\r\n                                                                                                                            <a href=\"# \" className=\"dropdown-item delete\" onClick={() => this.handleDeleteTestimony(testimony._id)}><i className=\"far fa-trash-alt\"></i></a>\r\n                                                                                                                        )\r\n                                                                                                                    }\r\n                                                                                                                })()}\r\n                                                                                                                <a href=\"# \" className=\"dropdown-item _view\" onClick={() => { this.setState({ _testimony: testimony }); }} data-id={testimony._id} data-toggle=\"modal\" data-target=\"#_testimony_modal\"><i className=\"fas fa-expand-alt\"></i></a>\r\n                                                                                                            </div>\r\n                                                                                                        </div>\r\n                                                                                                    </div>\r\n                                                                                                    <div className=\"_testy_body\">\r\n                                                                                                        <h6>{testimony.body}</h6>\r\n                                                                                                    </div>\r\n                                                                                                    <div className=\"comments_up_down\">\r\n                                                                                                        <p className=\"text-muted views\"><b>{_.size(testimony.view)}</b><i className=\"fas fa-eye\"></i></p>\r\n\r\n                                                                                                        <p className=\"text-muted replies\"><b>{_.size(_.filter(testimonies, { 'parent_id': testimony._id }))}</b><i className=\"fas fa-reply-all\"></i></p>\r\n                                                                                                        <p className={`text-muted upvotes ${_.isUndefined(_.find(_.get(testimony, 'upvotes'), (upvote) => { return upvote.upvoter === _user.fingerprint })) ? '' : 'active'}`}><b>{_.size(testimony.upvotes)}</b><i className=\"fas fa-thumbs-up\"></i></p>\r\n                                                                                                        <p className={`text-muted downvotes ${_.isUndefined(_.find(_.get(testimony, 'downvotes'), (downvote) => { return downvote.downvoter === _user.fingerprint })) ? '' : 'active'}`}><b>{_.size(testimony.downvotes)}</b><i className=\"fas fa-thumbs-down\"></i></p>\r\n                                                                                                    </div>\r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                    <div className=\"testimonies_slider_scrollbar swiper-scrollbar\"></div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"settings_pane tab-pane\" id=\"2a\">\r\n                                    <div className=\"top_roof\">\r\n                                        <div className=\"left_roof\">\r\n                                            <h2>Settings</h2>\r\n                                        </div>\r\n                                    </div>\r\n                                    <ul className=\"forms\">\r\n                                        <li className=\"forms__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_account_pane _pane\">\r\n                                                        <div className=\"_account_content _content\">\r\n                                                            <div className=\"_account_head\">\r\n                                                                <h4>Account Settings.</h4>\r\n                                                                <p className=\"text-muted\">Here you can change the email address you use and password</p>\r\n                                                            </div>\r\n                                                            <div className=\"_account_data data_container\">\r\n                                                                <Account />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n                                        <li className=\"forms__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_accoutns_pane _pane\">\r\n                                                        <div className=\"_accounts_content _content\">\r\n                                                            <div className=\"_accounts_head\">\r\n                                                                <h4>Accounts.</h4>\r\n                                                            </div>\r\n                                                            <div className=\"_accounts_data data_container\">\r\n                                                                <table className=\"accounts_list table table-striped\">\r\n                                                                    <thead>\r\n                                                                        <tr className=\"accounts_list_header\">\r\n                                                                            <th>Username</th>\r\n                                                                            <th>Email</th>\r\n                                                                            <th>Fingerprint</th>\r\n                                                                            <th>Created At</th>\r\n                                                                            <th>Roles</th>\r\n                                                                            <th>Verified</th>\r\n                                                                            <th className=\"_empty\"></th>\r\n                                                                        </tr>\r\n                                                                    </thead>\r\n                                                                    <tbody>\r\n                                                                        {\r\n                                                                            _.orderBy(_users, ['createdAt'], ['desc']).map((_u, index) => {\r\n                                                                                return (\r\n                                                                                    <>\r\n                                                                                        <tr className=\"spacer\"></tr>\r\n                                                                                        <tr key={index} className={`user_card user_anchor ${_u._id === _user._id ? 'active' : ''}`}>\r\n                                                                                            <td data-th=\"Username\">{_u.username}</td>\r\n                                                                                            <td data-th=\"Email\">{_u.email}</td>\r\n                                                                                            <td data-th=\"Fingerprint\">{_u.fingerprint}</td>\r\n                                                                                            <td data-th=\"Created\">{moment(_u.createdAt).format('dddd, MMM Do YYYY')}</td>\r\n                                                                                            <td data-th=\"Roles\">{_.isEmpty(_u.roles) ? 'Reader' : _.map(_u.roles, (r) => { return <p key={r}>{r}</p>; })}</td>\r\n                                                                                            <td data-th=\"Verified\">{_u.isVerified ? 'Verified' : 'Not Verified'}</td>\r\n                                                                                            <td className=\"dropdown\">\r\n                                                                                                <span className=\"dropdown-toggle\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                                                                    <i className=\"fas fa-ellipsis-h\"></i>\r\n                                                                                                </span>\r\n                                                                                                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                                                                                                    {(() => {\r\n                                                                                                        if (_.includes(_user.roles, 'admin')) {\r\n                                                                                                            return (\r\n                                                                                                                <a className=\"dropdown-item\" href=\"# \" data-toggle=\"modal\" data-target=\"#_user_modal\" onClick={() => this.handleEditUser(_u)}><i className=\"fas fa-edit\"></i></a>\r\n                                                                                                            )\r\n                                                                                                        }\r\n                                                                                                    })()}\r\n                                                                                                    <a className=\"dropdown-item\" href=\"# \" onClick={() => this.handleDeleteUser(_u)}><i className=\"far fa-trash-alt\"></i></a>\r\n                                                                                                </div>\r\n                                                                                            </td>\r\n                                                                                        </tr>\r\n                                                                                    </>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n                                                                    </tbody>\r\n                                                                </table>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"notifications_pane tab-pane\" id=\"3a\">\r\n                                    <ul className=\"forms\">\r\n                                        <li className=\"forms__item\">\r\n                                            <div className=\"card\">\r\n                                                <div className=\"card__content\">\r\n                                                    <div className=\"_notifs_pane _pane\">\r\n                                                        <div className=\"_notifs_content _content\">\r\n                                                            <div className=\"_notifs_head\">\r\n                                                                <h4>Notification history.</h4>\r\n                                                            </div>\r\n                                                            <div className=\"_notifs_data data_container\">\r\n                                                                <ul className=\"notifs_list table table-striped\">\r\n                                                                    {\r\n                                                                        _.orderBy(_.filter(notifications, (_n) => { return _.includes(_user.roles, 'admin') || (_n.type != 'User Deleted' && _n.type != 'User Account Created' && _n.type != 'Account verified' && _n.type != 'User Account Updated') }), ['createdAt'], ['desc']).map((_notification, index) => {\r\n                                                                            return (\r\n                                                                                <li key={index} className={`notif_card notif_anchor`}>\r\n                                                                                    <div className=\"notif_info\">\r\n                                                                                        <div className=\"delete\">\r\n                                                                                            <i className=\"far fa-trash-alt\"></i>\r\n                                                                                        </div>\r\n                                                                                        <span>\r\n                                                                                            <p data-th=\"New\" className=\"New\">{moment(new Date(_notification.createdAt)).fromNow()}</p>\r\n                                                                                        </span>\r\n                                                                                        <span>\r\n                                                                                            <p data-th=\"Type\" className={`Type ${_notification.type == 'User Deleted' ? 'user_deleted' : ''}`}>{_notification.type}</p>\r\n                                                                                            <p data-th=\"Description\" className=\"Description\">{_notification.description}</p>\r\n                                                                                        </span>\r\n                                                                                        <span>\r\n                                                                                            <p data-th=\"Time\" className=\"Time\">{moment(_notification.createdAt).format('HH:mm')}</p>\r\n                                                                                            <p data-th=\"Date\" className=\"Date\">{moment(_notification.createdAt).format(\"dddd, MMM Do\")}</p>\r\n                                                                                        </span>\r\n                                                                                    </div>\r\n                                                                                </li>\r\n                                                                            )\r\n                                                                        })\r\n                                                                    }\r\n                                                                </ul>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"analytics_pane tab-pane\" id=\"4a\">\r\n                                    <div className=\"top_roof\">\r\n                                        <div className=\"left_roof\">\r\n                                            <h2>Analytics</h2>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"_article_modal modal _modal fade\" id=\"_article_modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"_article_modalLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <a href=\"# \" title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                            <Form />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"_article_modal_view modal _modal fade\" id=\"_article_modal_view\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"_article_modal_viewLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <a href=\"# \" title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                            <div className=\"card\">\r\n                                                <div className=\"shadow_title\">{_.head(_.words(_article.body))}</div>\r\n                                                <div className=\"card-body\">\r\n                                                    <div className=\"top_row\">\r\n                                                        <h6 className=\"author\">by <b>{_article.author}</b></h6>\r\n                                                        <p className=\"text-muted fromNow\">{moment(new Date(_article.createdAt)).fromNow()}</p>\r\n                                                        <i className=\"fas fa-circle dot\"></i>\r\n                                                        <p className=\"text-muted views\"><i className={_article._hide ? 'far fa-eye-slash' : 'far fa-eye'}></i><b>{_article._hide ? 'Not Visible to audience.' : 'Visible to audience.'}</b></p>\r\n                                                        <div className=\"up_down\">\r\n                                                            <p className=\"text-muted comments\"><b>{_.size(_article.view)}</b><i className=\"fas fa-eye\"></i></p>\r\n                                                            <p className=\"text-muted comments\"><b>{_.size(_.get(_article, 'comment'))}</b><i className=\"fas fa-comment-alt\"></i></p>\r\n                                                            <div className={`text-muted upvotes ${_.isUndefined(_.find(_.get(_article, 'upvotes'), (upvote) => { return upvote.upvoter === _user.fingerprint })) ? '' : 'active'}`}>\r\n                                                                <b>{_.size(_.get(_article, 'upvotes'))}</b>\r\n                                                                <i className=\"fas fa-thumbs-up\"></i>\r\n                                                            </div>\r\n                                                            <div className={`text-muted downvotes ${_.isUndefined(_.find(_.get(_article, 'downvotes'), (downvote) => { return downvote.downvoter === _user.fingerprint })) ? '' : 'active'}`}>\r\n                                                                <b>{_.size(_.get(_article, 'downvotes'))}</b>\r\n                                                                <i className=\"fas fa-thumbs-down\"></i>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"middle_row\">\r\n                                                        <h6 className=\"text-muted body body_article\">\r\n                                                            {\r\n                                                                this.handleJSONTOHTML(_article.body)\r\n                                                            }\r\n                                                        </h6>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"_all_article_modal_view _all_view modal _modal fade\" id=\"_all_article_modal_view\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"_all_article_modal_viewLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <div className=\"modal-top\">\r\n                                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                                                    Showing&nbsp;\r\n                                                    <strong>{((currentPage * todosPerPage) - todosPerPage) + 1}</strong>\r\n                                                    &nbsp;to&nbsp;\r\n                                                    <strong>{((currentPage * todosPerPage) - todosPerPage) + _.toNumber(_.size(_.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['comment'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : sort === 'Trending' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['view'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : sort === 'Most_Likes' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['upvotes'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : sort === 'Recent' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['createdAt'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : _.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author })), function (o) {\r\n                                                    if (timeframe === 'Today')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'day');\r\n                                                    if (timeframe === 'This_Past_Week')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                    if (timeframe === 'This_Past_Month')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                    if (timeframe === 'This_Past_Year')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                    if (timeframe === 'All_Time')\r\n                                                        return true;\r\n                                                }), (op) => {\r\n                                                    if (!categorie)\r\n                                                        return true;\r\n                                                    else\r\n                                                        return op.categorie === categorie;\r\n                                                }), (op_bytag) => {\r\n                                                    if (!tags)\r\n                                                        return true;\r\n                                                    else\r\n                                                        return op_bytag.tag.some(x => _.split(_.lowerCase(tags), ' ').some(_s_v => _.lowerCase(x).includes(_s_v)));\r\n                                                })))}</strong>\r\n                                                    &nbsp;of&nbsp;\r\n                                                    <strong>{_.toNumber(_.size(_.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['createdAt'], ['desc']) : _.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author })), function (o) {\r\n                                                    if (timeframe === 'Today')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'day');\r\n                                                    if (timeframe === 'This_Past_Week')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                    if (timeframe === 'This_Past_Month')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                    if (timeframe === 'This_Past_Year')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                    if (timeframe === 'All_Time')\r\n                                                        return true;\r\n                                                }), (op) => {\r\n                                                    if (!categorie)\r\n                                                        return true;\r\n                                                    else\r\n                                                        return op.categorie === categorie;\r\n                                                }), (op_bytag) => {\r\n                                                    if (!tags)\r\n                                                        return true;\r\n                                                    else\r\n                                                        return op_bytag.tag.some(x => _.split(_.lowerCase(tags), ' ').some(_s_v => _.lowerCase(x).includes(_s_v)));\r\n                                                })))}\r\n                                                    </strong>\r\n                                                    &nbsp;articles.\r\n                                                </h5>\r\n                                                <div>\r\n                                                    <span className=\"filter\" onClick={(event) => this.handleShowFilter(event)}><i className=\"fas fa-sliders-h\"></i></span>\r\n                                                    <a href=\"# \" title=\"Close\" className=\"modal-close\" id=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"modal-top-filter\">\r\n                                                <div className=\"input-field col s3\">\r\n                                                    <select\r\n                                                        value={sort}\r\n                                                        onChange={(ev) => this.handleChangeField('sort', ev)}\r\n                                                        className=\"form-group-input sort\"\r\n                                                        id=\"sort\"\r\n                                                        name=\"sort\"\r\n                                                    >\r\n                                                        <option value=\"Trending\">Trending</option>\r\n                                                        <option value=\"Relevant\">Relevant</option>\r\n                                                        <option value=\"Most_Liked\">Most Liked</option>\r\n                                                        <option value=\"Recent\">Recent</option>\r\n                                                    </select>\r\n                                                    <label htmlFor='sort' className={sort ? 'active' : ''}>sort</label>\r\n                                                    <div className=\"form-group-line\"></div>\r\n                                                </div>\r\n                                                <div className=\"input-field col s3\">\r\n                                                    <select\r\n                                                        value={timeframe}\r\n                                                        onChange={(ev) => this.handleChangeField('timeframe', ev)}\r\n                                                        className=\"form-group-input timeframe\"\r\n                                                        id=\"timeframe\"\r\n                                                        name=\"timeframe\"\r\n                                                    >\r\n                                                        <option value=\"Today\">Today</option>\r\n                                                        <option value=\"This_Past_Week\">This Past Week</option>\r\n                                                        <option value=\"This_Past_Month\">This Past Month</option>\r\n                                                        <option value=\"This_Past_Year\">This Past Year</option>\r\n                                                        <option value=\"All_Time\">All Time</option>\r\n                                                    </select>\r\n                                                    <label htmlFor='timeframe' className={timeframe ? 'active' : ''}>timeframe</label>\r\n                                                    <div className=\"form-group-line\"></div>\r\n                                                </div>\r\n                                                <div className=\"input-field col s3\">\r\n                                                    <select\r\n                                                        value={categorie}\r\n                                                        onChange={(ev) => this.handleChangeField('categorie', ev)}\r\n                                                        className=\"form-group-input categorie\"\r\n                                                        id=\"categorie\"\r\n                                                        name=\"categorie\"\r\n                                                    >\r\n                                                        <option value=''></option>\r\n                                                        <option value=\"Education\">Education</option>\r\n                                                        <option value=\"Design\">Design</option>\r\n                                                        <option value=\"Personnel\">Community</option>\r\n                                                        <option value=\"Tutorials\">Tutorials</option>\r\n                                                    </select>\r\n                                                    <label htmlFor='categorie' className={categorie ? 'active' : ''}>categorie</label>\r\n                                                    <div className=\"form-group-line\"></div>\r\n                                                </div>\r\n                                                <div className=\"input-field col s3\">\r\n                                                    <Autocomplete\r\n                                                        items={_.flattenDeep(_.map(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), 'tag'))}\r\n                                                        getItemValue={(item) => item}\r\n                                                        inputProps={{ id: 'tags', className: 'form-group-input tags', name: 'tags' }}\r\n                                                        shouldItemRender={(item, tags) => item.toLowerCase().indexOf(tags.toLowerCase()) > -1}\r\n                                                        renderItem={(item, isHighlighted) =>\r\n                                                            <div className={`item ${isHighlighted ? 'item-highlighted' : ''}`}>\r\n                                                                {item}\r\n                                                            </div>\r\n                                                        }\r\n                                                        value={tags}\r\n                                                        onChange={(ev) => this.setState({ tags: ev.target.value })}\r\n                                                        onSelect={(tags) => this.setState({ tags })}\r\n                                                    />\r\n                                                    <label id=\"tags_label\" htmlFor='tags' className={tags ? 'active' : ''}>tags</label>\r\n                                                    <div className='form-group-line'></div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <ul id=\"page\">\r\n                                                {\r\n                                                    _.slice(_.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['createdAt'], ['desc']) : _.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author })), function (o) {\r\n                                                        if (timeframe === 'Today')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'd');\r\n                                                        if (timeframe === 'This_Past_Week')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                        if (timeframe === 'This_Past_Month')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                        if (timeframe === 'This_Past_Year')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                        if (timeframe === 'All_Time')\r\n                                                            return true;\r\n                                                    }), (op) => {\r\n                                                        if (!categorie)\r\n                                                            return true;\r\n                                                        else\r\n                                                            return op.categorie === categorie;\r\n                                                    }), (op_bytag) => {\r\n                                                        if (!tags)\r\n                                                            return true;\r\n                                                        else\r\n                                                            return op_bytag.tag.some(x => _.split(_.lowerCase(tags), ' ').some(_s_v => _.lowerCase(x).includes(_s_v)));\r\n                                                    }), ((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)).map((article, index) => {\r\n                                                        return (\r\n                                                            <li className=\"article_card _card article_anchor\" data-name={moment(article.createdAt).format(\"YYYY Do MM\")} id=\"article_card\" key={index}>\r\n                                                                <div className={\"col card card_\" + index} data-title={_.snakeCase(article.title)} data-index={_.add(index, 1)}>\r\n                                                                    <div className=\"card-body\">\r\n                                                                        <figure>{this.handleJSONTOHTMLIMAGE(article.body, index)}</figure>\r\n                                                                        <div className=\"text\">\r\n                                                                            <div className=\"cat_drop\">\r\n                                                                                <p className=\"categorie\">{article.categorie}</p>\r\n                                                                                <p className=\"categorie\"><i className={article._hide ? 'far fa-eye-slash' : 'far fa-eye'}></i></p>\r\n                                                                                <div className=\"dropdown\">\r\n                                                                                    <span className=\"dropdown-toggle\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                                                        <i className=\"fas fa-ellipsis-h\"></i>\r\n                                                                                    </span>\r\n                                                                                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                                                                                        {(() => {\r\n                                                                                            if (_.includes(_user.roles, 'admin') || _user.username === article.author) {\r\n                                                                                                return (\r\n                                                                                                    <>\r\n                                                                                                        <a href=\"# \" className=\"dropdown-item edit\" data-toggle=\"modal\" data-target=\"#_article_modal\" onClick={() => this.handleEditArticle(article)}><i className=\"fas fa-edit\"></i></a>\r\n                                                                                                        <a href=\"# \" className=\"dropdown-item delete\" onClick={() => this.handleDeleteArticle(article._id)}><i className=\"far fa-trash-alt\"></i></a>\r\n                                                                                                    </>\r\n                                                                                                )\r\n                                                                                            }\r\n                                                                                        })()}\r\n                                                                                        <a href=\"# \" className=\"dropdown-item _view\" onClick={() => { this.setState({ _article: article }); }} data-id={article._id} data-toggle=\"modal\" data-target=\"#_article_modal_view\"><i className=\"fas fa-expand-alt\"></i></a>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                            <h4>{article.title}</h4>\r\n                                                                            <ul className=\"text-muted tags\">\r\n                                                                                {\r\n                                                                                    article.tag.map((t, i) => {\r\n                                                                                        return (\r\n                                                                                            <li key={'__' + i} className=\"tag_item\">{t}</li>\r\n                                                                                        )\r\n                                                                                    })\r\n                                                                                }\r\n                                                                            </ul>\r\n                                                                            <Link to={'#'} onClick={() => { this.setState({ _article: article }); }} data-id={article._id} data-toggle=\"modal\" data-target=\"#_article_modal_view\">\r\n                                                                                <div className=\"readmore\">\r\n                                                                                    <button data-am-linearrow=\"tooltip tooltip-bottom\" display-name=\"Read More\">\r\n                                                                                        <div className=\"line line-1\"></div>\r\n                                                                                        <div className=\"line line-2\"></div>\r\n                                                                                    </button>\r\n                                                                                </div>\r\n                                                                            </Link>\r\n                                                                            <br />\r\n                                                                            <div className=\"comments_up_down\">\r\n                                                                                <p className=\"text-muted views\"><b>{_.size(article.view)}</b><i className=\"fas fa-eye\"></i></p>\r\n                                                                                <p className=\"text-muted comments\"><b>{_.size(article.comment)}</b> <i className=\"fas fa-comment-alt\"></i></p>\r\n                                                                                <p className=\"text-muted upvotes\"><b>{_.size(article.upvotes)}</b> <i className=\"fas fa-thumbs-up\"></i></p>\r\n                                                                                <p className=\"text-muted downvotes\"><b>{_.size(article.downvotes)}</b> <i className=\"fas fa-thumbs-down\"></i></p>\r\n                                                                            </div>\r\n                                                                            <p className=\"text-muted author\">by <b>{article.author}</b>, {moment(new Date(article.createdAt)).fromNow()}</p>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </li>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </ul>\r\n                                            <ul id=\"page-numbers\">\r\n                                                {\r\n                                                    ([...Array(Math.ceil(_.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author }), ['createdAt'], ['desc']) : _.filter(articles, (_a) => { return !_a._hide || _.includes(_user.roles, 'admin') || _user.username === _a.author })), function (o) {\r\n                                                        if (timeframe === 'Today')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'day');\r\n                                                        if (timeframe === 'This_Past_Week')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                        if (timeframe === 'This_Past_Month')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                        if (timeframe === 'This_Past_Year')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                        if (timeframe === 'All_Time')\r\n                                                            return true;\r\n                                                    }), (op) => {\r\n                                                        if (!categorie)\r\n                                                            return true;\r\n                                                        else\r\n                                                            return op.categorie === categorie;\r\n                                                    }), (op_bytag) => {\r\n                                                        if (!tags)\r\n                                                            return true;\r\n                                                        else\r\n                                                            return op_bytag.tag.some(x => _.split(_.lowerCase(tags), ' ').some(_s_v => _.lowerCase(x).includes(_s_v)));\r\n                                                    }).length / todosPerPage)).keys()]).map(number => {\r\n                                                        return (\r\n                                                            <li\r\n                                                                key={number + 1}\r\n                                                                id={number + 1}\r\n                                                                onClick={this.handleClickPage}\r\n                                                                className={currentPage === number + 1 ? 'current' : ''}\r\n                                                            >\r\n                                                                <p className=\"shadow_page\">.{this._FormatNumberLength(number + 1, 2)}</p>\r\n                                                            </li>\r\n                                                        );\r\n                                                    })\r\n                                                }\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"_project_modal modal _modal fade\" id=\"_project_modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"_project_modalLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <a href=\"# \" title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                            <FormProject />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"_all_project_modal_view _all_view modal _modal fade\" id=\"_all_project_modal_view\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"_all_project_modal_viewLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <div className=\"modal-top\">\r\n                                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                                                    Showing&nbsp;\r\n                                                    <strong>{((currentPage * todosPerPage) - todosPerPage) + 1}</strong>\r\n                                                    &nbsp;to&nbsp;\r\n                                                    <strong>{((currentPage * todosPerPage) - todosPerPage) + _.toNumber(_.size(_.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['comment'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : sort === 'Trending' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['view'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : sort === 'Most_Likes' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['upvotes'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : sort === 'Recent' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['createdAt'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : _.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author })), function (o) {\r\n                                                    if (timeframe === 'Today')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'day');\r\n                                                    if (timeframe === 'This_Past_Week')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                    if (timeframe === 'This_Past_Month')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                    if (timeframe === 'This_Past_Year')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                    if (timeframe === 'All_Time')\r\n                                                        return true;\r\n                                                }), (op) => {\r\n                                                    if (!categorie)\r\n                                                        return true;\r\n                                                    else\r\n                                                        return op.categorie === categorie;\r\n                                                }), (op_bytag) => {\r\n                                                    if (!tags)\r\n                                                        return true;\r\n                                                    else\r\n                                                        return op_bytag.tag.some(x => _.split(_.lowerCase(tags), ' ').some(_s_v => _.lowerCase(x).includes(_s_v)));\r\n                                                })))}</strong>\r\n                                                    &nbsp;of&nbsp;\r\n                                                    <strong>{_.toNumber(_.size(_.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['createdAt'], ['desc']) : _.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author })), function (o) {\r\n                                                    if (timeframe === 'Today')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'day');\r\n                                                    if (timeframe === 'This_Past_Week')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                    if (timeframe === 'This_Past_Month')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                    if (timeframe === 'This_Past_Year')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                    if (timeframe === 'All_Time')\r\n                                                        return true;\r\n                                                }), (op) => {\r\n                                                    if (!categorie)\r\n                                                        return true;\r\n                                                    else\r\n                                                        return op.categorie === categorie;\r\n                                                }), (op_bytag) => {\r\n                                                    if (!tags)\r\n                                                        return true;\r\n                                                    else\r\n                                                        return op_bytag.tag.some(x => _.split(_.lowerCase(tags), ' ').some(_s_v => _.lowerCase(x).includes(_s_v)));\r\n                                                })))}\r\n                                                    </strong>\r\n                                                    &nbsp;projects.\r\n                                                </h5>\r\n                                                <div>\r\n                                                    <span className=\"filter\" onClick={(event) => this.handleShowFilter(event)}><i className=\"fas fa-sliders-h\"></i></span>\r\n                                                    <a href=\"# \" title=\"Close\" className=\"modal-close\" id=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"modal-top-filter\">\r\n                                                <div className=\"input-field col s3\">\r\n                                                    <select\r\n                                                        value={sort}\r\n                                                        onChange={(ev) => this.handleChangeField('sort', ev)}\r\n                                                        className=\"form-group-input sort\"\r\n                                                        id=\"sort\"\r\n                                                        name=\"sort\"\r\n                                                    >\r\n                                                        <option value=\"Trending\">Trending</option>\r\n                                                        <option value=\"Relevant\">Relevant</option>\r\n                                                        <option value=\"Most_Liked\">Most Liked</option>\r\n                                                        <option value=\"Recent\">Recent</option>\r\n                                                    </select>\r\n                                                    <label htmlFor='sort' className={sort ? 'active' : ''}>sort</label>\r\n                                                    <div className=\"form-group-line\"></div>\r\n                                                </div>\r\n                                                <div className=\"input-field col s3\">\r\n                                                    <select\r\n                                                        value={timeframe}\r\n                                                        onChange={(ev) => this.handleChangeField('timeframe', ev)}\r\n                                                        className=\"form-group-input timeframe\"\r\n                                                        id=\"timeframe\"\r\n                                                        name=\"timeframe\"\r\n                                                    >\r\n                                                        <option value=\"Today\">Today</option>\r\n                                                        <option value=\"This_Past_Week\">This Past Week</option>\r\n                                                        <option value=\"This_Past_Month\">This Past Month</option>\r\n                                                        <option value=\"This_Past_Year\">This Past Year</option>\r\n                                                        <option value=\"All_Time\">All Time</option>\r\n                                                    </select>\r\n                                                    <label htmlFor='timeframe' className={timeframe ? 'active' : ''}>timeframe</label>\r\n                                                    <div className=\"form-group-line\"></div>\r\n                                                </div>\r\n                                                <div className=\"input-field col s3\">\r\n                                                    <select\r\n                                                        value={categorie}\r\n                                                        onChange={(ev) => this.handleChangeField('categorie', ev)}\r\n                                                        className=\"form-group-input categorie\"\r\n                                                        id=\"categorie\"\r\n                                                        name=\"categorie\"\r\n                                                    >\r\n                                                        <option value=''></option>\r\n                                                        <option value=\"Education\">Education</option>\r\n                                                        <option value=\"Design\">Design</option>\r\n                                                        <option value=\"Personnel\">Community</option>\r\n                                                        <option value=\"Tutorials\">Tutorials</option>\r\n                                                    </select>\r\n                                                    <label htmlFor='categorie' className={categorie ? 'active' : ''}>categorie</label>\r\n                                                    <div className=\"form-group-line\"></div>\r\n                                                </div>\r\n                                                <div className=\"input-field col s3\">\r\n                                                    <Autocomplete\r\n                                                        items={_.flattenDeep(_.map(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), 'tag'))}\r\n                                                        getItemValue={(item) => item}\r\n                                                        inputProps={{ id: 'tags', className: 'form-group-input tags', name: 'tags' }}\r\n                                                        shouldItemRender={(item, tags) => item.toLowerCase().indexOf(tags.toLowerCase()) > -1}\r\n                                                        renderItem={(item, isHighlighted) =>\r\n                                                            <div className={`item ${isHighlighted ? 'item-highlighted' : ''}`}>\r\n                                                                {item}\r\n                                                            </div>\r\n                                                        }\r\n                                                        value={tags}\r\n                                                        onChange={(ev) => this.setState({ tags: ev.target.value })}\r\n                                                        onSelect={(tags) => this.setState({ tags })}\r\n                                                    />\r\n                                                    <label id=\"tags_label\" htmlFor='tags' className={tags ? 'active' : ''}>tags</label>\r\n                                                    <div className='form-group-line'></div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <ul id=\"page\">\r\n                                                {\r\n                                                    _.slice(_.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['createdAt'], ['desc']) : _.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author })), function (o) {\r\n                                                        if (timeframe === 'Today')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'd');\r\n                                                        if (timeframe === 'This_Past_Week')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                        if (timeframe === 'This_Past_Month')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                        if (timeframe === 'This_Past_Year')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                        if (timeframe === 'All_Time')\r\n                                                            return true;\r\n                                                    }), (op) => {\r\n                                                        if (!categorie)\r\n                                                            return true;\r\n                                                        else\r\n                                                            return op.categorie === categorie;\r\n                                                    }), (op_bytag) => {\r\n                                                        if (!tags)\r\n                                                            return true;\r\n                                                        else\r\n                                                            return op_bytag.tag.some(x => _.split(_.lowerCase(tags), ' ').some(_s_v => _.lowerCase(x).includes(_s_v)));\r\n                                                    }), ((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)).map((project, index) => {\r\n                                                        return (\r\n                                                            <li className=\"project_card _card project_anchor\" data-name={moment(project.createdAt).format(\"YYYY Do MM\")} id=\"project_card\" key={index}>\r\n                                                                <div className={\"col card card_\" + index} data-title={_.snakeCase(project.title)} data-index={_.add(index, 1)}>\r\n                                                                    <div className=\"card-body\">\r\n                                                                        <figure>{this.handleJSONTOHTMLIMAGE(project.body, index)}</figure>\r\n                                                                        <div className=\"text\">\r\n                                                                            <div className=\"cat_drop\">\r\n                                                                                <h4>{project.title}</h4>\r\n                                                                                <div className=\"dropdown\">\r\n                                                                                    <span className=\"dropdown-toggle\" id=\"dropdownMenuButton_project\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                                                        <i className=\"fas fa-ellipsis-h\"></i>\r\n                                                                                    </span>\r\n                                                                                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton_project\">\r\n                                                                                        {(() => {\r\n                                                                                            if (_.includes(_user.roles, 'admin') || _user.username === project.author) {\r\n                                                                                                return (\r\n                                                                                                    <>\r\n                                                                                                        <a href=\"# \" className=\"dropdown-item edit\" data-toggle=\"modal\" data-target=\"#_project_modal\" onClick={() => this.handleEditProject(project)}><i className=\"fas fa-edit\"></i></a>\r\n                                                                                                        <a href=\"# \" className=\"dropdown-item delete\" onClick={() => this.handleDeleteProject(project._id)}><i className=\"far fa-trash-alt\"></i></a>\r\n                                                                                                    </>\r\n                                                                                                )\r\n                                                                                            }\r\n                                                                                        })()}\r\n                                                                                        <a className=\"dropdown-item _view\" href={project.link_to} target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fas fa-expand-alt\"></i></a>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                            <p className=\"categorie\"><i className={project._hide ? 'far fa-eye-slash' : 'far fa-eye'}></i></p>\r\n                                                                            <ul className=\"text-muted tags\">\r\n                                                                                {\r\n                                                                                    project.tag.map((t, i) => {\r\n                                                                                        return (\r\n                                                                                            <li key={'_' + i} className=\"tag_item\">{t}</li>\r\n                                                                                        )\r\n                                                                                    })\r\n                                                                                }\r\n                                                                            </ul>\r\n                                                                            <a href={project.link_to} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                                                <div className=\"readmore\">\r\n                                                                                    <button data-am-linearrow=\"tooltip tooltip-bottom\" display-name=\"Read More\">\r\n                                                                                        <div className=\"line line-1\"></div>\r\n                                                                                        <div className=\"line line-2\"></div>\r\n                                                                                    </button>\r\n                                                                                </div>\r\n                                                                            </a>\r\n                                                                            <br />\r\n                                                                            <div className=\"comments_up_down\">\r\n                                                                                <p className=\"text-muted views\"><b>{_.size(project.view)}</b><i className=\"fas fa-eye\"></i></p>\r\n                                                                                <p className=\"text-muted comments\"><b>{_.size(project.comment)}</b> <i className=\"fas fa-comment-alt\"></i></p>\r\n                                                                                <p className=\"text-muted upvotes\"><b>{_.size(project.upvotes)}</b> <i className=\"fas fa-thumbs-up\"></i></p>\r\n                                                                                <p className=\"text-muted downvotes\"><b>{_.size(project.downvotes)}</b> <i className=\"fas fa-thumbs-down\"></i></p>\r\n                                                                            </div>\r\n                                                                            <p className=\"text-muted author\">by <b>{project.author}</b>, {moment(new Date(project.createdAt)).fromNow()}</p>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </li>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </ul>\r\n                                            <ul id=\"page-numbers\">\r\n                                                {\r\n                                                    ([...Array(Math.ceil(_.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author }), ['createdAt'], ['desc']) : _.filter(projects, (_p) => { return !_p._hide || _.includes(_user.roles, 'admin') || _user.username === _p.author })), function (o) {\r\n                                                        if (timeframe === 'Today')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'day');\r\n                                                        if (timeframe === 'This_Past_Week')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                        if (timeframe === 'This_Past_Month')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                        if (timeframe === 'This_Past_Year')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                        if (timeframe === 'All_Time')\r\n                                                            return true;\r\n                                                    }), (op) => {\r\n                                                        if (!categorie)\r\n                                                            return true;\r\n                                                        else\r\n                                                            return op.categorie === categorie;\r\n                                                    }), (op_bytag) => {\r\n                                                        if (!tags)\r\n                                                            return true;\r\n                                                        else\r\n                                                            return op_bytag.tag.some(x => _.split(_.lowerCase(tags), ' ').some(_s_v => _.lowerCase(x).includes(_s_v)));\r\n                                                    }).length / todosPerPage)).keys()]).map(number => {\r\n                                                        return (\r\n                                                            <li\r\n                                                                key={number + 1}\r\n                                                                id={number + 1}\r\n                                                                onClick={this.handleClickPage}\r\n                                                                className={currentPage === number + 1 ? 'current' : ''}\r\n                                                            >\r\n                                                                <p className=\"shadow_page\">.{this._FormatNumberLength(number + 1, 2)}</p>\r\n                                                            </li>\r\n                                                        );\r\n                                                    })\r\n                                                }\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"_testimony_modal modal _modal fade\" id=\"_testimony_modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"_testimony_modalLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <a href=\"# \" title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                            <div className=\"card\">\r\n                                                <div className=\"shadow_title\">{_.head(_.words(_testimony.body))}</div>\r\n                                                <div className=\"card-body\">\r\n                                                    <div className=\"top_row\">\r\n                                                        <h6 className=\"author\">by <b>{_testimony.author}</b></h6>\r\n                                                        <p className=\"text-muted fromNow\">{moment(new Date(_testimony.createdAt)).fromNow()}</p>\r\n                                                        <div className=\"up_down\">\r\n                                                            <p className=\"text-muted replies\"><b>{_.size(_.filter(testimonies, { 'parent_id': _testimony._id }))}</b><i className=\"fas fa-reply-all\"></i></p>\r\n                                                            <div className={`text-muted upvotes ${_.isUndefined(_.find(_.get(_testimony, 'upvotes'), (upvote) => { return upvote.upvoter === _user.fingerprint })) ? '' : 'active'}`}>\r\n                                                                <b>{_.size(_.get(_testimony, 'upvotes'))}</b>\r\n                                                                <i className=\"fas fa-thumbs-up\"></i>\r\n                                                            </div>\r\n                                                            <div className={`text-muted downvotes ${_.isUndefined(_.find(_.get(_testimony, 'downvotes'), (downvote) => { return downvote.downvoter === _user.fingerprint })) ? '' : 'active'}`}>\r\n                                                                <b>{_.size(_.get(_testimony, 'downvotes'))}</b>\r\n                                                                <i className=\"fas fa-thumbs-down\"></i>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"middle_row\">\r\n                                                        <h5>{_testimony.body}</h5>\r\n                                                    </div>\r\n                                                    {(() => {\r\n                                                        if (_testimony.is_private === true) {\r\n                                                            return (\r\n                                                                <p className=\"is_private\">Private.</p>\r\n                                                            )\r\n                                                        }\r\n                                                    })()}\r\n                                                    {\r\n                                                        _.orderBy(_.reject(_.filter(testimonies, (_t) => { return !_t.is_private || _testimony.author === _user.username }), { parent_id: null }), ['view'], ['desc']).map((testimony_reply, index_reply) => {\r\n                                                            if (testimony_reply.parent_id === _testimony._id)\r\n                                                                return (\r\n                                                                    <div className={\"card card_\" + index_reply} data-index={index_reply + 1}>\r\n                                                                        <div className=\"shadow_title\">{_.head(_.words(testimony_reply.body))}</div>\r\n                                                                        <div className=\"card-body\">\r\n                                                                            <div className=\"top_row\">\r\n                                                                                <h6 className=\"author\">by <b>{testimony_reply.author}</b></h6>\r\n                                                                                <p className=\"text-muted fromNow\">{moment(new Date(testimony_reply.createdAt)).fromNow()}</p>\r\n                                                                                <div className=\"up_down\">\r\n                                                                                    <div className={`text-muted upvotes ${_.isUndefined(_.find(_.get(testimony_reply, 'upvotes'), (upvote) => { return upvote.upvoter === _user.fingerprint })) ? '' : 'active'}`}>\r\n                                                                                        <b>{_.size(_.get(testimony_reply, 'upvotes'))}</b>\r\n                                                                                        <i className=\"fas fa-thumbs-up\"></i>\r\n                                                                                    </div>\r\n                                                                                    <div className={`text-muted downvotes ${_.isUndefined(_.find(_.get(testimony_reply, 'downvotes'), (downvote) => { return downvote.downvoter === _user.fingerprint })) ? '' : 'active'}`}>\r\n                                                                                        <b>{_.size(_.get(testimony_reply, 'downvotes'))}</b>\r\n                                                                                        <i className=\"fas fa-thumbs-down\"></i>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                            <div className=\"middle_row\">\r\n                                                                                <h5>{testimony_reply.body}</h5>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                )\r\n                                                        })\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"_all_testimony_modal_view _all_view modal _modal fade\" id=\"_all_testimony_modal_view\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"_all_testimony_modal_viewLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <div className=\"modal-top\">\r\n                                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                                                    Showing&nbsp;\r\n                                                    <strong>{((currentPage * todosPerPage) - todosPerPage) + 1}</strong>\r\n                                                    &nbsp;to&nbsp;\r\n                                                    <strong>{((currentPage * todosPerPage) - todosPerPage) + _.toNumber(_.size(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['comment'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : sort === 'Trending' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['view'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : sort === 'Most_Likes' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['upvotes'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : sort === 'Recent' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['createdAt'], ['desc']).slice(((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)) : _.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') })), function (o) {\r\n                                                    if (timeframe === 'Today')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'day');\r\n                                                    if (timeframe === 'This_Past_Week')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                    if (timeframe === 'This_Past_Month')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                    if (timeframe === 'This_Past_Year')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                    if (timeframe === 'All_Time')\r\n                                                        return true;\r\n                                                })))}</strong>\r\n                                                    &nbsp;of&nbsp;\r\n                                                    <strong>{_.toNumber(_.size(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['createdAt'], ['desc']) : _.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') })), function (o) {\r\n                                                    if (timeframe === 'Today')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'day');\r\n                                                    if (timeframe === 'This_Past_Week')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                    if (timeframe === 'This_Past_Month')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                    if (timeframe === 'This_Past_Year')\r\n                                                        return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                    if (timeframe === 'All_Time')\r\n                                                        return true;\r\n                                                })))}\r\n                                                    </strong>\r\n                                                    &nbsp;testimonies.\r\n                                                </h5>\r\n                                                <div>\r\n                                                    <span className=\"filter\" onClick={(event) => this.handleShowFilter(event)}><i className=\"fas fa-sliders-h\"></i></span>\r\n                                                    <a href=\"# \" title=\"Close\" className=\"modal-close\" id=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"modal-top-filter\">\r\n                                                <div className=\"input-field col s6\">\r\n                                                    <select\r\n                                                        value={sort}\r\n                                                        onChange={(ev) => this.handleChangeField('sort', ev)}\r\n                                                        className=\"form-group-input sort\"\r\n                                                        id=\"sort\"\r\n                                                        name=\"sort\"\r\n                                                    >\r\n                                                        <option value=\"Trending\">Trending</option>\r\n                                                        <option value=\"Relevant\">Relevant</option>\r\n                                                        <option value=\"Most_Liked\">Most Liked</option>\r\n                                                        <option value=\"Recent\">Recent</option>\r\n                                                    </select>\r\n                                                    <label htmlFor='sort' className={sort ? 'active' : ''}>sort</label>\r\n                                                    <div className=\"form-group-line\"></div>\r\n                                                </div>\r\n                                                <div className=\"input-field col s6\">\r\n                                                    <select\r\n                                                        value={timeframe}\r\n                                                        onChange={(ev) => this.handleChangeField('timeframe', ev)}\r\n                                                        className=\"form-group-input timeframe\"\r\n                                                        id=\"timeframe\"\r\n                                                        name=\"timeframe\"\r\n                                                    >\r\n                                                        <option value=\"Today\">Today</option>\r\n                                                        <option value=\"This_Past_Week\">This Past Week</option>\r\n                                                        <option value=\"This_Past_Month\">This Past Month</option>\r\n                                                        <option value=\"This_Past_Year\">This Past Year</option>\r\n                                                        <option value=\"All_Time\">All Time</option>\r\n                                                    </select>\r\n                                                    <label htmlFor='timeframe' className={timeframe ? 'active' : ''}>timeframe</label>\r\n                                                    <div className=\"form-group-line\"></div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <ul id=\"page\">\r\n                                                {\r\n                                                    _.slice(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') || _.includes(_user.roles, 'admin') }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['createdAt'], ['desc']) : _.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') })), function (o) {\r\n                                                        if (timeframe === 'Today')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'd');\r\n                                                        if (timeframe === 'This_Past_Week')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                        if (timeframe === 'This_Past_Month')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                        if (timeframe === 'This_Past_Year')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                        if (timeframe === 'All_Time')\r\n                                                            return true;\r\n                                                    }), ((currentPage * todosPerPage) - todosPerPage), (currentPage * todosPerPage)).map((testimony, index) => {\r\n                                                        return (\r\n                                                            <li className=\"testimony_card _card testimony_anchor\" data-name={moment(testimony.createdAt).format(\"YYYY Do MM\")} id=\"testimony_card\" key={index}>\r\n                                                                <div className={\"col card card_\" + index} data-title={_.snakeCase(testimony.author)} data-index={_.add(index, 1)}>\r\n                                                                    <div className=\"card-body\">\r\n                                                                        <div className=\"_heads_up\">\r\n                                                                            <div className=\"intel\">\r\n                                                                                <p className=\"text-muted author\">by </p>\r\n                                                                                <p className=\"text-muted author\">{testimony.author}</p>\r\n                                                                                <p className=\"text-muted author\">{moment(new Date(testimony.createdAt)).fromNow()}</p>\r\n                                                                            </div>\r\n                                                                            <div className=\"dropdown\">\r\n                                                                                <span className=\"dropdown-toggle\" id=\"dropdownMenuButton_testimonies\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                                                    <i className=\"fas fa-ellipsis-h\"></i>\r\n                                                                                </span>\r\n                                                                                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton_testimonies\">\r\n                                                                                    {(() => {\r\n                                                                                        if (_.includes(_user.roles, 'admin') || _user.username === testimony.author) {\r\n                                                                                            return (\r\n                                                                                                <a href=\"# \" className=\"dropdown-item delete\" onClick={() => this.handleDeleteTestimony(testimony._id)}><i className=\"far fa-trash-alt\"></i></a>\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                    })()}\r\n                                                                                    <a href=\"# \" className=\"dropdown-item _view\" onClick={() => { this.setState({ _testimony: testimony }); }} data-id={testimony._id} data-toggle=\"modal\" data-target=\"#_testimony_modal\"><i className=\"fas fa-expand-alt\"></i></a>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                        {(() => {\r\n                                                                            if (testimony.is_private === true) {\r\n                                                                                return (\r\n                                                                                    <p className=\"is_private\">Private.</p>\r\n                                                                                )\r\n                                                                            }\r\n                                                                        })()}\r\n                                                                        <div className=\"_testy_body\">\r\n                                                                            <h4>{testimony.body}</h4>\r\n                                                                        </div>\r\n                                                                        <div className=\"comments_up_down\">\r\n                                                                            <p className=\"text-muted views\"><b>{_.size(testimony.view)}</b><i className=\"fas fa-eye\"></i></p>\r\n\r\n                                                                            <p className=\"text-muted replies\"><b>{_.size(_.filter(testimonies, { 'parent_id': testimony._id }))}</b><i className=\"fas fa-reply-all\"></i></p>\r\n                                                                            <p className={`text-muted upvotes ${_.isUndefined(_.find(_.get(testimony, 'upvotes'), (upvote) => { return upvote.upvoter === _user.fingerprint })) ? '' : 'active'}`}><b>{_.size(testimony.upvotes)}</b><i className=\"fas fa-thumbs-up\"></i></p>\r\n                                                                            <p className={`text-muted downvotes ${_.isUndefined(_.find(_.get(testimony, 'downvotes'), (downvote) => { return downvote.downvoter === _user.fingerprint })) ? '' : 'active'}`}><b>{_.size(testimony.downvotes)}</b><i className=\"fas fa-thumbs-down\"></i></p>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </li>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </ul>\r\n                                            <ul id=\"page-numbers\">\r\n                                                {\r\n                                                    ([...Array(Math.ceil(_.filter(_.filter(_.filter((sort === 'Relevant' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['comment'], ['desc']) : sort === 'Trending' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['view'], ['desc']) : sort === 'Most_Likes' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['upvotes'], ['desc']) : sort === 'Recent' ? _.orderBy(_.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') }), ['createdAt'], ['desc']) : _.filter(testimonies, (_t) => { return !_t.is_private || _t.author === _user.username || _.includes(_user.roles, 'admin') })), function (o) {\r\n                                                        if (timeframe === 'Today')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'day');\r\n                                                        if (timeframe === 'This_Past_Week')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'week');\r\n                                                        if (timeframe === 'This_Past_Month')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'month');\r\n                                                        if (timeframe === 'This_Past_Year')\r\n                                                            return moment(new Date(o.createdAt)).isSame(moment(new Date()), 'year');\r\n                                                        if (timeframe === 'All_Time')\r\n                                                            return true;\r\n                                                    }), (op) => {\r\n                                                        if (!categorie)\r\n                                                            return true;\r\n                                                        else\r\n                                                            return op.categorie === categorie;\r\n                                                    }), (op_bytag) => {\r\n                                                        if (!tags)\r\n                                                            return true;\r\n                                                        else\r\n                                                            return _.includes(op_bytag.tag, tags);\r\n                                                    }).length / todosPerPage)).keys()]).map(number => {\r\n                                                        return (\r\n                                                            <li\r\n                                                                key={number + 1}\r\n                                                                id={number + 1}\r\n                                                                onClick={this.handleClickPage}\r\n                                                                className={currentPage === number + 1 ? 'current' : ''}\r\n                                                            >\r\n                                                                <p className=\"shadow_page\">.{this._FormatNumberLength(number + 1, 2)}</p>\r\n                                                            </li>\r\n                                                        );\r\n                                                    })\r\n                                                }\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"_user_modal modal fade\" id=\"_user_modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"_user_modalLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <a title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                            <h5 className=\"modal-title\" id=\"_user_modalLabel\">Changing roles for {_user_toEdit_username}!</h5>\r\n                                            <div className=\"wrapper_form_user\">\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"input-field col s12\">\r\n                                                        <select\r\n                                                            value={_user_toEdit_roles}\r\n                                                            onChange={(ev) => this.handleChangeFieldUser('_user_toEdit_roles', ev)}\r\n                                                            className=\"form-group-input _user_toEdit_roles\"\r\n                                                            id=\"_user_toEdit_roles\"\r\n                                                            name=\"_user_toEdit_roles\"\r\n                                                        >\r\n                                                            <option value=\"\"></option>\r\n                                                            <option value=\"Writer\">Writer</option>\r\n                                                            <option value=\"Admin\">Admin</option>\r\n                                                        </select>\r\n                                                        <label htmlFor='_user_toEdit_roles' className={_user_toEdit_roles ? 'active' : ''}>Roles</label>\r\n                                                        <div className=\"form-group-line\"></div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <button onClick={(ev) => this.send_user(_user_toEdit_username)} className=\"btn btn-primary float-right\">Update.</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"modal fade\" id=\"edit_modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"edit_modalLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <a href=\"# \" title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                            <h5 className=\"modal-title\" id=\"edit_modalLabel\">Hey!</h5>\r\n                                            <div>Your Informations has been updated, we've sent you details to your email, we love you.</div>\r\n                                            <div><small>Thanks {localStorage.getItem('username')}</small></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal fade\" id=\"edit_modal_error_roles\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"edit_modal_error_rolesLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <a href=\"# \" title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                            <h5 className=\"modal-title\" id=\"edit_modal_error_rolesLabel\">Hey!</h5>\r\n                                            <div>{modal_msg}</div>\r\n                                            <div><small>Thanks {localStorage.getItem('username')}</small></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal fade\" id=\"edit_modal_error\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"edit_modal_errorLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <a href=\"# \" title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                            <h5 className=\"modal-title\" id=\"edit_modal_errorLabel\">Hey!</h5>\r\n                                            <div>{modal_msg}</div>\r\n                                            <div><small>Thanks {localStorage.getItem('username')}</small></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {/* <div className=\"timeanddatenow\">\r\n                            <h1 id=\"bigtext\" className=\"datenow\">\r\n                                <Clock\r\n                                    className='_day_name'\r\n                                    format={'dddd'}\r\n                                />\r\n                                <Clock\r\n                                    className='_day_number'\r\n                                    format={'Do'}\r\n                                />\r\n                                <Clock\r\n                                    className='_month_name'\r\n                                    format={'MMMM'}\r\n                                />\r\n                                <Clock\r\n                                    className='_year_number'\r\n                                    format={'YYYY'}\r\n                                />\r\n                                <Clock\r\n                                    format={'hh:mm A'}\r\n                                    ticking={true}\r\n                                />\r\n                            </h1>\r\n                        </div> */}\r\n                    </section>\r\n                </Slide>\r\n            </FullPage>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    articles: state.home.articles,\r\n    projects: state.home.projects,\r\n    testimonies: state.home.testimonies,\r\n    notifications: state.home.notifications,\r\n\r\n    userToEdit: state.home.userToEdit,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onLoad: data => dispatch({ type: 'HOME_PAGE_LOADED', data }),\r\n    onDelete: id => dispatch({ type: 'DELETE_ARTICLE', id }),\r\n    setEdit: article => dispatch({ type: 'SET_EDIT', article }),\r\n\r\n\r\n    onLoadNotification: data => dispatch({ type: 'NOTIFICATION_PAGE_LOADED', data }),\r\n    onDeleteNotification: id => dispatch({ type: 'DELETE_NOTIFICATION', id }),\r\n    onSubmitNotification: data => dispatch({ type: 'SUBMIT_NOTIFICATION', data }),\r\n\r\n    setEditUser: user => dispatch({ type: 'SET_EDIT_USER', user }),\r\n\r\n    onLoadProject: data => dispatch({ type: 'PROJECT_PAGE_LOADED', data }),\r\n    onDeleteProject: id => dispatch({ type: 'DELETE_PROJECT', id }),\r\n    setEditProject: project => dispatch({ type: 'SET_EDIT_PROJECT', project }),\r\n\r\n    onLoadTestimony: data => dispatch({ type: 'TESTIMONY_PAGE_LOADED', data }),\r\n    onDeleteTestimony: id => dispatch({ type: 'DELETE_TESTIMONY', id }),\r\n    setEditTestimony: testimony => dispatch({ type: 'SET_EDIT_TESTIMONY', testimony }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\utils\\API.js",["188"],"import axios from \"axios\";\r\nconst headers = {\r\n    \"Content-Type\": \"application/json\"\r\n};\r\nconst burl = \"\";\r\n\r\nexport default {\r\n    login: function(email, password) {\r\n        return axios.post(\r\n            `${burl}/user/login`,\r\n            {\r\n                email,\r\n                password\r\n            },\r\n            {\r\n                headers: headers\r\n            }\r\n        );\r\n    },\r\n    signup: function(send) {\r\n        return axios.post(`${burl}/user/signup`, send, { headers: headers });\r\n    },\r\n    send_mail: function(send) {\r\n        return axios.post(`${burl}/user/send_mail`, send, { headers: headers });\r\n    },\r\n    confirmation: function(send) {\r\n        return axios.post(`${burl}/user/confirmation`, send, { headers: headers });\r\n    },\r\n    update: function(send) {\r\n        return axios.patch(`${burl}/user/update`, send, { headers: headers });\r\n    },\r\n    update_roles: function(send) {\r\n        return axios.patch(`${burl}/user/update_roles`, send, { headers: headers });\r\n    },\r\n    get_user: function(email) {\r\n        return axios.post(\r\n            `${burl}/user/get_user`,\r\n            {\r\n                email\r\n            },\r\n            {\r\n                headers: headers\r\n            }\r\n        );\r\n    },\r\n    get_users: function() {\r\n        return axios.post(\r\n            `${burl}/user/get_users`,\r\n            {\r\n                headers: headers\r\n            }\r\n        );\r\n    },\r\n    isAuth: function() {\r\n        return localStorage.getItem(\"token\") !== null;\r\n    },\r\n    logout: function() {\r\n        localStorage.clear();\r\n    }\r\n};","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Footer\\Footer.js",["189","190","191","192"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport 'whatwg-fetch';\r\nimport API from '../../utils/API';\r\nimport * as $ from \"jquery\";\r\nimport 'bootstrap';\r\nimport 'css-doodle';\r\n\r\nvar _ = require('lodash');\r\n\r\nclass Footer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mail_username : '',\r\n            mail_location: '',\r\n            mail_email: '',\r\n            mail_phone: '',\r\n            mail_content: '',\r\n            window_height: '',\r\n            window_width: '',\r\n        }\r\n        this._handleMouseMove = this._handleMouseMove.bind(this);\r\n        this._handleAlphabet = this._handleAlphabet.bind(this);\r\n        this.send_mail = this.send_mail.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    componentWillMount() {\r\n        const { onLoad, onLoadProject } = this.props;\r\n\r\n        axios('/api/articles')\r\n        .then(function (response) {\r\n            onLoad(response.data);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n\r\n        axios('/api/projects')\r\n        .then(function (response) {\r\n            onLoadProject(response.data);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        const self = this;\r\n        this._handleMouseMove();\r\n        $(document).ready(function () {\r\n            self._handleAlphabet();\r\n        });\r\n    }\r\n    _handleMouseMove() {\r\n        $('.footer').mousemove(function(e){\r\n            var width = $(this).width() / 2;\r\n            //var height = $(this).height() / 2;\r\n            var amountMovedX = ((width - e.pageX) * 1 / 64);\r\n            //var amountMovedY = ((height - e.pageY) * 1 / 64);\r\n            \r\n            $('.before').css('right', amountMovedX);\r\n            //$('.before').css('top', amountMovedY);\r\n        });\r\n    }\r\n    _handleAlphabet() {\r\n        var win = window,\r\n            doc = document,\r\n            docElem = doc.documentElement,\r\n            body = doc.getElementsByTagName('body')[0],\r\n            x = win.innerWidth || docElem.clientWidth || body.clientWidth,\r\n            y = win.innerHeight|| docElem.clientHeight|| body.clientHeight;\r\n        var gridWidth;\r\n        var gridHeight;\r\n        var letterWidth = _.round(docElem.clientWidth / _.round(docElem.clientWidth / 30)); // @todo: make this dynamic\r\n        var letterHeight = _.round(docElem.clientWidth / _.round(docElem.clientWidth / 30)); // @todo: make this dynamic\r\n        var totalLetters;\r\n        var letterArray = [];\r\n        var currentLetters = 0;\r\n        var resizeCount = 0;\r\n        \r\n        // the unicode values that we want to loop through (A-Z)\r\n        // http://www.codingforums.com/showpost.php?s=ca38992f8716f43d325c12be6fc0198b&p=843844&postcount=3\r\n        \r\n        var charCodeRange = {\r\n            start: 48,\r\n            end: 49\r\n        };\r\n        \r\n        // get the grid's width and height\r\n        \r\n        function getDimensions(){\r\n            gridWidth = docElem.clientWidth;\r\n            gridHeight = docElem.clientHeight;\r\n        }\r\n        \r\n        // get the total possible letters needed to fill the grid\r\n        // and store that in totalLetters\r\n        \r\n        function getTotalLetters(){\r\n            var multiplierX = Math.round(gridWidth / letterWidth);\r\n            var multiplierY = Math.round(gridHeight / letterHeight); \r\n            totalLetters = Math.round(multiplierX * multiplierY);\r\n            //console.log('multiplierX: '+multiplierX, '\\nmultiplierY: '+multiplierY, '\\ntotalLetters: '+totalLetters);\r\n        }\r\n        \r\n        // loop through the unicode values and push each character into letterArray\r\n        \r\n        function populateLetters() {\r\n            for (var i = charCodeRange.start; i <= charCodeRange.end; i++) {\r\n                letterArray.push(String.fromCharCode(i));\r\n            }\r\n        }\r\n        \r\n        // a function to loop a given number of times (value), each time\r\n        // appending a letter from the letter array to the grid\r\n        \r\n        function drawLetters(value){\r\n            var text;\r\n            var span;\r\n            var count = 0;\r\n        \r\n            for (var letter=0; letter <= value; letter++) {\r\n                text = document.createTextNode(letterArray[count]);\r\n                span = document.createElement('span');\r\n                span.appendChild(text);\r\n                $('.letter-grid').append(span);\r\n                count++;\r\n            \r\n                // if our count equals the length of our letter array, then that\r\n                // means we've reached the end of the array (Z), so we set count to \r\n                // zero again in order to start from the beginning of the array (A).\r\n                // we keep looping over the letter array 'value' number of times.\r\n            \r\n                if (count === letterArray.length) {\r\n                    count = 0;\r\n                }\r\n            \r\n                // if our for counter var (letter) equals the passed in value argument\r\n                // then we've finished our loop and we throw a class onto the grid element\r\n                \r\n                if (letter === value) {\r\n                    $('.letter-grid').addClass('js-show-letters');\r\n                }\r\n            }\r\n        }\r\n        \r\n        // get the length of the grid.find('span') jQuery object\r\n        // essentially the current number of letters in the grid at this point\r\n        \r\n        function getCurrentLetters(){\r\n            currentLetters = $('.letter-grid').find('span').length;\r\n        }\r\n        \r\n        function init() {\r\n            populateLetters();\r\n            getDimensions();\r\n            getTotalLetters();\r\n            drawLetters(totalLetters);\r\n            getCurrentLetters();\r\n        }\r\n        \r\n        function onResize() {\r\n            resizeCount++;\r\n            getDimensions();\r\n            getTotalLetters();\r\n            if (currentLetters < totalLetters) {\r\n                var difference = totalLetters - currentLetters;\r\n                drawLetters(difference);\r\n            }            \r\n            getCurrentLetters();\r\n        }\r\n        \r\n        init();\r\n        \r\n        window.addEventListener('resize', _.debounce(onResize, 100));\r\n    }\r\n    async send_mail() {\r\n        const { mail_username, mail_location, mail_email, mail_phone, mail_content } = this.state;\r\n        if (!mail_username || mail_username.length === 0) return;\r\n        if (!mail_email || mail_email.length === 0) return;\r\n        if (!mail_content || mail_content.length === 0) return;\r\n        try {\r\n            const { data } = await API.send_mail({ mail_username, mail_location, mail_email, mail_phone, mail_content });\r\n            $('#mailSentModal').modal('toggle');\r\n            $('#mailSentModal .modal-close').click(() => {\r\n                this.setState({\r\n                    mail_username : '',\r\n                    mail_location: '',\r\n                    mail_email: '',\r\n                    mail_phone: '',\r\n                    mail_content: '',\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        const { articles, projects } = this.props;\r\n        return (\r\n            <div className=\"footer\" id=\"footer_to\">\r\n                <div className=\"modal fade\" id=\"mailSentModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"mailSentModalLabel\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\" role=\"document\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-body\">\r\n                                <a href=\"# \" title=\"Close\" className=\"modal-close\" data-dismiss=\"modal\">Close</a>\r\n                                <h5 className=\"modal-title\" id=\"mailSentModalLabel\">Voilà!</h5>\r\n                                <div>Your mail was sent, we thank you for trusting us, we'll reach out to you before you even know it.</div>\r\n                                <div>How about you joins us, not only you can give a feedback to the post you're reading, but you can discover much more about out community.</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"letter-grid\"></div>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"top_shelf\">\r\n                        <div className=\"first_box\">\r\n                            <h6>Latest.</h6>\r\n                            <ul>\r\n                                {\r\n                                    (_.orderBy(_.filter(articles, (_a) => { return !_a._hide }), ['createdAt'], ['desc']).slice(0, 3)).map((article, index) => {\r\n                                        return (\r\n                                            <li key={index}>\r\n                                                <Link to={`/blog/${article._id}`}>\r\n                                                    <span>{article.title}</span>\r\n                                                    <p className=\"text-muted author\">by <b>{article.author}</b>, {moment(new Date(article.createdAt)).fromNow()}</p>\r\n                                                </Link>\r\n                                            </li>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"second_box\">\r\n                            <h6>Most viewed.</h6>\r\n                            <ul>\r\n                                {\r\n                                    (_.orderBy(_.filter(articles, (_a) => { return !_a._hide }), ['view'], ['desc']).slice(0, 3)).map((article, index) => {\r\n                                        return (\r\n                                            <li key={index}>\r\n                                                <Link to={`/blog/${article._id}`}>\r\n                                                    <span>{article.title}</span>\r\n                                                    <p className=\"text-muted author\">by <b>{article.author}</b>, {moment(new Date(article.createdAt)).fromNow()}</p>\r\n                                                </Link>\r\n                                            </li>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"third_box\">\r\n                            <h6>Most commented.</h6>\r\n                            <ul>\r\n                                {\r\n                                    (_.orderBy(_.filter(articles, (_a) => { return !_a._hide }), ['comment'], ['desc']).slice(0, 3)).map((article, index) => {\r\n                                        return (\r\n                                            <li key={index}>\r\n                                                <Link to={`/blog/${article._id}`}>\r\n                                                    <span>{article.title}</span>\r\n                                                    <p className=\"text-muted author\">by <b>{article.author}</b>, {moment(new Date(article.createdAt)).fromNow()}</p>\r\n                                                </Link>\r\n                                            </li>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"fourth_box\">\r\n                            <h6>Latest Projects.</h6>\r\n                            <ul>\r\n                                {\r\n                                    (_.orderBy(_.filter(projects, (_p) => { return !_p._hide }), ['createdAt'], ['asc']).slice(0, 3)).map((project, index) => {\r\n                                        return (\r\n                                            <li key={index}>\r\n                                                <a href={project.link_to} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                    <span>{project.title}</span>\r\n                                                    <p className=\"text-muted author\">by <b>{project.author}</b>, {moment(new Date(project.createdAt)).fromNow()}</p>\r\n                                                </a>\r\n                                            </li>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mail-modal\">\r\n                        <div className=\"before\"></div>\r\n                        <div className=\"modal-inner\">\r\n                            <div className=\"modal-left\">\r\n                                <div>\r\n                                    <h5>Other ways to get in touch</h5>\r\n                                </div>\r\n                                <div>\r\n                                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                                    <span>Meknès, Maroc</span>\r\n                                </div>\r\n                                <div>\r\n                                    <i className=\"fas fa-phone\"></i>\r\n                                    <span>(+212) 6 54 52 84 92</span>\r\n                                </div>\r\n                                <div>\r\n                                    <i className=\"fas fa-envelope\"></i>\r\n                                    <span>contact@boutaleb.dev</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal-content\">\r\n                                <form className=\"mail_form\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"input-field col s6\">\r\n                                            <input \r\n                                                className=\"validate form-group-input mail_username\" \r\n                                                id=\"mail_username\" \r\n                                                type=\"text\" \r\n                                                name=\"mail_username\" \r\n                                                required=\"required\"\r\n                                                value={this.state.mail_username} \r\n                                            onChange={this.handleChange}\r\n                                            />\r\n                                            <label htmlFor='mail_username'>username*</label>\r\n                                            <div className=\"form-group-line\"></div>\r\n                                        </div>\r\n                                        <div className=\"input-field col s6\">\r\n                                            <input \r\n                                                className=\"validate form-group-input mail_location\" \r\n                                                id=\"mail_location\" \r\n                                                type=\"text\" \r\n                                                name=\"mail_location\"\r\n                                                value={this.state.mail_location} \r\n                                                onChange={this.handleChange}\r\n                                            />\r\n                                            <label htmlFor='mail_location'>address</label>\r\n                                            <div className=\"form-group-line\"></div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"input-field col s6\">\r\n                                            <input \r\n                                                className=\"validate form-group-input mail_email\" \r\n                                                id=\"mail_email\" \r\n                                                type=\"text\" \r\n                                                name=\"mail_email\" \r\n                                                required=\"required\"\r\n                                                value={this.state.mail_email} \r\n                                                onChange={this.handleChange}\r\n                                            />\r\n                                            <label htmlFor='mail_email'>email*</label>\r\n                                            <div className=\"form-group-line\"></div>\r\n                                        </div>\r\n                                        <div className=\"input-field col s6\">\r\n                                            <input \r\n                                                className=\"validate form-group-input mail_phone\" \r\n                                                id=\"mail_phone\" \r\n                                                type=\"text\" \r\n                                                name=\"mail_phone\" \r\n                                                value={this.state.mail_phone} \r\n                                                onChange={this.handleChange}\r\n                                            />\r\n                                            <label htmlFor='mail_phone'>phone</label>\r\n                                            <div className=\"form-group-line\"></div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"input-field col s12\">\r\n                                            <textarea \r\n                                                className=\"validate form-group-input materialize-textarea mail_content\" \r\n                                                id=\"mail_content\" \r\n                                                name=\"mail_content\" \r\n                                                required=\"required\"\r\n                                                value={this.state.mail_content} \r\n                                                onChange={this.handleChange}\r\n                                            />\r\n                                            <label htmlFor='mail_content'>what can i do for you ?</label>\r\n                                            <div className=\"form-group-line textarea_line\"></div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"input-field col s12\">\r\n                                            <button \r\n                                                className=\"pull-right\" \r\n                                                type=\"submit\"\r\n                                                name='btn_login' \r\n                                                onClick={this.send_mail}\r\n                                            >\r\n                                                <span>\r\n                                                    <span>\r\n                                                        <span data-attr-span=\"Submit.\">\r\n                                                            Submit.\r\n                                                        </span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"low_shelf\">\r\n                        <span className=\"push-left\">\r\n                            <ul className=\"list-inline\">\r\n                                <li className=\"list-inline-item\">\r\n                                    <a href=\"https://www.instagram.com/boutaleblcoder/\">Instagram</a>\r\n                                </li>\r\n                                <li className=\"list-inline-item\">\r\n                                    <a href=\"https://fb.me/boutaleblcoder\">Facebook</a>\r\n                                </li>\r\n                                <li className=\"list-inline-item\">\r\n                                    <a href=\"https://www.behance.net/boutaleblcoder/\">Behance</a>\r\n                                </li>\r\n                                <li className=\"list-inline-item\">\r\n                                    <i className=\"far fa-copyright\"></i>\r\n                                    <span>{moment().format('YYYY')}</span> - With <i className=\"fas fa-heart\"></i> from Zakariae boutaleb.\r\n                                </li>\r\n                            </ul>\r\n                        </span>\r\n                        <span className=\"push-right\">\r\n                            <ul className=\"list-inline\">\r\n                                <li className=\"list-inline-item\">\r\n                                    <a href=\"# \">Legal Notice</a>\r\n                                </li>\r\n                                <li className=\"list-inline-item\">\r\n                                    <a href=\"# \">Newsroom</a>\r\n                                </li>\r\n                                <li className=\"list-inline-item\">\r\n                                    <span className=\"name\">Zakariae.</span>\r\n                                </li>\r\n                            </ul>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    articles: state.home.articles,\r\n    projects: state.home.projects,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onLoad: data => dispatch({ type: 'HOME_PAGE_LOADED', data }),\r\n    onLoadProject: data => dispatch({ type: 'PROJECT_PAGE_LOADED', data }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Footer);","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Header\\Header.js",["193","194","195","196"],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Dashboard\\Calendar.js",["197","198"],"import React from \"react\";\r\nimport moment from 'moment';\r\n\r\nvar _ = require('lodash');\r\n\r\nclass Calendar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentMonth: new Date(),\r\n            selectedDate: new Date()\r\n        };\r\n        this.renderHeader = this.renderHeader.bind(this);\r\n        this.renderDays = this.renderDays.bind(this);\r\n        this.renderCells = this.renderCells.bind(this);\r\n        this.onDateClick = this.onDateClick.bind(this);\r\n        this.nextMonth = this.nextMonth.bind(this);\r\n        this.prevMonth = this.prevMonth.bind(this);\r\n    }\r\n    renderHeader() {\r\n        return (\r\n            <div className=\"header row flex-middle\">\r\n                <div className=\"col col-start\">\r\n                    <span className='p'>\r\n                        { moment(this.state.currentMonth).format('MMMM, YYYY') }\r\n                    </span>\r\n                </div>\r\n                <div className=\"col col-center\" onClick={this.prevMonth}>\r\n                    <div className=\"icon\"><i className=\"fas fa-long-arrow-alt-left\"></i></div>\r\n                </div>\r\n                <div className=\"col col-end\" onClick={this.nextMonth}>\r\n                    <div className=\"icon\"><i className=\"fas fa-long-arrow-alt-right\"></i></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    renderDays() {\r\n        const days = [];\r\n        let startDate = moment(this.state.currentMonth).startOf('week');\r\n        \r\n        for (let i = 0; i < 7; i++) {\r\n            days.push(\r\n                <div className=\"col col-center\" key={i}>\r\n                    { moment(moment(startDate).add(i, 'days')).format('dd') }\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return <div className=\"days row\">{days}</div>;\r\n    }\r\n    renderCells() {\r\n        const { currentMonth, selectedDate } = this.state;\r\n        const monthStart = moment(currentMonth).startOf('M');\r\n        const monthEnd = moment(monthStart).endOf('M');\r\n        const startDate = moment(monthStart).startOf('week');\r\n        const endDate = moment(monthEnd).endOf('week');\r\n        \r\n        const rows = [];\r\n\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n        let names = [];\r\n        let _event_dates = [];\r\n        \r\n        while (day <= endDate) {\r\n            for (let i = 0; i < 7; i++) {\r\n                formattedDate = moment(day).format('D');\r\n                const cloneDay = day;\r\n                names = _.map(_.filter(this.props.NOTIFICATIONS, (item) => { return _.isEqual(moment(item.createdAt).format('MMM Do'), moment(day).format('MMM Do')) }), (notification) => { return '['+notification.type+']'; });\r\n                \r\n                days.push(\r\n                    <div\r\n                    className={`col cell ${\r\n                        ! moment(day).isSame(monthStart, 'month')\r\n                        ? \"disabled\"\r\n                        : moment(day).isSame(selectedDate, 'day')\r\n                        ? \"selected\"\r\n                        : _.includes(_.map(_.map(this.props.NOTIFICATIONS, 'createdAt'), (item) => { return moment(item).format('MMM Do') }), moment(day).format('MMM Do'))\r\n                        ? \"notification \"+names\r\n                        : \"\"\r\n                    }`}\r\n                    key={day}\r\n                    onClick={() => this.onDateClick( moment(cloneDay) )}\r\n                    >\r\n                        <span className=\"number\">{formattedDate}</span>\r\n                        <span className=\"bg\">{formattedDate}</span>\r\n                    </div>\r\n                );\r\n                day = moment(day).add(1, 'days');\r\n            }\r\n            rows.push(\r\n                <div className=\"row\" key={day}>\r\n                    {days}\r\n                </div>\r\n            );\r\n            days = [];\r\n        }\r\n\r\n        return <div className=\"body\">{rows}</div>;\r\n    }\r\n    onDateClick(day) {\r\n        this.setState({\r\n            selectedDate: day\r\n        });\r\n    }\r\n    nextMonth() {\r\n        this.setState({\r\n            currentMonth: moment(this.state.currentMonth).add(1, 'M').format('MMMM, YYYY')\r\n        });\r\n    }\r\n    prevMonth() {\r\n        this.setState({\r\n            currentMonth: moment(this.state.currentMonth).subtract(1, 'M').format('MMMM, YYYY')\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"calendar\">\r\n                {this.renderHeader()}\r\n                {this.renderDays()}\r\n                {this.renderCells()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calendar;","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Dashboard\\Account.js",["199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224"],"import React from \"react\";\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport 'whatwg-fetch';\r\nimport API from '../../utils/API';\r\nimport $ from 'jquery';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst socketURL =\r\n  process.env.NODE_ENV === 'production'\r\n    ? window.location.hostname\r\n    : 'localhost:8800';\r\n    \r\nconst socket = socketIOClient(socketURL, {'transports': ['websocket', 'polling']});\r\nvar _ = require('lodash');\r\n\r\nclass Account extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            _user: {\r\n                username: '',\r\n                email: '',\r\n            },\r\n            _old_username: '',\r\n            _old_email: '',\r\n            _current_password: '',\r\n            _new_password: '',\r\n            _confirm_password: '',\r\n            modal_msg: '',\r\n        };\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n        this.set_articles_author = this.set_articles_author.bind(this);\r\n\t\tthis.handleEditArticle = this.handleEditArticle.bind(this);\r\n        this.get_user = this.get_user.bind(this);\r\n        this.send_user = this.send_user.bind(this);\r\n        this._progress = this._progress.bind(this);\r\n    }\r\n    componentWillMount() {\r\n        this.get_user();\r\n    }\r\n    set_articles_author(_old_username, _new_username) {\r\n        const self = this;\r\n\r\n        axios('/api/articles')\r\n        .then(function (response) {\r\n            _.map(response.data.articles, (article) => {\r\n                if(article.author == _old_username) {\r\n                    function setEditFunction() {\r\n                        return new Promise((resolve, reject) => {\r\n                            setTimeout(function() {\r\n                                self.handleEditArticle(article);\r\n                                true ? resolve('Success') : reject('Error');\r\n                            }, 2000);\r\n                        })\r\n                    }\r\n                    setEditFunction()\r\n                        .then(() => {\r\n                            self.handleSubmit(_new_username);\r\n                        });\r\n                }\r\n            })\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n    handleEditArticle(article) {\r\n        const { setEdit } = this.props;\r\n        setEdit(article);\r\n    }\r\n    handleSubmit(_new_username){\r\n        const { onSubmitNotification, articleToEdit, onEdit } = this.props;\r\n        const { title, body, author, categorie, _hide, tag, comment, upvotes, downvotes, view } = this.state;\r\n        \r\n        const self = this;\r\n        \r\n        return axios.patch(`/api/articles/${articleToEdit._id}`, {\r\n            author: _new_username,\r\n        })\r\n            .then((res) => {\r\n                onEdit(res.data);\r\n                return axios.post('/api/notifications', {\r\n                    type: 'Article Edited',\r\n                    description: '\\''+author+'\\' edited \\''+title+'\\'',\r\n                    author: author\r\n                })\r\n                .then((res_n) => onSubmitNotification(res_n.data))\r\n                .catch(error => {\r\n                    console.log(error)\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\tasync get_user() {\r\n        const self = this;\r\n        try {\r\n            const { data } = await API.get_user(localStorage.getItem('email'));\r\n\t\t\tself.setState({\r\n                _user: data.user,\r\n                _old_username: data.user.username,\r\n                _old_email: data.user.email,\r\n                _current_password: '',\r\n                _new_password: '',\r\n                _confirm_password: '',\r\n\t\t\t});\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    async send_user() {\r\n        let self = this;\r\n        const { _user, _old_username, _old_email, _current_password, _new_password, _confirm_password } = this.state;\r\n        const { onSubmitNotification } = this.props;\r\n        \r\n        try {\r\n            if (_new_password){\r\n                if(!_current_password || !_confirm_password) throw { text: 'Please fill out your old password and confirm it, if you have forgotten your password, please do contact the admin'};\r\n                if(_new_password != _confirm_password) throw { text: 'Please check your password confirmation'};\r\n            }\r\n            await API.update({ _user, _old_username, _old_email, _current_password, _new_password })\r\n            .then((res) => {\r\n                self.setState({\r\n                    modal_msg: res.data.text\r\n                }, () => {\r\n                    self.set_articles_author(_old_username, _user.username);\r\n                    self.get_user();\r\n                    $('#edit_modal').modal('toggle');\r\n                    socket.on(\"USER_UPDATED_GET\", data => self.get_user());\r\n                    socket.emit(\"USER_UPDATED\", res.data.text);\r\n                    return axios.post('/api/notifications', {\r\n                        type: 'User Account Updated',\r\n                        description: '\\''+_old_username+'\\' edited account',\r\n                        author: _user.username\r\n                    })\r\n                    .then((res_n) => onSubmitNotification(res_n.data))\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                    });\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                self.setState({\r\n\t\t\t\t\tmodal_msg: error.response.data.text\r\n\t\t\t\t}, () => {\r\n\t\t\t\t\t$('#edit_modal_error').modal('toggle');\r\n\t\t\t\t});\r\n            });\r\n        } catch (error) {\r\n            self.setState({\r\n\t\t\t\tmodal_msg: JSON.stringify(error)\r\n\t\t\t}, () => {\r\n\t\t\t\t$('#edit_modal_error').modal('toggle');\r\n\t\t\t});\r\n        }\r\n    }\r\n    handleChangeField(key, event) {\r\n        const self = this;\r\n        const value = event.target.value;\r\n        if(key === 'username' || key === 'email') {\r\n            self.setState(prevState => ({\r\n                _user: {\r\n                    ...prevState._user,\r\n                    [key]: value\r\n                }\r\n            }));\r\n        } else {\r\n            this.setState({ [key]: value });\r\n        }\r\n    }\r\n    _progress(user) {\r\n        function percentage(partialValue, totalValue) {\r\n            return (100 * partialValue) / totalValue;\r\n        }\r\n\r\n        var count = 0;\r\n        let total = 0;\r\n        Object.keys(user).forEach(function(key,index) {\r\n            if(key != '_id' && key != 'activated' && key != 'messages' && key != 'createdAt' && key != 'updatedAt' && key != '__v'){\r\n                total += 1;\r\n                count += (!user[key] ? 0 : 1);\r\n            }\r\n        });\r\n\r\n        $('.bar').width(_.ceil(percentage(count, total), 0)+'%');\r\n        return _.ceil(percentage(count, total), 0);\r\n    }\r\n    _progress_total(user) {\r\n        var count = 0;\r\n        Object.keys(user).forEach(function(key,index) {\r\n            if(key != '_id' && key != 'activated' && key != 'messages' && key != 'createdAt' && key != 'updatedAt' && key != '__v')\r\n                count += 1;\r\n        });\r\n        return _.ceil(count, 0);\r\n    }\r\n    render() {\r\n        const { _user, _current_password, _new_password, _confirm_password, modal_msg } = this.state;\r\n        return (\r\n            <>\r\n                <div className=\"_form\">\r\n                    <div className=\"modal-content_user\">\r\n                        <div className='row'>\r\n                            <div className='input-field col'>\r\n                                <input \r\n                                className='validate form-group-input username' \r\n                                type='text' \r\n                                name='username' \r\n                                id='username' \r\n                                required=\"required\"\r\n                                onChange={(ev) => this.handleChangeField('username', ev)}\r\n                                value={_user.username}\r\n                                />\r\n                                <label htmlFor='username' className={_user.username ? 'active' : ''}>username</label>\r\n                                <div className=\"form-group-line\"></div>\r\n                            </div>\r\n                            <div className='input-field col'>\r\n                                <input \r\n                                className='validate form-group-input email' \r\n                                type='email' \r\n                                name='email' \r\n                                id='email' \r\n                                required=\"required\"\r\n                                onChange={(ev) => this.handleChangeField('email', ev)}\r\n                                value={_user.email}\r\n                                />\r\n                                <label htmlFor='email' className={_user.email ? 'active' : ''}>Email</label>\r\n                                <div className=\"form-group-line\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='row'>\r\n                            <div className='input-field col'>\r\n                                <input \r\n                                className='validate form-group-input _current_password' \r\n                                type='password' \r\n                                name='_current_password' \r\n                                id='_current_password' \r\n                                required=\"required\" \r\n                                onChange={(ev) => this.handleChangeField('_current_password', ev)}\r\n                                value={_current_password}\r\n                                autoComplete=\"new-password\"\r\n                                />\r\n                                <label htmlFor='_current_password' className={_current_password ? 'active' : ''}>Current Password</label>\r\n                                <div className=\"form-group-line\"></div>\r\n                            </div>\r\n                            <div className='input-field col'>\r\n                                <input \r\n                                className='validate form-group-input _new_password' \r\n                                type='password' \r\n                                name='_new_password' \r\n                                id='_new_password' \r\n                                required=\"required\" \r\n                                onChange={(ev) => this.handleChangeField('_new_password', ev)}\r\n                                value={_new_password}\r\n                                />\r\n                                <label htmlFor='_new_password' className={_new_password ? 'active' : ''}>New Password</label>\r\n                                <div className=\"form-group-line\"></div>\r\n                            </div>\r\n                            <div className='input-field col'>\r\n                                <input \r\n                                className='validate form-group-input' \r\n                                type='password' \r\n                                name='_confirm_password' \r\n                                id='_confirm_password' \r\n                                required=\"required\" \r\n                                value={_confirm_password} \r\n                                onChange={(ev) => this.handleChangeField('_confirm_password', ev)}\r\n                                />\r\n                                <label htmlFor='_confirm_password' className={_confirm_password ? 'active' : ''}>Confirm Password</label>\r\n                                <div className=\"form-group-line\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <button \r\n                                className=\"pull-right\"\r\n                                onClick={this.send_user}\r\n                            >\r\n                                <span>\r\n                                    <span>\r\n                                        <span data-attr-span=\"Update.\">\r\n                                            Update.\r\n                                        </span>\r\n                                    </span>\r\n                                </span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    articleToEdit: state.home.articleToEdit,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setEdit: article => dispatch({ type: 'SET_EDIT', article }),\r\n    onSubmit: data => dispatch({ type: 'SUBMIT_ARTICLE', data }),\r\n    onEdit: data => dispatch({ type: 'EDIT_ARTICLE', data }),\r\n    \r\n    onSubmitNotification: data => dispatch({ type: 'SUBMIT_NOTIFICATION', data }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Account);","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\reducers\\index.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Project\\index.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Article\\index.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\reducers\\home.js",["225"],"import { \r\n    HOME_PAGE_LOADED, \r\n    SUBMIT_ARTICLE, \r\n    DELETE_ARTICLE, \r\n    SET_EDIT, \r\n    EDIT_ARTICLE, \r\n\r\n    NOTIFICATION_PAGE_LOADED, \r\n    SUBMIT_NOTIFICATION, \r\n\r\n    PROJECT_PAGE_LOADED, \r\n    SUBMIT_PROJECT, \r\n    DELETE_PROJECT, \r\n    SET_EDIT_PROJECT, \r\n    EDIT_PROJECT, \r\n\r\n    TESTIMONY_PAGE_LOADED, \r\n    SUBMIT_TESTIMONY, \r\n    DELETE_TESTIMONY, \r\n    SET_EDIT_TESTIMONY, \r\n    EDIT_TESTIMONY, \r\n    \r\n    USER_PAGE_LOADED, \r\n    SUBMIT_USER, \r\n    DELETE_USER, \r\n    SET_EDIT_USER, \r\n    EDIT_USER \r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    articles: [],\r\n    projects: [],\r\n    testimonies: [],\r\n    user: {},\r\n    users: [],\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        //ARTICLE\r\n        case HOME_PAGE_LOADED:\r\n            return {\r\n                ...state,\r\n                articles: action.data.articles,\r\n            };\r\n        case SUBMIT_ARTICLE:\r\n            return {\r\n                ...state,\r\n                articles: ([action.data.article]).concat(state.articles),\r\n            };\r\n        case DELETE_ARTICLE:\r\n            return {\r\n                ...state,\r\n                articles: state.articles.filter((article) => article._id !== action.id),\r\n            };\r\n        case SET_EDIT:\r\n            return {\r\n                ...state,\r\n                articleToEdit: action.article,\r\n            };\r\n        case EDIT_ARTICLE:\r\n            return {\r\n                ...state,\r\n                articles: state.articles.map((article) => {\r\n                    if (article._id === action.data.article._id) {\r\n                        return {\r\n                            ...action.data.article,\r\n                        }\r\n                    }\r\n                    return article;\r\n                }),\r\n                articleToEdit: undefined,\r\n            };\r\n\r\n        //NOTIFICATION\r\n        case NOTIFICATION_PAGE_LOADED:\r\n            return {\r\n                ...state,\r\n                notifications: action.data.notifications,\r\n            };\r\n        case SUBMIT_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notifications: ([action.data.notification]).concat(state.notifications),\r\n            };\r\n\r\n        //PROJECT\r\n        case PROJECT_PAGE_LOADED:\r\n            return {\r\n                ...state,\r\n                projects: action.data.projects,\r\n            };\r\n        case SUBMIT_PROJECT:\r\n            return {\r\n                ...state,\r\n                projects: ([action.data.project]).concat(state.projects),\r\n            };\r\n        case DELETE_PROJECT:\r\n            return {\r\n                ...state,\r\n                projects: state.projects.filter((project) => project._id !== action.id),\r\n            };\r\n        case SET_EDIT_PROJECT:\r\n            return {\r\n                ...state,\r\n                projectToEdit: action.project,\r\n            };\r\n        case EDIT_PROJECT:\r\n            return {\r\n                ...state,\r\n                projects: state.projects.map((project) => {\r\n                    if (project._id === action.data.project._id) {\r\n                        return {\r\n                            ...action.data.project,\r\n                        }\r\n                    }\r\n                    return project;\r\n                }),\r\n                projectToEdit: undefined,\r\n            };\r\n\r\n        //TESTIMONY\r\n        case TESTIMONY_PAGE_LOADED:\r\n            return {\r\n                ...state,\r\n                testimonies: action.data.testimonies,\r\n            };\r\n        case SUBMIT_TESTIMONY:\r\n            return {\r\n                ...state,\r\n                testimonies: ([action.data.testimony]).concat(state.testimonies),\r\n            };\r\n        case DELETE_TESTIMONY:\r\n            return {\r\n                ...state,\r\n                testimonies: state.testimonies.filter((testimony) => testimony._id !== action.id),\r\n            };\r\n        case SET_EDIT_TESTIMONY:\r\n            return {\r\n                ...state,\r\n                testimonyToEdit: action.testimony,\r\n            };\r\n        case EDIT_TESTIMONY:\r\n            return {\r\n                ...state,\r\n                testimonies: state.testimonies.map((testimony) => {\r\n                    if (testimony._id === action.data.testimony._id) {\r\n                        return {\r\n                            ...action.data.testimony,\r\n                        }\r\n                    }\r\n                    return testimony;\r\n                }),\r\n                testimonyToEdit: undefined,\r\n            };\r\n\r\n        //USER\r\n        case USER_PAGE_LOADED:\r\n            return {\r\n                user: action.data.user,\r\n            };\r\n        case SUBMIT_USER:\r\n            return {\r\n                ...state,\r\n                users: ([action.data.user]).concat(state.user),\r\n            };\r\n        case DELETE_USER:\r\n            return {\r\n                ...state,\r\n                users: state.users.filter((user) => user._id !== action.id),\r\n            };\r\n        case SET_EDIT_USER:\r\n            return {\r\n                ...state,\r\n                userToEdit: action.user,\r\n            };\r\n        case EDIT_USER:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((user) => {\r\n                    if (user._id === action.data.user._id) {\r\n                        return {\r\n                            ...action.data.user,\r\n                        }\r\n                    }\r\n                    return user;\r\n                }),\r\n                userToEdit: undefined,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\actions\\types.js",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Project\\FormProject\\index.jsx",[],"E:\\PROJECTS\\LETSMAKEMONEY\\CV\\client\\src\\components\\Article\\Form\\index.jsx",[],{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","severity":1,"message":"231","line":45,"column":17,"nodeType":"232","messageId":"233","endLine":45,"endColumn":19},{"ruleId":"234","severity":1,"message":"235","line":45,"column":38,"nodeType":"236","messageId":"237","endLine":45,"endColumn":96},{"ruleId":"238","severity":1,"message":"239","line":95,"column":12,"nodeType":"240","endLine":95,"endColumn":74},{"ruleId":"238","severity":1,"message":"239","line":58,"column":12,"nodeType":"240","endLine":58,"endColumn":74},{"ruleId":"230","severity":1,"message":"231","line":184,"column":11,"nodeType":"232","messageId":"233","endLine":184,"endColumn":13},{"ruleId":"230","severity":1,"message":"231","line":219,"column":79,"nodeType":"232","messageId":"233","endLine":219,"endColumn":81},{"ruleId":"230","severity":1,"message":"231","line":254,"column":71,"nodeType":"232","messageId":"233","endLine":254,"endColumn":73},{"ruleId":"230","severity":1,"message":"231","line":286,"column":73,"nodeType":"232","messageId":"233","endLine":286,"endColumn":75},{"ruleId":"230","severity":1,"message":"231","line":321,"column":77,"nodeType":"232","messageId":"233","endLine":321,"endColumn":79},{"ruleId":"230","severity":1,"message":"231","line":485,"column":84,"nodeType":"232","messageId":"233","endLine":485,"endColumn":86},{"ruleId":"230","severity":1,"message":"231","line":522,"column":77,"nodeType":"232","messageId":"233","endLine":522,"endColumn":79},{"ruleId":"230","severity":1,"message":"231","line":571,"column":78,"nodeType":"232","messageId":"233","endLine":571,"endColumn":80},{"ruleId":"230","severity":1,"message":"231","line":608,"column":83,"nodeType":"232","messageId":"233","endLine":608,"endColumn":85},{"ruleId":"230","severity":1,"message":"231","line":665,"column":58,"nodeType":"232","messageId":"233","endLine":665,"endColumn":60},{"ruleId":"241","severity":1,"message":"242","line":934,"column":118,"nodeType":"243","messageId":"244","endLine":934,"endColumn":120},{"ruleId":"245","severity":1,"message":"246","line":6,"column":8,"nodeType":"247","messageId":"248","endLine":6,"endColumn":14},{"ruleId":"249","severity":1,"message":"250","line":24,"column":22,"nodeType":"251","messageId":"252","endLine":31,"endColumn":10},{"ruleId":"230","severity":1,"message":"231","line":152,"column":53,"nodeType":"232","messageId":"233","endLine":152,"endColumn":55},{"ruleId":"230","severity":1,"message":"231","line":158,"column":34,"nodeType":"232","messageId":"233","endLine":158,"endColumn":36},{"ruleId":"230","severity":1,"message":"231","line":185,"column":53,"nodeType":"232","messageId":"233","endLine":185,"endColumn":55},{"ruleId":"230","severity":1,"message":"231","line":191,"column":34,"nodeType":"232","messageId":"233","endLine":191,"endColumn":36},{"ruleId":"230","severity":1,"message":"231","line":207,"column":39,"nodeType":"232","messageId":"233","endLine":207,"endColumn":41},{"ruleId":"230","severity":1,"message":"231","line":211,"column":39,"nodeType":"232","messageId":"233","endLine":211,"endColumn":41},{"ruleId":"230","severity":1,"message":"231","line":220,"column":39,"nodeType":"232","messageId":"233","endLine":220,"endColumn":41},{"ruleId":"230","severity":1,"message":"231","line":224,"column":39,"nodeType":"232","messageId":"233","endLine":224,"endColumn":41},{"ruleId":"253","severity":1,"message":"254","line":272,"column":44,"nodeType":"247","messageId":"255","endLine":272,"endColumn":49},{"ruleId":"230","severity":1,"message":"231","line":83,"column":114,"nodeType":"232","messageId":"233","endLine":83,"endColumn":116},{"ruleId":"230","severity":1,"message":"231","line":131,"column":100,"nodeType":"232","messageId":"233","endLine":131,"endColumn":102},{"ruleId":"230","severity":1,"message":"231","line":174,"column":108,"nodeType":"232","messageId":"233","endLine":174,"endColumn":110},{"ruleId":"230","severity":1,"message":"231","line":222,"column":106,"nodeType":"232","messageId":"233","endLine":222,"endColumn":108},{"ruleId":"245","severity":1,"message":"256","line":9,"column":8,"nodeType":"247","messageId":"248","endLine":9,"endColumn":16},{"ruleId":"245","severity":1,"message":"257","line":16,"column":8,"nodeType":"247","messageId":"248","endLine":16,"endColumn":13},{"ruleId":"245","severity":1,"message":"258","line":392,"column":13,"nodeType":"247","messageId":"248","endLine":392,"endColumn":24},{"ruleId":"245","severity":1,"message":"259","line":400,"column":13,"nodeType":"247","messageId":"248","endLine":400,"endColumn":29},{"ruleId":"230","severity":1,"message":"260","line":408,"column":49,"nodeType":"232","messageId":"233","endLine":408,"endColumn":51},{"ruleId":"245","severity":1,"message":"261","line":421,"column":13,"nodeType":"247","messageId":"248","endLine":421,"endColumn":25},{"ruleId":"245","severity":1,"message":"262","line":442,"column":13,"nodeType":"247","messageId":"248","endLine":442,"endColumn":27},{"ruleId":"245","severity":1,"message":"263","line":463,"column":13,"nodeType":"247","messageId":"248","endLine":463,"endColumn":28},{"ruleId":"245","severity":1,"message":"264","line":484,"column":13,"nodeType":"247","messageId":"248","endLine":484,"endColumn":31},{"ruleId":"245","severity":1,"message":"265","line":524,"column":17,"nodeType":"247","messageId":"248","endLine":524,"endColumn":38},{"ruleId":"245","severity":1,"message":"266","line":524,"column":40,"nodeType":"247","messageId":"248","endLine":524,"endColumn":58},{"ruleId":"230","severity":1,"message":"231","line":560,"column":20,"nodeType":"232","messageId":"233","endLine":560,"endColumn":22},{"ruleId":"245","severity":1,"message":"267","line":593,"column":17,"nodeType":"247","messageId":"248","endLine":593,"endColumn":36},{"ruleId":"268","severity":1,"message":"269","line":809,"column":13,"nodeType":"270","messageId":"271","endLine":809,"endColumn":26,"fix":"272"},{"ruleId":"273","severity":1,"message":"274","line":1014,"column":47,"nodeType":"247","messageId":"233","endLine":1014,"endColumn":52,"fix":"275"},{"ruleId":"245","severity":1,"message":"276","line":1083,"column":13,"nodeType":"247","messageId":"248","endLine":1083,"endColumn":21},{"ruleId":"245","severity":1,"message":"277","line":1084,"column":13,"nodeType":"247","messageId":"248","endLine":1084,"endColumn":23},{"ruleId":"245","severity":1,"message":"278","line":1085,"column":13,"nodeType":"247","messageId":"248","endLine":1085,"endColumn":24},{"ruleId":"230","severity":1,"message":"231","line":1144,"column":152,"nodeType":"232","messageId":"233","endLine":1144,"endColumn":154},{"ruleId":"230","severity":1,"message":"231","line":1144,"column":181,"nodeType":"232","messageId":"233","endLine":1144,"endColumn":183},{"ruleId":"230","severity":1,"message":"231","line":1144,"column":218,"nodeType":"232","messageId":"233","endLine":1144,"endColumn":220},{"ruleId":"230","severity":1,"message":"231","line":1144,"column":251,"nodeType":"232","messageId":"233","endLine":1144,"endColumn":253},{"ruleId":"230","severity":1,"message":"260","line":1149,"column":121,"nodeType":"232","messageId":"233","endLine":1149,"endColumn":123},{"ruleId":"230","severity":1,"message":"231","line":1726,"column":169,"nodeType":"232","messageId":"233","endLine":1726,"endColumn":171},{"ruleId":"230","severity":1,"message":"231","line":1726,"column":198,"nodeType":"232","messageId":"233","endLine":1726,"endColumn":200},{"ruleId":"230","severity":1,"message":"231","line":1726,"column":235,"nodeType":"232","messageId":"233","endLine":1726,"endColumn":237},{"ruleId":"230","severity":1,"message":"231","line":1726,"column":268,"nodeType":"232","messageId":"233","endLine":1726,"endColumn":270},{"ruleId":"230","severity":1,"message":"260","line":1737,"column":149,"nodeType":"232","messageId":"233","endLine":1737,"endColumn":151},{"ruleId":"241","severity":1,"message":"242","line":2379,"column":251,"nodeType":"243","messageId":"244","endLine":2379,"endColumn":253},{"ruleId":"238","severity":1,"message":"239","line":2600,"column":45,"nodeType":"240","endLine":2600,"endColumn":107},{"ruleId":"279","severity":1,"message":"280","line":7,"column":1,"nodeType":"281","endLine":60,"endColumn":3},{"ruleId":"245","severity":1,"message":"282","line":73,"column":13,"nodeType":"247","messageId":"248","endLine":73,"endColumn":14},{"ruleId":"245","severity":1,"message":"283","line":74,"column":13,"nodeType":"247","messageId":"248","endLine":74,"endColumn":14},{"ruleId":"245","severity":1,"message":"284","line":166,"column":13,"nodeType":"247","messageId":"248","endLine":166,"endColumn":24},{"ruleId":"245","severity":1,"message":"285","line":186,"column":21,"nodeType":"247","messageId":"248","endLine":186,"endColumn":25},{"ruleId":"230","severity":1,"message":"231","line":135,"column":44,"nodeType":"232","messageId":"233","endLine":135,"endColumn":46},{"ruleId":"230","severity":1,"message":"231","line":178,"column":44,"nodeType":"232","messageId":"233","endLine":178,"endColumn":46},{"ruleId":"230","severity":1,"message":"231","line":306,"column":136,"nodeType":"232","messageId":"233","endLine":306,"endColumn":138},{"ruleId":"230","severity":1,"message":"231","line":341,"column":130,"nodeType":"232","messageId":"233","endLine":341,"endColumn":132},{"ruleId":"245","severity":1,"message":"286","line":64,"column":13,"nodeType":"247","messageId":"248","endLine":64,"endColumn":25},{"ruleId":"287","severity":1,"message":"288","line":70,"column":66,"nodeType":"243","messageId":"289","endLine":70,"endColumn":167},{"ruleId":"230","severity":1,"message":"260","line":48,"column":35,"nodeType":"232","messageId":"233","endLine":48,"endColumn":37},{"ruleId":"245","severity":1,"message":"290","line":74,"column":24,"nodeType":"247","messageId":"248","endLine":74,"endColumn":28},{"ruleId":"245","severity":1,"message":"291","line":74,"column":38,"nodeType":"247","messageId":"248","endLine":74,"endColumn":47},{"ruleId":"245","severity":1,"message":"292","line":74,"column":49,"nodeType":"247","messageId":"248","endLine":74,"endColumn":54},{"ruleId":"245","severity":1,"message":"293","line":74,"column":56,"nodeType":"247","messageId":"248","endLine":74,"endColumn":59},{"ruleId":"245","severity":1,"message":"294","line":74,"column":61,"nodeType":"247","messageId":"248","endLine":74,"endColumn":68},{"ruleId":"245","severity":1,"message":"295","line":74,"column":70,"nodeType":"247","messageId":"248","endLine":74,"endColumn":77},{"ruleId":"245","severity":1,"message":"296","line":74,"column":79,"nodeType":"247","messageId":"248","endLine":74,"endColumn":88},{"ruleId":"245","severity":1,"message":"297","line":74,"column":90,"nodeType":"247","messageId":"248","endLine":74,"endColumn":94},{"ruleId":"245","severity":1,"message":"298","line":76,"column":15,"nodeType":"247","messageId":"248","endLine":76,"endColumn":19},{"ruleId":"234","severity":1,"message":"235","line":120,"column":62,"nodeType":"236","messageId":"237","endLine":120,"endColumn":194},{"ruleId":"230","severity":1,"message":"231","line":121,"column":34,"nodeType":"232","messageId":"233","endLine":121,"endColumn":36},{"ruleId":"234","severity":1,"message":"235","line":121,"column":56,"nodeType":"236","messageId":"237","endLine":121,"endColumn":113},{"ruleId":"230","severity":1,"message":"231","line":181,"column":20,"nodeType":"232","messageId":"233","endLine":181,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":181,"column":36,"nodeType":"232","messageId":"233","endLine":181,"endColumn":38},{"ruleId":"230","severity":1,"message":"231","line":181,"column":58,"nodeType":"232","messageId":"233","endLine":181,"endColumn":60},{"ruleId":"230","severity":1,"message":"231","line":181,"column":79,"nodeType":"232","messageId":"233","endLine":181,"endColumn":81},{"ruleId":"230","severity":1,"message":"231","line":181,"column":101,"nodeType":"232","messageId":"233","endLine":181,"endColumn":103},{"ruleId":"230","severity":1,"message":"231","line":181,"column":123,"nodeType":"232","messageId":"233","endLine":181,"endColumn":125},{"ruleId":"230","severity":1,"message":"231","line":193,"column":20,"nodeType":"232","messageId":"233","endLine":193,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":193,"column":36,"nodeType":"232","messageId":"233","endLine":193,"endColumn":38},{"ruleId":"230","severity":1,"message":"231","line":193,"column":58,"nodeType":"232","messageId":"233","endLine":193,"endColumn":60},{"ruleId":"230","severity":1,"message":"231","line":193,"column":79,"nodeType":"232","messageId":"233","endLine":193,"endColumn":81},{"ruleId":"230","severity":1,"message":"231","line":193,"column":101,"nodeType":"232","messageId":"233","endLine":193,"endColumn":103},{"ruleId":"230","severity":1,"message":"231","line":193,"column":123,"nodeType":"232","messageId":"233","endLine":193,"endColumn":125},{"ruleId":"245","severity":1,"message":"299","line":199,"column":77,"nodeType":"247","messageId":"248","endLine":199,"endColumn":86},{"ruleId":"279","severity":1,"message":"300","line":38,"column":1,"nodeType":"281","endLine":194,"endColumn":3},"no-native-reassign",["301"],"no-negated-in-lhs",["302"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'jQuery' is defined but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-use-before-define","'timer' was used before it was defined.","usedBeforeDefined","'Calendar' is defined but never used.","'Clock' is defined but never used.","'_popularity' is assigned a value but never used.","'chart_byCategory' is assigned a value but never used.","Expected '===' and instead saw '=='.","'chart_byView' is assigned a value but never used.","'chart_byUpvote' is assigned a value but never used.","'chart_byComment' is assigned a value but never used.","'chart_byViewFollow' is assigned a value but never used.","'_user_toEdit_username' is assigned a value but never used.","'_user_toEdit_roles' is assigned a value but never used.","'mySwiperTestimonies' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"303","text":"304"},"no-extra-label","This label 'inner' is unnecessary.",{"range":"305","text":"304"},"'_views_c' is assigned a value but never used.","'_upvotes_c' is assigned a value but never used.","'_comments_c' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'x' is assigned a value but never used.","'y' is assigned a value but never used.","'resizeCount' is assigned a value but never used.","'data' is assigned a value but never used.","'_event_dates' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'day'.","unsafeRefs","'body' is assigned a value but never used.","'categorie' is assigned a value but never used.","'_hide' is assigned a value but never used.","'tag' is assigned a value but never used.","'comment' is assigned a value but never used.","'upvotes' is assigned a value but never used.","'downvotes' is assigned a value but never used.","'view' is assigned a value but never used.","'self' is assigned a value but never used.","'modal_msg' is assigned a value but never used.","Assign arrow function to a variable before exporting as module default","no-global-assign","no-unsafe-negation",[32367,32380],"",[43443,43449]]